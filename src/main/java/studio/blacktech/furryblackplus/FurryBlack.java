package studio.blacktech.furryblackplus;

import kotlin.sequences.Sequence;
import net.mamoe.mirai.Bot;
import net.mamoe.mirai.BotFactory;
import net.mamoe.mirai.Mirai;
import net.mamoe.mirai.auth.BotAuthorization;
import net.mamoe.mirai.contact.Contact;
import net.mamoe.mirai.contact.ContactList;
import net.mamoe.mirai.contact.Friend;
import net.mamoe.mirai.contact.Group;
import net.mamoe.mirai.contact.Member;
import net.mamoe.mirai.contact.NormalMember;
import net.mamoe.mirai.contact.OtherClientInfo;
import net.mamoe.mirai.contact.Stranger;
import net.mamoe.mirai.contact.User;
import net.mamoe.mirai.data.FriendInfo;
import net.mamoe.mirai.data.MemberInfo;
import net.mamoe.mirai.data.StrangerInfo;
import net.mamoe.mirai.data.UserProfile;
import net.mamoe.mirai.event.GlobalEventChannel;
import net.mamoe.mirai.event.Listener;
import net.mamoe.mirai.event.events.BotInvitedJoinGroupRequestEvent;
import net.mamoe.mirai.event.events.GroupMessageEvent;
import net.mamoe.mirai.event.events.MemberJoinEvent;
import net.mamoe.mirai.event.events.MemberLeaveEvent;
import net.mamoe.mirai.event.events.NewFriendRequestEvent;
import net.mamoe.mirai.event.events.UserMessageEvent;
import net.mamoe.mirai.message.action.Nudge;
import net.mamoe.mirai.message.data.At;
import net.mamoe.mirai.message.data.FlashImage;
import net.mamoe.mirai.message.data.ForwardMessage;
import net.mamoe.mirai.message.data.Image;
import net.mamoe.mirai.message.data.Message;
import net.mamoe.mirai.message.data.MessageChain;
import net.mamoe.mirai.message.data.MessageSource;
import net.mamoe.mirai.message.data.PlainText;
import net.mamoe.mirai.utils.BotConfiguration;
import net.mamoe.mirai.utils.MiraiLogger;
import org.jetbrains.annotations.Nullable;
import org.jline.builtins.Completers.TreeCompleter;
import org.jline.reader.Candidate;
import org.jline.reader.Completer;
import org.jline.reader.LineReader;
import org.jline.reader.LineReaderBuilder;
import org.jline.reader.ParsedLine;
import org.jline.reader.impl.completer.AggregateCompleter;
import org.jline.reader.impl.completer.ArgumentCompleter;
import org.jline.reader.impl.completer.StringsCompleter;
import org.jline.widget.AutopairWidgets;
import studio.blacktech.furryblackplus.core.common.annotation.Comment;
import studio.blacktech.furryblackplus.core.common.enhance.FileEnhance;
import studio.blacktech.furryblackplus.core.common.enhance.LockEnhance;
import studio.blacktech.furryblackplus.core.common.enhance.StringEnhance;
import studio.blacktech.furryblackplus.core.common.enhance.TimeEnhance;
import studio.blacktech.furryblackplus.core.exception.CoreException;
import studio.blacktech.furryblackplus.core.exception.schema.SchemaException;
import studio.blacktech.furryblackplus.core.exception.system.FirstBootException;
import studio.blacktech.furryblackplus.core.exception.system.InvalidConfigException;
import studio.blacktech.furryblackplus.core.exception.system.TerminalException;
import studio.blacktech.furryblackplus.core.handler.EventHandlerChecker;
import studio.blacktech.furryblackplus.core.handler.EventHandlerExecutor;
import studio.blacktech.furryblackplus.core.handler.EventHandlerFilter;
import studio.blacktech.furryblackplus.core.handler.EventHandlerMonitor;
import studio.blacktech.furryblackplus.core.handler.EventHandlerRunner;
import studio.blacktech.furryblackplus.core.handler.annotation.AnnotationEnhance;
import studio.blacktech.furryblackplus.core.handler.annotation.Checker;
import studio.blacktech.furryblackplus.core.handler.annotation.Executor;
import studio.blacktech.furryblackplus.core.handler.annotation.Filter;
import studio.blacktech.furryblackplus.core.handler.annotation.Monitor;
import studio.blacktech.furryblackplus.core.handler.annotation.Runner;
import studio.blacktech.furryblackplus.core.handler.common.AbstractEventHandler;
import studio.blacktech.furryblackplus.core.handler.common.Command;
import studio.blacktech.furryblackplus.core.logging.LoggerX;
import studio.blacktech.furryblackplus.core.logging.LoggerXFactory;
import studio.blacktech.furryblackplus.core.logging.annotation.LoggerXConfig;
import studio.blacktech.furryblackplus.core.logging.enums.LoggerXLevel;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.Reader;
import java.lang.management.ManagementFactory;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.URL;
import java.net.URLClassLoader;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.Instant;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.NavigableMap;
import java.util.Objects;
import java.util.Properties;
import java.util.Set;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.concurrent.Callable;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import java.util.jar.Attributes;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.Manifest;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static org.jline.builtins.Completers.TreeCompleter.node;
import static studio.blacktech.furryblackplus.core.common.enhance.DataEnhance.parseInt;
import static studio.blacktech.furryblackplus.core.common.enhance.DataEnhance.parseLong;
import static studio.blacktech.furryblackplus.core.common.enhance.StringEnhance.toHumanBytes;
import static studio.blacktech.furryblackplus.core.common.enhance.StringEnhance.toHumanHashCode;
import static studio.blacktech.furryblackplus.core.handler.annotation.AnnotationEnhance.printAnnotation;
import static studio.blacktech.furryblackplus.core.logging.enums.LoggerXColor.BLACK;
import static studio.blacktech.furryblackplus.core.logging.enums.LoggerXColor.BLUE;
import static studio.blacktech.furryblackplus.core.logging.enums.LoggerXColor.BOLD_BLACK;
import static studio.blacktech.furryblackplus.core.logging.enums.LoggerXColor.BOLD_BLUE;
import static studio.blacktech.furryblackplus.core.logging.enums.LoggerXColor.BOLD_BRIGHT_BLACK;
import static studio.blacktech.furryblackplus.core.logging.enums.LoggerXColor.BOLD_BRIGHT_BLUE;
import static studio.blacktech.furryblackplus.core.logging.enums.LoggerXColor.BOLD_BRIGHT_CYAN;
import static studio.blacktech.furryblackplus.core.logging.enums.LoggerXColor.BOLD_BRIGHT_GREEN;
import static studio.blacktech.furryblackplus.core.logging.enums.LoggerXColor.BOLD_BRIGHT_MAGENTA;
import static studio.blacktech.furryblackplus.core.logging.enums.LoggerXColor.BOLD_BRIGHT_RED;
import static studio.blacktech.furryblackplus.core.logging.enums.LoggerXColor.BOLD_BRIGHT_WHITE;
import static studio.blacktech.furryblackplus.core.logging.enums.LoggerXColor.BOLD_BRIGHT_YELLOW;
import static studio.blacktech.furryblackplus.core.logging.enums.LoggerXColor.BOLD_CYAN;
import static studio.blacktech.furryblackplus.core.logging.enums.LoggerXColor.BOLD_GREEN;
import static studio.blacktech.furryblackplus.core.logging.enums.LoggerXColor.BOLD_MAGENTA;
import static studio.blacktech.furryblackplus.core.logging.enums.LoggerXColor.BOLD_RED;
import static studio.blacktech.furryblackplus.core.logging.enums.LoggerXColor.BOLD_WHITE;
import static studio.blacktech.furryblackplus.core.logging.enums.LoggerXColor.BOLD_YELLOW;
import static studio.blacktech.furryblackplus.core.logging.enums.LoggerXColor.BRIGHT_BLACK;
import static studio.blacktech.furryblackplus.core.logging.enums.LoggerXColor.BRIGHT_BLUE;
import static studio.blacktech.furryblackplus.core.logging.enums.LoggerXColor.BRIGHT_CYAN;
import static studio.blacktech.furryblackplus.core.logging.enums.LoggerXColor.BRIGHT_GREEN;
import static studio.blacktech.furryblackplus.core.logging.enums.LoggerXColor.BRIGHT_MAGENTA;
import static studio.blacktech.furryblackplus.core.logging.enums.LoggerXColor.BRIGHT_RED;
import static studio.blacktech.furryblackplus.core.logging.enums.LoggerXColor.BRIGHT_WHITE;
import static studio.blacktech.furryblackplus.core.logging.enums.LoggerXColor.BRIGHT_YELLOW;
import static studio.blacktech.furryblackplus.core.logging.enums.LoggerXColor.CYAN;
import static studio.blacktech.furryblackplus.core.logging.enums.LoggerXColor.GREEN;
import static studio.blacktech.furryblackplus.core.logging.enums.LoggerXColor.MAGENTA;
import static studio.blacktech.furryblackplus.core.logging.enums.LoggerXColor.RED;
import static studio.blacktech.furryblackplus.core.logging.enums.LoggerXColor.RESET;
import static studio.blacktech.furryblackplus.core.logging.enums.LoggerXColor.WHITE;
import static studio.blacktech.furryblackplus.core.logging.enums.LoggerXColor.YELLOW;

@Comment(
  value = "FurryBlack - Mirai",
  usage = {
    "A Mirai wrapper QQ-Bot framework make with love and üß¶",
    "ÁîµÂ≠êÁôΩÁÜä‰ºöÊ¢¶Âà∞‰ªøÁîüËÄÅÈªëÂêó",
    "Alceatraz Warprays @ BlackTechStudio",
    "‰∏™‰∫∫‰∏ªÈ°µ https://www.blacktech.studio",
    "È°πÁõÆÂú∞ÂùÄ https://github.com/Alceatraz/FurryBlack-Mirai",
    "Êèí‰ª∂Âú∞ÂùÄ https://github.com/Alceatraz/FurryBlack-Mirai-Extensions",
  },
  attention = {
    "!!!Êú¨È°πÁõÆÂπ∂Èùû‰ΩøÁî®Á∫ØAGPLv3ÂçèËÆÆ, ËØ∑ËÆ§ÁúüÈòÖËØªLICENSE!!!"
  }
)
public class FurryBlack {

  //= ==================================================================================================================
  //=
  //= ÈùôÊÄÅÊï∞ÊçÆ
  //=
  //= ==================================================================================================================

  public static final String APP_VERSION = "3.0.4";
  public static final String MIRAI_VERSION = "2.15.0";

  //= ==========================================================================

  private static final String[] ARGS_DEBUG = {"debug"};
  private static final String[] ARGS_UNSAFE = {"unsafe"};
  private static final String[] ARGS_NO_LOGIN = {"no", "login"};
  private static final String[] ARGS_NO_JLINE = {"no", "jline"};
  private static final String[] ARGS_FULL_NAME = {"full", "name"};
  private static final String[] ARGS_NO_CONSOLE = {"no", "console"};
  private static final String[] ARGS_FORCE_EXIT = {"force", "exit"};
  private static final String[] ARGS_LOGGER_LEVEL = {"logger", "level"};
  private static final String[] ARGS_LOGGER_PREFIX = {"logger", "prefix"};
  private static final String[] ARGS_LOGGER_PROVIDER = {"logger", "provider"};

  private static final String[] CONF_DEVICE_TYPE = {"device", "type"};
  private static final String[] CONF_DEVICE_INFO = {"device", "info"};
  private static final String[] CONF_ACCOUNT_AUTH = {"account", "auth"};
  private static final String[] CONF_ACCOUNT_USERNAME = {"account", "username"};
  private static final String[] CONF_ACCOUNT_PASSWORD = {"account", "password"};
  private static final String[] CONF_COMMAND_REGEX = {"command", "regex"};
  private static final String[] CONF_THREADS_MONITOR = {"threads", "monitor"};
  private static final String[] CONF_THREADS_SCHEDULE = {"threads", "schedule"};
  private static final String[] CONF_UPGRADE_PROTOCOLS = {"upgrade", "protocols"};

  //= ==========================================================================

  private static final DateTimeFormatter FORMATTER;

  //= ==========================================================================

  @Comment("QQÁî®Êç¢Ë°åÁ¨¶") public static final String CRLF = "\r\n";
  @Comment("Á≥ªÁªüÊç¢Ë°åÁ¨¶") public static final String LINE;

  public static final int CPU_CORES;
  public static final long BOOT_TIME;

  public static final String CONTENT_INFO;
  public static final String CONTENT_HELP;
  public static final String CONTENT_COLOR;
  public static final String DEFAULT_CONFIG;

  //= ==================================================================================================================

  static {

    //= ================================================================================================================
    //= Á≥ªÁªü‰ø°ÊÅØ

    LINE = System.lineSeparator();

    BOOT_TIME = ManagementFactory.getRuntimeMXBean().getStartTime();
    CPU_CORES = Runtime.getRuntime().availableProcessors();

    FORMATTER = TimeEnhance.pattern("yyyy-MM-dd HH-mm-ss");

    //= ================================================================================================================
    //= Ê°ÜÊû∂‰ø°ÊÅØ

    CONTENT_INFO =

      // @formatter:off

BOLD_BRIGHT_CYAN +
"‚Äª FurryBlack ÁâàÊú¨‰ø°ÊÅØ ===========================================================" + RESET + LINE + LINE +

"A Mirai wrapper framework make with love and üß¶" + LINE +
"Create by: Alceatraz Warprays @ BlackTechStudio" + LINE + LINE +

"Ê°ÜÊû∂ÁâàÊú¨ " + APP_VERSION + LINE +
"ÂÜÖÊ†∏ÁâàÊú¨ " + MIRAI_VERSION + LINE + LINE +
"ÂÜÖÊ†∏Ê∫êÁ†Å https://github.com/mamoe/mirai" + LINE +
"Ê°ÜÊû∂Ê∫êÁ†Å https://github.com/Alceatraz/FurryBlack-Mirai" + LINE +
"Á§∫‰æãÊèí‰ª∂ https://github.com/Alceatraz/FurryBlack-Mirai-Extensions" + LINE + LINE +

BOLD_BRIGHT_CYAN +
"# ==============================================================================" + RESET

      // @formatter:on

    ;

    CONTENT_HELP =

      // @formatter:off

BOLD_BRIGHT_CYAN +
"‚Äª FurryBlack ÁâàÊú¨‰ø°ÊÅØ ===========================================================" + RESET + LINE +
"A Mirai wrapper framework make with love and üß¶" + LINE +
"Create by: Alceatraz Warprays @ BlackTechStudio" + LINE +
"Ê°ÜÊû∂ÁâàÊú¨ " + APP_VERSION + LINE +
"ÂÜÖÊ†∏ÁâàÊú¨ " + MIRAI_VERSION + LINE +
"ÂÜÖÊ†∏Ê∫êÁ†Å https://github.com/mamoe/mirai" + LINE +
"Ê°ÜÊû∂Ê∫êÁ†Å https://github.com/Alceatraz/FurryBlack-Mirai" + LINE +
"Á§∫‰æãÊèí‰ª∂ https://github.com/Alceatraz/FurryBlack-Mirai-Extensions" + LINE +

BOLD_BRIGHT_CYAN +
"‚Äª FurryBlack ‰∫§‰∫íÊ®°Âºè ===========================================================" + RESET + LINE +
"--help ------------------------------ ÊòæÁ§∫Â∏ÆÂä©" + LINE +
"--info ------------------------------ ÊòæÁ§∫ÁâàÊú¨" + LINE +
"--color ----------------------------- ÊòæÁ§∫È¢úËâ≤" + LINE +
"* ‰∫§‰∫íÊ®°ÂºèÊòØÊ®°‰ªøunixËΩØ‰ª∂ÁöÑ‰ø°ÊÅØÊòæÁ§∫ÂäüËÉΩ, ÊâßË°åÂêéÈÄÄÂá∫" + LINE +

BOLD_BRIGHT_CYAN +
"‚Äª FurryBlack ÂêØÂä®ÂèÇÊï∞ ===========================================================" + RESET + LINE +
"--debug ----------------------------- ÈÄâÈ°π ÂêØÂä®DEBUGÊ®°Âºè*" + LINE +
"--unsafe ---------------------------- ÈÄâÈ°π ÂÖÅËÆ∏‰∏Ä‰∫õÊ≠£Â∏∏Ê®°Âºè‰∏ãÁ¶ÅÊ≠¢ÁöÑË∞ÉÁî®" + LINE +
"--no-login -------------------------- ÈÄâÈ°π Ë∑≥ËøáÂÆ¢Êà∑Á´ØÁôªÂΩï,Â§ßÈÉ®ÂàÜÂäüËÉΩ‰∏çÂèØÁî®" + LINE +
"--no-jline -------------------------- ÈÄâÈ°π ‰∏ç‰ΩøÁî®jlineÁªàÁ´Ø" + LINE +
"--no-console ------------------------ ÈÄâÈ°π ‰∏ç‰ΩøÁî®ÁªàÁ´Ø" + LINE +
"--force-exit ------------------------ ÈÄâÈ°π ÂÖ≥Èó≠ÂêéÂ∞ÜÂº∫ÈÄÄJVM" + LINE +
"--full-name ------------------------- ÈÄâÈ°π Êó•ÂøóÊòæÁ§∫ÂÆåÊàêÁ±ªÂêç" + LINE +
"--logger-level ---------------------- ÂèÇÊï∞ ËÆæÁΩÆÈªòËÆ§Êó•ÂøóÁ∫ßÂà´*" + LINE +
"--logger-prefix --------------------- ÂèÇÊï∞ ‰ΩøÁî®ÊåáÂÆöÁöÑÊó•ÂøóÁ∫ßÂà´ÈÖçÁΩÆ*" + LINE +
"--logger-provider ------------------- ÂèÇÊï∞ ‰ΩøÁî®ÊåáÂÆöÁ±ªÂêçÁöÑÊó•ÂøóÂÆûÁé∞ÂêéÁ´Ø*" + LINE +
YELLOW +
"* ÂèØÂú®ÂêØÂä®ÂêéÈÄöËøáÁªàÁ´Ø‰øÆÊîπ,ÂèÇÊï∞ÁöÑÁõÆÁöÑÊòØÂêØÂä®ÂàùÂßãÂåñÈò∂ÊÆµÂç≥Â∫îÁî®" + LINE +
"* ÈÄâÈ°π: ÈîÆÂ≠òÂú®Âç≥ÂèØ, ÂèÇÊï∞: ÂøÖÈ°ªÊòØÈîÆÂÄºÂØπ ‰æãÂ¶Ç --logger-level MUTE" + RESET + LINE +

BOLD_BRIGHT_CYAN +
"‚Äª FurryBlack ÂèÇÊï∞‰º†ÈÄí ===========================================================" + RESET + LINE +
"‰æãÂ¶Ç foo bar ÂèÇÊï∞ ÂèØÁî±‰∏âÁßçÊñπÂºè‰º†ÈÄí" + LINE +
"ÁéØÂ¢ÉÂèòÈáè export FOO_BAR -------------- ËΩ¨Êç¢‰∏∫Â§ßÂÜô ‰∏ãÂàíÁ∫øÊãºÊé•" + LINE +
"Á≥ªÁªüÈÖçÁΩÆ -Dfoo.bar ------------------- ËΩ¨Êç¢‰∏∫Â∞èÂÜô Ëã±Âè•Âè∑ÊãºÊé•" + LINE +
"Á®ãÂ∫èÂèÇÊï∞ --foo-bar ------------------- ËΩ¨Êç¢‰∏∫Â∞èÂÜô ‰∏≠Ê®™Á∫øÊãºÊé•" + LINE +
"ÈÖçÁΩÆÊñá‰ª∂ foo.bar --------------------- ËΩ¨Êç¢‰∏∫Â∞èÂÜô Ëã±Âè•Âè∑ÊãºÊé•" + LINE +

BOLD_BRIGHT_CYAN +
"‚Äª FurryBlack ÂëΩÂêçÁ©∫Èó¥ ===========================================================" + RESET + LINE +
"Á®ãÂ∫èÂèÇÊï∞ --namespace xxx ÂèØÂ∞ÜÂèÇÊï∞‰º†ÈÄíÊó∂ÁöÑÊâÄÊúâÈîÆÊ∑ªÂä†ÂâçÁºÄ, ‰æãÂ¶Ç:" + LINE +
"ÁéØÂ¢ÉÂèòÈáè export XXX_FOO_BAR ---------- ËΩ¨Êç¢‰∏∫Â§ßÂÜô ‰∏ãÂàíÁ∫øÊãºÊé•" + LINE +
"Á≥ªÁªüÈÖçÁΩÆ -Dxxx.foo.bar --------------- ËΩ¨Êç¢‰∏∫Â∞èÂÜô ‰∏≠Ê®™Á∫øÊãºÊé•" + LINE +
"Á®ãÂ∫èÂèÇÊï∞ --xxx-foo-bar --------------- ËΩ¨Êç¢‰∏∫Â∞èÂÜô Ëã±Âè•Âè∑ÊãºÊé•" + LINE +
"ÈÖçÁΩÆÊñá‰ª∂ foo.bar --------------------- ËΩ¨Êç¢‰∏∫Â∞èÂÜô Ëã±Âè•Âè∑ÊãºÊé•" + LINE +
YELLOW +
"* ÈÖçÁΩÆÊñá‰ª∂ÂÜÖÂêçÁß∞‰∏çÂèóÂëΩÂêçÁ©∫Èó¥ÂΩ±Âìç" + RESET + LINE +

BOLD_BRIGHT_CYAN +
"‚Äª FurryBlack Ë¶ÜÁõñÂèÇÊï∞ ===========================================================" + RESET + LINE +
"ÂèÇÊï∞‰ºòÂÖàÁ∫ß ÁéØÂ¢ÉÂèòÈáè > Á≥ªÁªüÈÖçÁΩÆ > Á®ãÂ∫èÂèÇÊï∞ > ÈÖçÁΩÆÊñá‰ª∂ " + LINE +
"account.auth ----------------------- ËÆ§ËØÅÊ®°Âºè PASSWD/QRCODE" + LINE +
"account.username ------------------- Ë¥¶Âè∑, ÂøÖÂ°´" + LINE +
"account.password* ------------------ ÂØÜÁ†Å, QRCODEÊ®°Âºè‰∏çÂ°´" + LINE +
"device.type ------------------------ ËÆæÂ§áÁ±ªÂûã, IPAD/MACOS/PAD/PHONE/WATCH" + LINE +
"device.info ------------------------ ËÆæÂ§á‰ø°ÊÅØ, ‰ΩøÁî®AokiÁîüÊàê" + LINE +
"command.prefix --------------------- ÂëΩ‰ª§ËØÜÂà´Ê≠£Âàô" + LINE +
"threads.monitor -------------------- ÁõëÂê¨Âô®Á∫øÁ®ãÊ±†" + LINE +
"threads.schedule ------------------- ÂÆöÊó∂Âô®Á∫øÁ®ãÊ±†" + LINE +
"upgrade.protocols ------------------ ÂçáÁ∫ßÂçèËÆÆÁâàÊú¨" + LINE +
YELLOW +
"* ‰∏∫‰∫ÜÈÅøÂÖçÊúâ‰∫∫ÊääÂØÜÁ†ÅÂÜôÂú®ÂëΩ‰ª§Ë°åÂØºËá¥ÊâÄÊúâ‰∫∫ÈÉΩËÉΩÂú®taskÈáåÁúãËßÅ, ÂØÜÁ†Å‰∏ç‰ªéÁ≥ªÁªüÈÖçÁΩÆÊàñÁ®ãÂ∫èÂèÇÊï∞ËØªÂèñ" + LINE +
"* Â¶ÇËã•ÊâßÊÑèË¶ÅÂ¶ÇÊ≠§‰ΩøÁî®, ÈúÄË¶Å‰ΩøÁî®unsafeÈÖçÁΩÆÈ°π, Ëß£ÈîÅÂÆâÂÖ®ÈôêÂà∂Âêé‰ΩøÁî®, Âº∫ÁÉàÂèçÂØπ‰ΩøÁî®Âõ†ÂÖ∂ÊûÅÂ∫¶Âç±Èô©" + RESET + LINE +

BOLD_BRIGHT_CYAN +
"‚Äª FurryBlack ÊéßÂà∂Âè∞  ============================================================" + RESET + LINE +
RED +
"‚ö† ÊéßÂà∂Âè∞‰ªª‰ΩïÊìç‰ΩúÈÉΩÂ±û‰∫éÂ∫ïÂ±ÇÊìç‰ΩúÂèØ‰ª•Áõ¥Êé•ÂØπÊ°ÜÊû∂ËøõË°å‰∏çÂÆâÂÖ®ÂíåÈùûÊ≥ïÁöÑÊìç‰Ωú" + RESET + LINE +
"ÂÆâÂÖ®: ËÆæËÆ°Â¶ÇÊ≠§, ‰∏ç‰ºöÂØºËá¥ÂºÇÂ∏∏ÊàñËÄÖ‰∏çÂèØÈ¢ÑÊµãÁöÑÁªìÊûú" + LINE +
"È£éÈô©: ÂäüËÉΩËÆæËÆ°‰∏äÊòØÂÆâÂÖ®Êìç‰Ωú, ‰ΩÜÊòØÂÖ∑‰ΩìË¢´Êìç‰ΩúÂØπË±°ÂèØËÉΩÂØºËá¥ÈîôËØØ" + LINE +
"Âç±Èô©: Ê≤°ÊúâÂÆâÂÖ®ÊÄßÊ£ÄÊü•ÁöÑÊìç‰Ωú, ÂèØËÉΩ‰ºöËÆ©ÂäüËÉΩ‰∏•ÈáçÂºÇÂ∏∏ÂØºËá¥Ë¢´Ëø´ÈáçÂêØÊàñÊçüÂùèÊ®°ÂùóÁöÑÊï∞ÊçÆÂ≠òÊ°£" + LINE +
"È´òÂç±: ÂêéÊûúÂÆåÂÖ®Êú™Áü•ÁöÑÂç±Èô©Êìç‰Ωú, ÊàñËÄÖÊ≠£Â∏∏ÊµÅÁ®ã‰∏≠‰∏çÂ∫îËØ•Â¶ÇÊ≠§Êìç‰Ωú‰ΩÜÊòØÊéßÂà∂Âè∞‰ªçÁÑ∂ÂèØ‰ª•Âº∫Âà∂ÊâßË°å" + LINE +

BOLD_BRIGHT_CYAN +
"‚Äª Ê°ÜÊû∂ÂÜÖÊ†∏ ======================================================================" + RESET + LINE +
"? ----------------------------------- (ÂÆâÂÖ®) ÊòæÁ§∫Êú¨Â∏ÆÂä©‰ø°ÊÅØ" + LINE +
"help -------------------------------- (ÂÆâÂÖ®) ÊòæÁ§∫Êú¨Â∏ÆÂä©‰ø°ÊÅØ" + LINE +
"gc ---------------------------------- (ÂÆâÂÖ®) ÊòæÁ§∫Á≥ªÁªüËøêË°åÁä∂ÊÄÅ" + LINE +
"status ------------------------------ (ÂÆâÂÖ®) ÊòæÁ§∫Á≥ªÁªüËøêË°åÁä∂ÊÄÅ" + LINE +
"system status ----------------------- (ÂÆâÂÖ®) ÊòæÁ§∫Á≥ªÁªüËøêË°åÁä∂ÊÄÅ" + LINE +
"system stacks ----------------------- (ÂÆâÂÖ®) ÊâìÂç∞ÊâÄÊúâËøêË°å‰∏≠ÁöÑÁ∫øÁ®ã" + LINE +
"system debug [enable|disable] ------- (ÂÆâÂÖ®) ÂàáÊç¢DEBUGÂºÄÂÖ≥Áä∂ÊÄÅ" + LINE +
"system power-off -------------------- (ÂÆâÂÖ®) Ê≠£Â∏∏ÂÖ≥Èó≠Á≥ªÁªü Áõ¥Êé•ÊâßË°å" + LINE +
"system rapid-stop ------------------- (Âç±Èô©) Âø´ÈÄüÂÖ≥Èó≠Á≥ªÁªü Áõ¥Êé•ÊâßË°å" + LINE +
"system force-exit ------------------- (È´òÂç±) Áõ¥Êé•ÊùÄÊ≠ªÁ≥ªÁªü ‰∫åÊ¨°Á°ÆËÆ§" + LINE +

BOLD_BRIGHT_CYAN +
"‚Äª Êèí‰ª∂Á≥ªÁªü ======================================================================" + RESET + LINE +
"schema event [enable|disable] ------- (ÂÆâÂÖ®) ÂêØÁî®Ê∂àÊÅØ‰∫ã‰ª∂Â§ÑÁêÜ Ê≠£Â∏∏ÂìçÂ∫îÊ∂àÊÅØ" + LINE +
"schema ------------------------------ (ÂÆâÂÖ®) ÊòæÁ§∫Êèí‰ª∂Êú∫Âà∂Ê≥®ÂÜåÁä∂ÊÄÅ" + LINE +
"schema plugin ----------------------- (ÂÆâÂÖ®) ÂàóÂá∫ÊâÄÊúâÊèí‰ª∂" + LINE +
"schema module ----------------------- (ÂÆâÂÖ®) ÂàóÂá∫ÊâÄÊúâÊ®°Âùó" + LINE +
"schema module init ------------------ (È£éÈô©) ÊâßË°åÊ®°ÂùóÈ¢ÑËΩΩÊµÅÁ®ã Êó†ËßÜÁä∂ÊÄÅÁõ¥Êé•ÊâßË°å" + LINE +
"schema module boot ------------------ (È£éÈô©) ÊâßË°åÊ®°ÂùóÂêØÂä®ÊµÅÁ®ã Êó†ËßÜÁä∂ÊÄÅÁõ¥Êé•ÊâßË°å" + LINE +
"schema module shut ------------------ (È£éÈô©) ÊâßË°åÊ®°ÂùóÂÖ≥Èó≠ÊµÅÁ®ã Êó†ËßÜÁä∂ÊÄÅÁõ¥Êé•ÊâßË°å" + LINE +
"schema module reboot ---------------- (È£éÈô©) ÊâßË°åÊ®°ÂùóÈáçÂêØÊµÅÁ®ã Êó†ËßÜÁä∂ÊÄÅÁõ¥Êé•ÊâßË°å" + LINE +
"schema module unload ---------------- (È£éÈô©) ÂΩªÂ∫ïÂç∏ËΩΩÊ®°ÂùóÂÆû‰æã Êó†ËßÜÁä∂ÊÄÅÁõ¥Êé•ÊâßË°å" + LINE +
YELLOW +
"* RunnerÂèØËÉΩ‰ºöË¢´‰æùËµñ, Â∫ïÂ±ÇÊìç‰ΩúÊ°ÜÊû∂‰∏çÊ£ÄÊü•‰æùËµñ, ÊúâÂèØËÉΩÂØºËá¥ÂÖ≥ËÅîÊ®°ÂùóÂ¥©Ê∫É" + RESET + LINE +

BOLD_BRIGHT_CYAN +
"‚Äª ÊòµÁß∞Á≥ªÁªü ======================================================================" + RESET + LINE +
"nickname list ----------------------- (ÂÆâÂÖ®) ÂàóÂá∫ÊòµÁß∞" + LINE +
"nickname clean ---------------------- (ÂÆâÂÖ®) Ê∏ÖÁ©∫ÊòµÁß∞" + LINE +
"nickname append --------------------- (ÂÆâÂÖ®) Âä†ËΩΩ‰∏îÂêàÂπ∂ÊòµÁß∞" + LINE +
"nickname reload --------------------- (ÂÆâÂÖ®) Ê∏ÖÁ©∫‰∏îÂä†ËΩΩÊòµÁß∞" + LINE +

BOLD_BRIGHT_CYAN +
"# ==============================================================================" + RESET

      // @formatter:on

    ;

    CONTENT_COLOR =

      // @formatter:off

                      "# ===========================================================================================================" + LINE +
                      "NO COLOR ---------------- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + LINE +
                      "# ===========================================================================================================" + LINE +
BLACK               + "BLACK ------------------- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
RED                 + "RED --------------------- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
GREEN               + "GREEN ------------------- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
YELLOW              + "YELLOW ------------------ THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
BLUE                + "BLUE -------------------- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
MAGENTA             + "MAGENTA ----------------- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
CYAN                + "CYAN -------------------- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
WHITE               + "WHITE ------------------- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
BRIGHT_BLACK        + "BRIGHT_BLACK ------------ THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
BRIGHT_RED          + "BRIGHT_RED -------------- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
BRIGHT_GREEN        + "BRIGHT_GREEN ------------ THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
BRIGHT_YELLOW       + "BRIGHT_YELLOW ----------- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
BRIGHT_BLUE         + "BRIGHT_BLUE ------------- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
BRIGHT_MAGENTA      + "BRIGHT_MAGENTA ---------- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
BRIGHT_CYAN         + "BRIGHT_CYAN ------------- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
BRIGHT_WHITE        + "BRIGHT_WHITE ------------ THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
                      "# ===========================================================================================================" + LINE +
BOLD_BLACK          + "BOLD_BLACK -------------- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
BOLD_RED            + "BOLD_RED ---------------- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
BOLD_GREEN          + "BOLD_GREEN -------------- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
BOLD_YELLOW         + "BOLD_YELLOW ------------- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
BOLD_BLUE           + "BOLD_BLUE --------------- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
BOLD_MAGENTA        + "BOLD_MAGENTA ------------ THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
BOLD_CYAN           + "BOLD_CYAN --------------- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
BOLD_WHITE          + "BOLD_WHITE -------------- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
BOLD_BRIGHT_BLACK   + "BOLD_BRIGHT_BLACK ------- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
BOLD_BRIGHT_RED     + "BOLD_BRIGHT_RED --------- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
BOLD_BRIGHT_GREEN   + "BOLD_BRIGHT_GREEN ------- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
BOLD_BRIGHT_YELLOW  + "BOLD_BRIGHT_YELLOW ------ THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
BOLD_BRIGHT_BLUE    + "BOLD_BRIGHT_BLUE -------- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
BOLD_BRIGHT_MAGENTA + "BOLD_BRIGHT_MAGENTA ----- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
BOLD_BRIGHT_CYAN    + "BOLD_BRIGHT_CYAN -------- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
BOLD_BRIGHT_WHITE   + "BOLD_BRIGHT_WHITE ------- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
                      "# ===========================================================================================================" + LINE +
BOLD_BRIGHT_RED     + "FATAL / BOLD_BRIGHT_RED --------- [2000-00-00 00:00:00][FurryBlack] The Quick Brown Fox Jump Over A Lazy Dog" + RESET + LINE +
BOLD_RED            + "ERROR / BOLD_RED ---------------- [2000-00-00 00:00:00][FurryBlack] The Quick Brown Fox Jump Over A Lazy Dog" + RESET + LINE +
BOLD_BRIGHT_YELLOW  + "WARN  / BOLD_BRIGHT_YELLOW ------ [2000-00-00 00:00:00][FurryBlack] The Quick Brown Fox Jump Over A Lazy Dog" + RESET + LINE +
BRIGHT_CYAN         + "HINT  / BRIGHT_CYAN ------------- [2000-00-00 00:00:00][FurryBlack] The Quick Brown Fox Jump Over A Lazy Dog" + RESET + LINE +
BRIGHT_GREEN        + "SEEK  / BRIGHT_GREEN ------------ [2000-00-00 00:00:00][FurryBlack] The Quick Brown Fox Jump Over A Lazy Dog" + RESET + LINE +
                      "INFO  / BRIGHT_RED -------------- [2000-00-00 00:00:00][FurryBlack] The Quick Brown Fox Jump Over A Lazy Dog" + LINE +
BRIGHT_BLACK        + "DEBUG / BRIGHT_BLACK ------------ [2000-00-00 00:00:00][FurryBlack] The Quick Brown Fox Jump Over A Lazy Dog" + RESET + LINE +
BLACK               + "TRACE / BLACK ------------------- [2000-00-00 00:00:00][FurryBlack] The Quick Brown Fox Jump Over A Lazy Dog" + RESET + LINE +
                      "# ==========================================================================================================="

      // @formatter:on

    ;

    DEFAULT_CONFIG =

      // @formatter:off

"""
#===============================================================================
# Ë¥¶Âè∑ÈÖçÁΩÆ
#===============================================================================
# ËÆ§ËØÅÊ®°Âºè PASSWD/QRCODE
CONF_ACCOUNT_AUTH=PASSWD
# Ë¥¶Âè∑
CONF_ACCOUNT_USERNAME=0000
# ÂØÜÁ†Å
CONF_ACCOUNT_PASSWORD=0000
#===============================================================================
# ËÆæÂ§áËÆæÁΩÆ
#===============================================================================
# ËÆæÂ§áÁ±ªÂûã IPAD/MACOS/PAD/PHONE/WATCH
CONF_DEVICE_TYPE=IPAD
# ËÆæÂ§á‰ø°ÊÅØ ÈúÄË¶Å‰ΩøÁî®AokiÁîüÊàê
CONF_DEVICE_INFO=device.json
#===============================================================================
# ËÆæÂ§áËÆæÁΩÆ
#===============================================================================
# ÂëΩ‰ª§ËØÜÂà´Ê≠£Âàô
CONF_COMMAND_REGEX=/[a-zA-Z0-9]{2,16}
# ÁõëÂê¨Âô®Á∫øÁ®ãÊ±†
CONF_THREADS_MONITOR=0
# ÂÆöÊó∂Âô®Á∫øÁ®ãÊ±†
CONF_THREADS_SCHEDULE=0
#===============================================================================
"""

      // @formatter:on

  .replaceAll("CONF_ACCOUNT_AUTH", String.join(".", CONF_ACCOUNT_AUTH))
  .replaceAll("CONF_ACCOUNT_USERNAME", String.join(".", CONF_ACCOUNT_USERNAME))
  .replaceAll("CONF_ACCOUNT_PASSWORD", String.join(".", CONF_ACCOUNT_PASSWORD))
  .replaceAll("CONF_DEVICE_TYPE", String.join(".", CONF_DEVICE_TYPE))
  .replaceAll("CONF_DEVICE_INFO", String.join(".", CONF_DEVICE_INFO))
  .replaceAll("CONF_COMMAND_REGEX", String.join(".", CONF_COMMAND_REGEX))
  .replaceAll("CONF_THREADS_MONITOR", String.join(".", CONF_THREADS_MONITOR))
  .replaceAll("CONF_THREADS_SCHEDULE", String.join(".", CONF_THREADS_SCHEDULE))

    ;

  }

  //= ==================================================================================================================
  //=
  //= ÂÆû‰æãÊéßÂà∂
  //=
  //= ==================================================================================================================

  private FurryBlack() {}

  //= ==================================================================================================================
  //
  //  Ê°ÜÊû∂Â∏∏Èáè
  //
  //= ==================================================================================================================

  private static final LockEnhance.Latch LATCH = new LockEnhance.Latch();

  //= ==================================================================================================================
  //
  //  Ê°ÜÊû∂ÂèòÈáè
  //
  //= ==================================================================================================================

  private static String NAMESPACE; // ÂëΩÂêçÁ©∫Èó¥

  private static volatile boolean EVENT_ENABLE;

  private static volatile boolean KERNEL_DEBUG;
  private static volatile boolean SHUTDOWN_HALT;
  private static volatile boolean SHUTDOWN_DROP;
  private static volatile boolean SHUTDOWN_KILL;

  private static KernelConfig kernelConfig;
  private static SystemConfig systemConfig;

  private static LoggerX logger;
  private static Terminal terminal;
  private static Dispatcher dispatcher;

  private static Bot bot;
  private static Schema schema;
  private static Nickname nickname;

  private static Path FOLDER_ROOT;
  private static Path FOLDER_CONFIG;
  private static Path FOLDER_PLUGIN;
  private static Path FOLDER_DEPEND;
  private static Path FOLDER_MODULE;
  private static Path FOLDER_LOGGER;

  private static String MESSAGE_INFO;
  private static String MESSAGE_EULA;
  private static String MESSAGE_HELP;
  private static String MESSAGE_LIST_USERS;
  private static String MESSAGE_LIST_GROUP;

  private static ThreadPoolExecutor MONITOR_PROCESS;
  private static ScheduledThreadPoolExecutor SCHEDULE_SERVICE;

  //= ==================================================================================================================
  //=
  //= ÂêØÂä®ÂÖ•Âè£
  //=
  //= ==================================================================================================================

  public static void main(String[] args) {

    //= ================================================================================================================
    //=
    //=
    //= ‰∫§‰∫íÊ®°Âºè
    //=
    //=
    //= ================================================================================================================

    boolean dryRun = false;

    List<String> arguments = List.of(args);

    // ÊòæÁ§∫ ‰ø°ÊÅØ
    if (arguments.contains("--info")) {
      System.out.println(CONTENT_INFO);
      System.out.println();
      dryRun = true;
    }

    // ÊòæÁ§∫ Â∏ÆÂä©
    if (arguments.contains("--help")) {
      System.out.println(CONTENT_HELP);
      System.out.println();
      dryRun = true;
    }

    // ÊòæÁ§∫ È¢úËâ≤
    if (arguments.contains("--color")) {
      System.out.println(CONTENT_COLOR);
      System.out.println();
      dryRun = true;
    }

    if (dryRun) return;

    //= ================================================================================================================
    //=
    //=
    //= Ê≠£ÂºèÊ®°Âºè
    //=
    //=
    //= ================================================================================================================

    System.out.println("[FurryBlack][BOOT]FurryBlackMirai - " + APP_VERSION + " " + TimeEnhance.datetime(BOOT_TIME));

    //= ================================================================================================================
    //= Ë∑≥ËøáËØ≠Ë®ÄËÆæÁΩÆ

    // -D user.country=zh
    // -D user.language=CN
    if (System.getenv("FURRYBLACK_LOCALE_SKIP") == null) {
      if (System.getenv("FURRYBLACK_MUTE") == null) {
        System.err.println("Env FURRYBLACK_LOCALE_SKIP not set, Setting JVM local to Locale.SIMPLIFIED_CHINESE");
      }
      Locale.setDefault(Locale.SIMPLIFIED_CHINESE);
    }

    //= ================================================================================================================
    //= Ë∑≥ËøáÊó∂Èó¥ËÆæÁΩÆ

    // -D user.timezone=Asia/Shanghai
    if (System.getenv("FURRYBLACK_TIMEZONE_SKIP") == null) {
      if (System.getenv("FURRYBLACK_MUTE") == null) {
        System.err.println("Env FURRYBLACK_TIMEZONE_SKIP not set, Setting JVM timezone to Asia/Shanghai");
      }
      TimeZone.setDefault(TimeZone.getTimeZone("Asia/Shanghai"));
    }

    //= ================================================================================================================
    //=
    //= ÂÜÖÊ†∏Á≥ªÁªü
    //=
    //= ================================================================================================================

    Argument argument = Argument.parse(args);

    //= ========================================================================
    //= ÂëΩÂêçÁ©∫Èó¥

    NAMESPACE = argument.getKernelParameter("namespace");

    if (NAMESPACE == null || NAMESPACE.isBlank()) {
      System.out.println("[FurryBlack][ARGS]ÈªòËÆ§ÂëΩÂêçÁ©∫Èó¥");
    } else {
      System.out.println("[FurryBlack][ARGS]ËÆæÁΩÆÂëΩÂêçÁ©∫Èó¥ " + NAMESPACE);
    }

    //= ========================================================================
    //= ÊâìÂç∞ÂèÇÊï∞

    System.out.println("[FurryBlack][ARGS] ÈÄâÈ°π -> " + argument.optionSize());

    for (String it : argument.cloneOptions()) {
      System.out.println("[FurryBlack][ARGS]    " + it);
    }

    System.out.println("[FurryBlack][ARGS] ÂèÇÊï∞ -> " + argument.parameterSize());

    for (Map.Entry<String, String> entry : argument.cloneParameters().entrySet()) {
      String k = entry.getKey();
      String v = entry.getValue();
      System.out.println("[FurryBlack][ARGS]    " + k + "=" + v);
    }

    //= ========================================================================
    //= ÂÜÖÊ†∏ÂèÇÊï∞

    kernelConfig = KernelConfig.getInstance(argument);

    if (kernelConfig.debug) {
      System.out.println("[FurryBlack][ARGS]Ë∞ÉËØïÂºÄÂÖ≥ - Ë∞ÉËØïÊ®°Âºè");
    } else {
      System.out.println("[FurryBlack][ARGS]Ë∞ÉËØïÂºÄÂÖ≥ - Áîü‰∫ßÊ®°Âºè");
    }

    if (kernelConfig.unsafe) {
      System.out.println("[FurryBlack][ARGS]ÂÆâÂÖ®Á≠ñÁï• - ÂÆΩÊùæÁ≠ñÁï•");
    } else {
      System.out.println("[FurryBlack][ARGS]ÂÆâÂÖ®Á≠ñÁï• - Ê†áÂáÜÁ≠ñÁï•");
    }

    if (kernelConfig.noLogin) {
      System.out.println("[FurryBlack][ARGS]ÁôªÂΩïÊ®°Âºè - Ë∑≥ËøáÁôªÂΩï");
    } else {
      System.out.println("[FurryBlack][ARGS]ÁôªÂΩïÊ®°Âºè - ÁúüÂÆûÁôªÂΩï");
    }

    if (kernelConfig.noConsole) {
      System.out.println("[FurryBlack][ARGS]ÁªàÁ´ØÊ®°Âºè - ÂÖ≥Èó≠ÁªàÁ´Ø");
    } else {
      if (kernelConfig.noJline) {
        System.out.println("[FurryBlack][ARGS]ÁªàÁ´ØÊ®°Âºè - Á≤æÁÆÄÁªàÁ´Ø");
      } else {
        System.out.println("[FurryBlack][ARGS]ÁªàÁ´ØÊ®°Âºè - ÂÆåÊï¥ÁªàÁ´Ø");
      }
    }

    if (kernelConfig.forceExit) {
      System.out.println("[FurryBlack][ARGS]ÂÖ≥Èó≠Á≠ñÁï• - Âº∫Âà∂ÈÄÄÂá∫");
    } else {
      System.out.println("[FurryBlack][ARGS]ÂÖ≥Èó≠Á≠ñÁï• - Ê≠£Â∏∏ÈÄÄÂá∫");
    }

    //= ========================================================================
    //= Êó•ÂøóÁ≠âÁ∫ß

    if (kernelConfig.level != null) {

      LoggerXLevel level = LoggerXLevel.of(kernelConfig.level);

      if (level == null) {
        System.out.println("[FurryBlack][ARGS]Êó•ÂøóÁ∫ßÂà´ - ËæìÂÖ•ÂÄºÊó†Êïà -> " + kernelConfig.level + ", ÂèØÁî®Êó•ÂøóÁ∫ßÂà´‰∏∫:");
        System.out.println("[FurryBlack][ARGS] - CLOSE");
        System.out.println("[FurryBlack][ARGS] - ERROR");
        System.out.println("[FurryBlack][ARGS] - WARN");
        System.out.println("[FurryBlack][ARGS] - INFO");
        System.out.println("[FurryBlack][ARGS] - DEBUG");
        System.out.println("[FurryBlack][ARGS] - TRACE");
        throw new CoreException("[FurryBlack][FATAL] Logger level invalid -> " + kernelConfig.level);
      } else {
        System.out.println("[FurryBlack][ARGS]Êó•ÂøóÁ∫ßÂà´ - " + kernelConfig.level);
      }

      LoggerXFactory.setLevel(level);

    }

    //= ========================================================================
    //= Êó•ÂøóÂÖ®Âêç

    if (kernelConfig.fullname) {
      LoggerXFactory.setEnableFullName(true);
    }

    System.out.println("[FurryBlack][ARGS]Êó•ÂøóÂÖ®Âêç - " + (kernelConfig.fullname ? "ÂºÄÂêØ" : "ÂÖ≥Èó≠"));

    //= ========================================================================
    //= Êó•ÂøóÂâçÁºÄ

    if (kernelConfig.prefix != null) {

      System.out.println("[FurryBlack][ARGS]Êó•ÂøóÂâçÁºÄ - Â∞ùËØïÂä†ËΩΩÂâçÁºÄÈÖçÁΩÆ -> " + kernelConfig.prefix);

      Path path = Paths.get(kernelConfig.prefix);
      List<String> lines = FileEnhance.readLine(path);

      if (lines.isEmpty()) {
        System.out.println("[FurryBlack][ARGS]Êó•ÂøóÂâçÁºÄ - ÂâçÁºÄÈÖçÁΩÆ‰∏∫Á©∫ ÂàáÊç¢Ëá≥ÈªòËÆ§Ê®°Âºè");
      } else {
        for (String line : lines) {
          String[] split = line.split("=");
          var k = split[0];
          var v = split[1];
          LoggerXLevel of = LoggerXLevel.of(v);
          LoggerXFactory.injectPrefix(k, of);
          System.out.println("[FurryBlack][ARGS]Êó•ÂøóÂâçÁºÄ - Âä†ËΩΩ " + v + " " + k);
        }
        LoggerXFactory.setEnablePrefix(true);
      }
    }

    //= ========================================================================
    //= Êó•ÂøóÂêéÁ´Ø

    if (kernelConfig.provider != null) {

      System.out.println("[FurryBlack][ARGS]Êó•ÂøóÂêéÁ´Ø - Â∞ùËØïÂä†ËΩΩÊó•ÂøóÂêéÁ´Ø -> " + kernelConfig.provider);

      Class<?> clazz;
      try {
        clazz = Class.forName(kernelConfig.provider);
      } catch (Exception exception) {
        throw new CoreException("[FurryBlack][ARGS]Êó•ÂøóÂêéÁ´Ø - Â∞ùËØïÂä†ËΩΩÊó•ÂøóÂêéÁ´ØÂ§±Ë¥•, Âä†ËΩΩÁ±ªÂ§±Ë¥• -> " + kernelConfig.provider, exception);
      }

      Class<? extends LoggerX> loggerClazz;
      if (LoggerX.class.isAssignableFrom(clazz)) {
        @SuppressWarnings("unchecked")
        Class<? extends LoggerX> tempForSuppress = (Class<? extends LoggerX>) clazz;
        loggerClazz = tempForSuppress;
      } else {
        throw new CoreException("[FurryBlack][ARGS]Êó•ÂøóÂêéÁ´Ø - Â∞ùËØïÂä†ËΩΩÊó•ÂøóÂêéÁ´ØÂ§±Ë¥•, ÊåáÂÆöÁöÑÁ±ªÊú™ÁªßÊâø LoggerX -> " + kernelConfig.provider);
      }

      if (!loggerClazz.isAnnotationPresent(LoggerXConfig.class)) {
        throw new CoreException("[FurryBlack][ARGS]Êó•ÂøóÂêéÁ´Ø - Â∞ùËØïÂä†ËΩΩÊó•ÂøóÂêéÁ´ØÂ§±Ë¥•, ÊåáÂÆöÁöÑÁ±ªÊú™Ê∑ªÂä† LoggerXConfig Ê≥®Ëß£ -> " + kernelConfig.provider);
      }

      LoggerXFactory.setDefault(loggerClazz);

    }

    System.out.println("[FurryBlack][ARGS]Êó•ÂøóÂêéÁ´Ø - " + LoggerXFactory.getDefault());

    System.out.println("[FurryBlack][INIT]ÂÜÖÊ†∏ÈÖçÁΩÆÂàùÂßãÂåñÂÆåÊàê");

    //= ================================================================================================================
    //= ÁªàÁ´ØÂ≠êÁ≥ªÁªü
    //= ================================================================================================================

    if (kernelConfig.noConsole) {
      terminal = NoConsoleTerminal.getInstance();
    } else {
      if (kernelConfig.noJline) {
        terminal = StdinTerminal.getInstance();
      } else {
        terminal = JlineTerminal.getInstance();
      }
    }

    FurryBlack.println("[FurryBlack][INIT]ÁªàÁ´ØÁ≥ªÁªüÂàùÂßãÂåñÂÆåÊàê");

    //= ================================================================================================================
    //= Êñá‰ª∂Â≠êÁ≥ªÁªü
    //= ================================================================================================================

    //= ========================================================================
    //= ÂàùÂßãÂåñÁõÆÂΩï

    FOLDER_ROOT = Paths.get(System.getProperty("user.dir"));

    FOLDER_CONFIG = FileEnhance.get(FOLDER_ROOT, "config");
    FOLDER_PLUGIN = FileEnhance.get(FOLDER_ROOT, "plugin");
    FOLDER_DEPEND = FileEnhance.get(FOLDER_ROOT, "depend");
    FOLDER_MODULE = FileEnhance.get(FOLDER_ROOT, "module");
    FOLDER_LOGGER = FileEnhance.get(FOLDER_ROOT, "logger");

    String ensureFolderConfig = FileEnhance.ensureFolderSafe(FOLDER_CONFIG);
    String ensureFolderPlugin = FileEnhance.ensureFolderSafe(FOLDER_PLUGIN);
    String ensureFolderDepend = FileEnhance.ensureFolderSafe(FOLDER_DEPEND);
    String ensureFolderModule = FileEnhance.ensureFolderSafe(FOLDER_MODULE);
    String ensureFolderLogger = FileEnhance.ensureFolderSafe(FOLDER_LOGGER);

    CoreException.check("ÂàùÂßãÂåñÈÖçÁΩÆÁõÆÂΩïÂ§±Ë¥• -> ", ensureFolderConfig);
    CoreException.check("ÂàùÂßãÂåñÊèí‰ª∂ÁõÆÂΩïÂ§±Ë¥• -> ", ensureFolderPlugin);
    CoreException.check("ÂàùÂßãÂåñ‰æùËµñÁõÆÂΩïÂ§±Ë¥• -> ", ensureFolderDepend);
    CoreException.check("ÂàùÂßãÂåñÊï∞ÊçÆÁõÆÂΩïÂ§±Ë¥• -> ", ensureFolderModule);
    CoreException.check("ÂàùÂßãÂåñÊó•ÂøóÁõÆÂΩïÂ§±Ë¥• -> ", ensureFolderLogger);

    FurryBlack.println("[FurryBlack][INIT]Â∫îÁî®Â∑•‰ΩúÁõÆÂΩï " + FOLDER_ROOT);
    FurryBlack.println("[FurryBlack][INIT]Êèí‰ª∂Êâ´ÊèèÁõÆÂΩï " + FOLDER_PLUGIN);
    FurryBlack.println("[FurryBlack][INIT]Ê®°Âùó‰æùËµñÁõÆÂΩï " + FOLDER_DEPEND);
    FurryBlack.println("[FurryBlack][INIT]Ê®°ÂùóÊï∞ÊçÆÁõÆÂΩï " + FOLDER_MODULE);
    FurryBlack.println("[FurryBlack][INIT]Ê†∏ÂøÉÊó•ÂøóÁõÆÂΩï " + FOLDER_LOGGER);

    FurryBlack.println("[FurryBlack][INIT]Êó•ÂøóÂêéÁ´Ø " + LoggerXFactory.getDefault());
    FurryBlack.println("[FurryBlack][INIT]Êó•ÂøóÁ∫ßÂà´ " + LoggerXFactory.getLevel().name());

    //= ========================================================================
    //= ÂàùÂßãÂåñÊó•Âøó

    if (LoggerXFactory.needLoggerFile()) {

      String name = FORMATTER.format(Instant.ofEpochMilli(BOOT_TIME)) + ".txt";
      Path loggerFile = FileEnhance.get(FOLDER_LOGGER, name);
      CoreException.check("Êó•ÂøóÊñá‰ª∂ÂàùÂßãÂåñÂ§±Ë¥• -> ", FileEnhance.ensureFileSafe(loggerFile));

      try {
        LoggerXFactory.initLoggerFile(loggerFile);
      } catch (NoSuchMethodException | IllegalAccessException exception) {
        throw new CoreException("Êó•ÂøóÂêéÁ´ØÂàùÂßãÂåñÂ§±Ë¥• Ê†áËÆ∞‰∏∫ÈúÄË¶ÅÊó•ÂøóÊñá‰ª∂ÁöÑÂêéÁ´ØÂøÖÈ°ªÂÆûÁé∞public void init(Path)ÊñπÊ≥ï -> " + loggerFile, exception);
      } catch (InvocationTargetException exception) {
        throw new CoreException("Êó•ÂøóÂêéÁ´ØÂàùÂßãÂåñÂ§±Ë¥• ÂêéÁ´ØÊâßË°åpublic void init(Path)ÊñπÊ≥ïÊó∂ÂèëÁîüÂºÇÂ∏∏ -> " + loggerFile, exception);
      }

      FurryBlack.println("[FurryBlack][INIT]Êó•ÂøóÊñá‰ª∂ " + name);
    }

    logger = LoggerXFactory.getLogger("System");

    FurryBlack.println("[FurryBlack][INIT]Êó•ÂøóÁ≥ªÁªüÂàùÂßãÂåñÂÆåÊàê");

    //= ========================================================================
    //= ÁªàÁ´ØÊé•ÁÆ°

    logger.hint("Êó•ÂøóÁ≥ªÁªüÊé•ÁÆ° " + terminal.getClass().getSimpleName() + " -> " + logger.getClass().getSimpleName());

    logger.info("Á≥ªÁªüÁä∂ÊÄÅ/Â∫îÁî®Â∑•‰ΩúÁõÆÂΩï " + FOLDER_ROOT);
    logger.info("Á≥ªÁªüÁä∂ÊÄÅ/Êèí‰ª∂Êâ´ÊèèÁõÆÂΩï " + FOLDER_PLUGIN);
    logger.info("Á≥ªÁªüÁä∂ÊÄÅ/Ê®°Âùó‰æùËµñÁõÆÂΩï " + FOLDER_DEPEND);
    logger.info("Á≥ªÁªüÁä∂ÊÄÅ/Ê®°ÂùóÊï∞ÊçÆÁõÆÂΩï " + FOLDER_MODULE);
    logger.info("Á≥ªÁªüÁä∂ÊÄÅ/Ê†∏ÂøÉÊó•ÂøóÁõÆÂΩï " + FOLDER_LOGGER);

    logger.info("ÂÜÖÊ†∏ÈÖçÁΩÆ/Êó•ÂøóÂêéÁ´Ø " + LoggerXFactory.getDefault());
    logger.info("ÂÜÖÊ†∏ÈÖçÁΩÆ/Êó•ÂøóÁ∫ßÂà´ " + LoggerXFactory.getLevel().name());

    if (kernelConfig.debug) {
      logger.info("ÂÜÖÊ†∏ÈÖçÁΩÆ/Ë∞ÉËØïÂºÄÂÖ≥ - Ë∞ÉËØïÊ®°Âºè");
    } else {
      logger.info("ÂÜÖÊ†∏ÈÖçÁΩÆ/Ë∞ÉËØïÂºÄÂÖ≥ - Áîü‰∫ßÊ®°Âºè");
    }

    if (kernelConfig.unsafe) {
      logger.info("ÂÜÖÊ†∏ÈÖçÁΩÆ/ÂÆâÂÖ®Á≠ñÁï• - ÂÆΩÊùæÁ≠ñÁï•");
    } else {
      logger.info("ÂÜÖÊ†∏ÈÖçÁΩÆ/ÂÆâÂÖ®Á≠ñÁï• - Ê†áÂáÜÁ≠ñÁï•");
    }

    if (kernelConfig.noLogin) {
      logger.info("ÂÜÖÊ†∏ÈÖçÁΩÆ/ÁôªÂΩïÊ®°Âºè - Ë∑≥ËøáÁôªÂΩï");
    } else {
      logger.info("ÂÜÖÊ†∏ÈÖçÁΩÆ/ÁôªÂΩïÊ®°Âºè - ÁúüÂÆûÁôªÂΩï");
    }

    if (kernelConfig.noConsole) {
      logger.info("ÂÜÖÊ†∏ÈÖçÁΩÆ/ÁªàÁ´ØÊ®°Âºè - ÂÖ≥Èó≠ÁªàÁ´Ø");
    } else {
      if (kernelConfig.noJline) {
        logger.info("ÂÜÖÊ†∏ÈÖçÁΩÆ/ÁªàÁ´ØÊ®°Âºè - Á≤æÁÆÄÁªàÁ´Ø");
      } else {
        logger.info("ÂÜÖÊ†∏ÈÖçÁΩÆ/ÁªàÁ´ØÊ®°Âºè - ÂÆåÊï¥ÁªàÁ´Ø");
      }
    }

    if (kernelConfig.forceExit) {
      logger.info("ÂÜÖÊ†∏ÈÖçÁΩÆ/ÂÖ≥Èó≠Á≠ñÁï• - Âº∫Âà∂ÈÄÄÂá∫");
    } else {
      logger.info("ÂÜÖÊ†∏ÈÖçÁΩÆ/ÂÖ≥Èó≠Á≠ñÁï• - Ê≠£Â∏∏ÈÄÄÂá∫");
    }

    //= ========================================================================
    //= ËµãÂÄº

    KERNEL_DEBUG = kernelConfig.debug;
    SHUTDOWN_HALT = kernelConfig.forceExit;

    //= ================================================================================================================
    //=
    //= Ê°ÜÊû∂Á≥ªÁªü
    //=
    //= ================================================================================================================

    logger.hint("ÂàùÂßãÂåñÁ≥ªÁªüÊ†∏ÂøÉ");

    //= ================================================================================================================
    //= Â∫îÁî®ÈÖçÁΩÆ
    //= ================================================================================================================

    //= ========================================================================
    //= Âä†ËΩΩÈÖçÁΩÆÊñá‰ª∂

    Path FILE_CONFIG = FileEnhance.get(FOLDER_CONFIG, "application.properties");

    logger.info("Ê£ÄÊü•ÈÖçÁΩÆÊñá‰ª∂");

    if (Files.exists(FILE_CONFIG)) {

      Properties properties = new Properties();

      logger.info("Âä†ËΩΩÈÖçÁΩÆÊñá‰ª∂");

      try (
        InputStream inputStream = Files.newInputStream(FILE_CONFIG);
        Reader reader = new InputStreamReader(inputStream)
      ) {
        properties.load(reader);
      } catch (IOException exception) {
        throw new CoreException("ËØªÂèñÈÖçÁΩÆÊñá‰ª∂Â§±Ë¥• -> " + FILE_CONFIG, exception);
      }

      logger.info("ÂêàÂπ∂ÈÖçÁΩÆÊñá‰ª∂");

      for (Map.Entry<Object, Object> entry : properties.entrySet()) {
        var k = entry.getKey();
        var v = entry.getValue();
        if (k == null || k.toString().isBlank()) {
          logger.warn("‰∏¢ÂºÉÊó†ÊïàÈÖçÁΩÆ " + k + "=" + v);
          continue;
        }
        if (v == null || k.toString().isBlank()) {
          logger.warn("‰∏¢ÂºÉÊó†ÊïàÈÖçÁΩÆ " + k + "=" + v);
          continue;
        }
        argument.append(k, v);
      }

    } else {
      logger.info("Ë∑≥ËøáÈÖçÁΩÆÊñá‰ª∂");
    }

    //= ========================================================================
    //= Ê£ÄÊü•ÈÖçÁΩÆÈ°πÁõÆ

    logger.info("Ê£ÄÊü•ÈÖçÁΩÆÈ°πÁõÆ");

    try {

      systemConfig = SystemConfig.getInstance(argument);

    } catch (FirstBootException exception) {

      logger.fatal("ÂøÖË¶ÅÈÖçÁΩÆÈ°πÁõÆÁº∫Â§±, ÂÜôÂÖ•ÈªòËÆ§ÈÖçÁΩÆÊñá‰ª∂ -> " + FILE_CONFIG);

      try {
        Files.writeString(FILE_CONFIG, DEFAULT_CONFIG);
      } catch (IOException ioException) {
        logger.fatal("ÂÜôÂÖ•ÈªòËÆ§ÈÖçÁΩÆÊñá‰ª∂Â§±Ë¥•", ioException);
        CoreException CoreException = new CoreException(ioException);
        CoreException.addSuppressed(exception);
        throw CoreException;

      }

      throw exception;

    }

    //= ================================================================================================================
    //= Ê®°ÊùøÊ∂àÊÅØÂ≠êÁ≥ªÁªü
    //= ================================================================================================================

    logger.hint("Âä†ËΩΩÂÜÖÁΩÆÊ∂àÊÅØ");

    {

      Path FILE_EULA = FileEnhance.get(FOLDER_CONFIG, "message_eula.txt");
      Path FILE_INFO = FileEnhance.get(FOLDER_CONFIG, "message_info.txt");
      Path FILE_HELP = FileEnhance.get(FOLDER_CONFIG, "message_help.txt");

      MESSAGE_EULA = FileEnhance.read(FILE_EULA).replace("\\$VERSION", APP_VERSION);
      MESSAGE_INFO = FileEnhance.read(FILE_INFO).replace("\\$VERSION", APP_VERSION);
      MESSAGE_HELP = FileEnhance.read(FILE_HELP).replace("\\$VERSION", APP_VERSION);

    }

    //= ================================================================================================================
    //= ÊòµÁß∞Â≠êÁ≥ªÁªü
    //= ================================================================================================================

    nickname = Nickname.getInstance();

    logger.hint("Âä†ËΩΩÂ∏∏Áî®ÊòµÁß∞");

    nickname.cleanNickname();
    nickname.appendNickname();

    //= ================================================================================================================
    //= Êú∫Âô®‰∫∫Â≠êÁ≥ªÁªü
    //= ================================================================================================================

    //= ========================================================================
    //= ÂçáÁ∫ßÂÆ¢Êà∑Á´ØÂçèËÆÆ

    if (systemConfig.upgradeProtocols != null) {

      logger.hint("ÂçáÁ∫ßÂçèËÆÆÁâàÊú¨");

      System.setProperty("xyz.cssxsh.mirai.tool.KFCFactory.config", "config/qsign.json");
      System.setProperty("xyz.cssxsh.mirai.tool.FixProtocolVersion.folder", "config/protocol");

      Class<?> clazz;
      try {
        clazz = Class.forName("xyz.cssxsh.mirai.tool.FixProtocolVersion");
      } catch (ClassNotFoundException exception) {
        throw new CoreException("[UPGRADE/PROTOCOL] Load class failure", exception);
      }

      Method methodLoad;
      try {
        methodLoad = clazz.getMethod("load", BotConfiguration.MiraiProtocol.class);
      } catch (NoSuchMethodException exception) {
        throw new CoreException("[UPGRADE/PROTOCOL] Invoke method failure", exception);
      }

      for (BotConfiguration.MiraiProtocol miraiProtocol : systemConfig.upgradeProtocols) {
        logger.info("ÂçáÁ∫ßÂçèËÆÆ -> " + miraiProtocol.name());
        try {
          methodLoad.invoke(null, miraiProtocol);
        } catch (IllegalAccessException | InvocationTargetException exception) {
          throw new CoreException("[UPGRADE/PROTOCOL] Invoke method failure", exception);
        }
      }

      Method methodInfo;
      try {
        methodInfo = clazz.getMethod("info");
      } catch (NoSuchMethodException exception) {
        throw new CoreException("[UPGRADE/PROTOCOL] Load method failure", exception);
      }

      logger.info("ÂΩìÂâçÂçèËÆÆÁâàÊú¨");

      Object invoke;
      try {
        invoke = methodInfo.invoke(null);
      } catch (IllegalAccessException | InvocationTargetException | ClassCastException exception) {
        throw new CoreException("[UPGRADE/PROTOCOL] Invoke method failure", exception);
      }

      try {
        if (invoke instanceof Map<?, ?> map) {
          @SuppressWarnings("unchecked")
          Map<BotConfiguration.MiraiProtocol, String> info = (Map<BotConfiguration.MiraiProtocol, String>) map;
          info.forEach((k, v) -> logger.info(v));
        }
      } catch (Exception exception) {
        throw new CoreException("[UPGRADE/PROTOCOL] Invoke method failure", exception);
      }
    }

    //= ========================================================================

    logger.hint("ÂàùÂßãÂåñÊú∫Âô®‰∫∫");

    //= ========================================================================
    //= Âä†ËΩΩÂÆ¢Êà∑Á´ØÈÖçÁΩÆ

    logger.info("Âä†ËΩΩÂÆ¢Êà∑Á´ØÈÖçÁΩÆ");

    BotConfiguration botConfiguration = new BotConfiguration();

    botConfiguration.setLoginCacheEnabled(true);
    botConfiguration.enableContactCache();
    botConfiguration.setCacheDir(FileEnhance.get(FOLDER_CONFIG, "cache").toFile());
    botConfiguration.setProtocol(systemConfig.deviceType.toMiraiProtocol());
    botConfiguration.loadDeviceInfoJson(systemConfig.deviceInfo);
    botConfiguration.setBotLoggerSupplier(i -> new MiraiLoggerX("MiraiBot"));
    botConfiguration.setNetworkLoggerSupplier(i -> new MiraiLoggerX("MiraiNet"));

    //= ========================================================================
    //= Âä†ËΩΩÂÆ¢Êà∑Á´ØËÆ§ËØÅ

    logger.info("Âä†ËΩΩÂÆ¢Êà∑Á´ØËÆ§ËØÅ");

    BotAuthorization authorization = switch (systemConfig.authMod) {
      case QRCODE -> BotAuthorization.byQRCode();
      case PASSWD -> BotAuthorization.byPassword(systemConfig.password);
    };

    //= ========================================================================
    //= ÂàõÂª∫Êú∫Âô®‰∫∫ÂÆû‰æã

    logger.info("ÂàõÂª∫Êú∫Âô®‰∫∫ÂÆû‰æã");

    bot = BotFactory.INSTANCE.newBot(systemConfig.username, authorization, botConfiguration);

    //= ========================================================================
    //= ËÆ¢ÈòÖÂÆ¢Êà∑Á´Ø‰∫ã‰ª∂

    logger.info("ËÆ¢ÈòÖÂÆ¢Êà∑Á´Ø‰∫ã‰ª∂");

    Listener<UserMessageEvent> userMessageEventListener = GlobalEventChannel.INSTANCE.subscribeAlways(UserMessageEvent.class, event -> {

      if (!EVENT_ENABLE) return;

      try {

        for (EventHandlerFilter eventHandlerFilter : schema.getFilterUsersChain()) {
          if (eventHandlerFilter.handleUsersMessageWrapper(event)) return;
        }

        MONITOR_PROCESS.submit(() -> {
          for (EventHandlerMonitor item : schema.getMonitorUsersChain()) {
            item.handleUsersMessageWrapper(event);
          }
        });

        String content = event.getMessage().contentToString();

        if (systemConfig.commandRegex.matcher(content).find()) {

          Command command = new Command(content.substring(1));
          String commandName = command.getCommandName();

          switch (commandName) {

            case "info" -> FurryBlack.sendMessage(event, MESSAGE_INFO);
            case "eula" -> FurryBlack.sendMessage(event, MESSAGE_EULA);
            case "list" -> FurryBlack.sendMessage(event, MESSAGE_LIST_USERS);

            case "help" -> {
              if (command.hasCommandBody()) {
                String segment = command.getParameterSegment(0);
                EventHandlerExecutor executor = schema.getExecutorUsersPool().get(segment);
                if (executor == null) {
                  FurryBlack.sendMessage(event, "Ê≤°ÊúâÊ≠§ÂëΩ‰ª§");
                } else {
                  FurryBlack.sendMessage(event, executor.getHelp());
                }
              } else {
                FurryBlack.sendMessage(event, MESSAGE_HELP);
              }
            }

            default -> {
              EventHandlerExecutor executor = schema.getExecutorUsersPool().get(commandName);
              if (executor == null) {
                FurryBlack.sendMessage(event, "Ê≤°ÊúâÊ≠§ÂëΩ‰ª§");
                return;
              }
              for (EventHandlerChecker checker : schema.getGlobalCheckerUsersPool()) {
                if (checker.handleUsersMessageWrapper(event, command)) return;
              }
              List<EventHandlerChecker> commandCheckerUsersPool = schema.getCommandCheckerUsersPool(commandName);
              if (commandCheckerUsersPool != null) {
                for (EventHandlerChecker checker : commandCheckerUsersPool) {
                  if (checker.handleUsersMessageWrapper(event, command)) return;
                }
              }
              executor.handleUsersMessageWrapper(event, command);
            }
          }
        }

      } catch (Exception exception) {
        logger.warn("Â§ÑÁêÜÁßÅËÅäÊ∂àÊÅØÂºÇÂ∏∏", exception);
      }
    });

    Listener<GroupMessageEvent> groupMessageEventListener = GlobalEventChannel.INSTANCE.subscribeAlways(GroupMessageEvent.class, event -> {

      if (!EVENT_ENABLE) return;

      try {

        for (EventHandlerFilter eventHandlerFilter : schema.getFilterGroupChain()) {
          if (eventHandlerFilter.handleGroupMessageWrapper(event)) return;
        }

        MONITOR_PROCESS.submit(() -> {
          for (EventHandlerMonitor item : schema.getMonitorGroupChain()) {
            item.handleGroupMessageWrapper(event);
          }
        });

        String content = event.getMessage().contentToString();

        if (systemConfig.commandRegex.matcher(content).find()) {

          Command command = new Command(content.substring(1));
          String commandName = command.getCommandName();

          switch (commandName) {

            case "help" -> {
              if (command.hasCommandBody()) {
                String segment = command.getParameterSegment(0);
                EventHandlerExecutor executor = schema.getExecutorGroupPool().get(segment);
                if (executor == null) {
                  FurryBlack.sendMessage(event, "Ê≤°ÊúâÊ≠§ÂëΩ‰ª§");
                } else {
                  try {
                    FurryBlack.sendMessage(event, executor.getHelp());
                  } catch (Exception exception) {
                    FurryBlack.sendMessage(event, "Â∏ÆÂä©‰ø°ÊÅØÂèëÈÄÅËá≥ÁßÅËÅäÂ§±Ë¥• ËØ∑ÂÖÅËÆ∏‰∏¥Êó∂‰ºöËØùÊùÉÈôê");
                  }
                }
              } else {
                try {
                  event.getSender().sendMessage(MESSAGE_HELP);
                } catch (Exception exception) {
                  FurryBlack.sendMessage(event, "Â∏ÆÂä©‰ø°ÊÅØÂèëÈÄÅËá≥ÁßÅËÅäÂ§±Ë¥• ËØ∑ÂÖÅËÆ∏‰∏¥Êó∂‰ºöËØùÊùÉÈôê");
                }
              }
            }

            case "list" -> {
              try {
                event.getSender().sendMessage(MESSAGE_LIST_GROUP);
              } catch (Exception exception) {
                FurryBlack.sendMessage(event, "ÂèØÁî®ÂëΩ‰ª§ÂèëÈÄÅËá≥ÁßÅËÅäÂ§±Ë¥• ËØ∑ÂÖÅËÆ∏‰∏¥Êó∂‰ºöËØùÊùÉÈôê");
              }
            }

            case "info" -> {
              try {
                event.getSender().sendMessage(MESSAGE_INFO);
              } catch (Exception exception) {
                FurryBlack.sendMessage(event, "ÂÖ≥‰∫éÂèëÈÄÅËá≥ÁßÅËÅäÂ§±Ë¥• ËØ∑ÂÖÅËÆ∏‰∏¥Êó∂‰ºöËØùÊùÉÈôê");
              }
            }

            case "eula" -> {
              try {
                event.getSender().sendMessage(MESSAGE_EULA);
              } catch (Exception exception) {
                FurryBlack.sendMessage(event, "EULAÂèëÈÄÅËá≥ÁßÅËÅäÂ§±Ë¥• ËØ∑ÂÖÅËÆ∏‰∏¥Êó∂‰ºöËØùÊùÉÈôê");
              }
            }

            default -> {
              EventHandlerExecutor executor = schema.getExecutorGroupPool().get(commandName);
              if (executor == null) {
                return;
              }
              for (EventHandlerChecker checker : schema.getGlobalCheckerGroupPool()) {
                if (checker.handleGroupMessageWrapper(event, command))
                  return;
              }
              List<EventHandlerChecker> commandCheckerGroupPool = schema.getCommandCheckerGroupPool(commandName);
              if (commandCheckerGroupPool != null) {
                for (EventHandlerChecker checker : commandCheckerGroupPool) {
                  if (checker.handleGroupMessageWrapper(event, command))
                    return;
                }
              }
              executor.handleGroupMessageWrapper(event, command);
            }
          }
        }

      } catch (Exception exception) {
        logger.warn("Â§ÑÁêÜÁæ§ËÅäÊ∂àÊÅØÂºÇÂ∏∏", exception);
      }
    });

    Listener<NewFriendRequestEvent> newFriendRequestEventListener = GlobalEventChannel.INSTANCE.subscribeAlways(NewFriendRequestEvent.class, event -> {
      logger.hint("BOTË¢´Ê∑ªÂä†Â•ΩÂèã " + event.getFromNick() + "(" + event.getFromId() + ")");
      event.accept();
    });

    Listener<BotInvitedJoinGroupRequestEvent> botInvitedJoinGroupRequestEventListener = GlobalEventChannel.INSTANCE.subscribeAlways(BotInvitedJoinGroupRequestEvent.class, event -> {
      logger.hint("BOTË¢´ÈÇÄËØ∑ÂÖ•Áæ§ " + event.getGroupName() + "(" + event.getGroupId() + ") ÈÇÄËØ∑‰∫∫ " + event.getInvitorNick() + "(" + event.getInvitorId() + ")");
      event.accept();
    });

    Listener<MemberJoinEvent> memberJoinEventListener = GlobalEventChannel.INSTANCE.subscribeAlways(MemberJoinEvent.class, event -> {
      String user = event.getUser().getNick() + "(" + event.getUser().getId() + ")";
      if (event instanceof MemberJoinEvent.Active) {
        logger.hint("Áî®Êà∑Áî≥ËØ∑Âä†Áæ§ " + user + " ‚Üí " + event.getGroup().getName() + "(" + event.getGroupId() + ")");
      } else if (event instanceof MemberJoinEvent.Invite) {
        logger.hint("Áî®Êà∑ÂèóÈÇÄËøõÁæ§ " + user + " ‚Üí " + event.getGroup().getName() + "(" + event.getGroupId() + ")");
      }
    });

    Listener<MemberLeaveEvent> memberLeaveEventListener = GlobalEventChannel.INSTANCE.subscribeAlways(MemberLeaveEvent.class, event -> {
      String user = event.getUser().getNick() + "(" + event.getUser().getId() + ")";
      if (event instanceof MemberLeaveEvent.Quit) {
        logger.hint("Áî®Êà∑‰∏ªÂä®ÈÄÄÁæ§ " + user + " ‚Üí " + event.getGroup().getName() + "(" + event.getGroupId() + ")");
      } else if (event instanceof MemberLeaveEvent.Kick) {
        logger.hint("Áî®Êà∑Ë¢´Ë∏¢Âá∫Áæ§ " + user + " ‚Üí " + event.getGroup().getName() + "(" + event.getGroupId() + ")");
      }
    });

    //= ================================================================================================================
    //= Êèí‰ª∂Â≠êÁ≥ªÁªü
    //= ================================================================================================================

    schema = new Schema(FOLDER_PLUGIN);

    //= ========================================================================
    // Êâ´ÊèèÊèí‰ª∂

    schema.scanPlugin();

    //= ========================================================================
    // Êâ´ÊèèÊ®°Âùó

    schema.scanModule();

    //= ========================================================================
    // Ê≥®ÂÜåÊ®°Âùó

    schema.loadModule();

    //= ========================================================================
    // ÂàõÂª∫Ê®°Âùó

    schema.makeModule();

    //= ========================================================================
    // ÊâßË°åÂàùÂßãÂåñÊñπÊ≥ï

    schema.initModule();

    //= ================================================================================================================
    //= Êú∫Âô®‰∫∫Â≠êÁ≥ªÁªü
    //= ================================================================================================================

    //= ========================================================================
    //= ÁôªÂΩïÊú∫Âô®‰∫∫

    if (kernelConfig.noLogin) {
      logger.warn("ÊåáÂÆö‰∫Ü--no-loginÂèÇÊï∞ Ë∑≥ËøáÁôªÂΩï");
    } else {
      logger.hint("ÁôªÂΩïÊú∫Âô®‰∫∫");
      bot.login();
    }

    //= ================================================================================================================
    //= Êèí‰ª∂Â≠êÁ≥ªÁªü
    //= ================================================================================================================

    //= ========================================================================
    //= ÂêØÂä®Á∫øÁ®ãÊ±†

    logger.seek("ÂêØÂä®Á∫øÁ®ãÊ±†");

    logger.info("ÂêØÂä®ÁõëÂê¨Âô®Á∫øÁ®ãÊ±†");

    MONITOR_PROCESS = new ThreadPoolExecutor(
      systemConfig.monitorThreads,
      systemConfig.monitorThreads,
      0L,
      TimeUnit.MILLISECONDS,
      new LinkedBlockingQueue<>()
    );

    logger.info("ÂêØÂä®ÂÆöÊó∂Âô®Á∫øÁ®ãÊ±†");

    SCHEDULE_SERVICE = new ScheduledThreadPoolExecutor(
      systemConfig.scheduleThreads,
      Executors.defaultThreadFactory(),
      (runnable, executor) -> {
        throw new CoreException("Ê∑ªÂä†ËÆ°Âàí‰ªªÂä°Âà∞Á∫øÁ®ãÊ±†Â§±Ë¥•  " + runnable.toString() + " -> " + executor.toString());
      }
    );

    //= ========================================================================
    //= ÂêØÂä®Ê®°Âùó

    schema.bootModule();

    //= ========================================================================
    //= Ê≥®ÂÜåÈí©Â≠ê

    Thread currentThread = Thread.currentThread();

    Runtime.getRuntime().addShutdownHook(new Thread(() -> {

      LATCH.signal();

      try {
        currentThread.join();
      } catch (InterruptedException exception) {
        FurryBlack.println("[FurryBlack][EXIT]FATAL -> Shutdown hook interrupted, Shutdown process not finished.");
        exception.printStackTrace();
      }

      FurryBlack.println("[FurryBlack][EXIT]FurryBlack normally closed, Bye.");

      if (SHUTDOWN_HALT) {
        FurryBlack.println("[FurryBlack][EXIT]FurryBlack normally close with halt, Execute halt now.");
        Runtime.getRuntime().halt(1);
      } else if (SHUTDOWN_DROP) {
        FurryBlack.println("[FurryBlack][EXIT]FurryBlack normally close with drop, Execute halt now.");
        Runtime.getRuntime().halt(1);
      }
    }));

    //= ================================================================================================================
    //= Êú∫Âô®‰∫∫Â≠êÁ≥ªÁªü
    //= ================================================================================================================

    //= ========================================================================
    //= ÂàóÂá∫ÊâÄÊúâÂ•ΩÂèãÂíåÁæ§ÁªÑ

    if (!kernelConfig.noLogin) {

      logger.seek("Êú∫Âô®‰∫∫Ë¥¶Âè∑ " + bot.getId());
      logger.seek("Êú∫Âô®‰∫∫ÊòµÁß∞ " + bot.getNick());
      logger.seek("Êú∫Âô®‰∫∫Â§¥ÂÉè " + bot.getAvatarUrl());

      logger.hint("ÊâÄÊúâÂ•ΩÂèã");
      bot.getFriends().forEach(item -> logger.info(FurryBlack.getFormattedNickName(item)));

      logger.hint("ÊâÄÊúâÁæ§ÁªÑ");
      bot.getGroups().forEach(item -> logger.info(FurryBlack.getGroupInfo(item)));

    }

    //= ================================================================================================================
    //= Êèí‰ª∂Â≠êÁ≥ªÁªü
    //= ================================================================================================================

    //= ========================================================================
    //= ÁîüÊàêÊ®°ÊùøÊ∂àÊÅØ

    logger.hint("ÁîüÊàêÊ®°ÊùøÊ∂àÊÅØ");

    logger.info("ÁªÑË£ÖÁî®Êà∑listÊ∂àÊÅØ");
    MESSAGE_LIST_USERS = schema.generateUsersExecutorList();
    logger.info("ÁªÑË£ÖÁæ§ÁªÑlistÊ∂àÊÅØ");
    MESSAGE_LIST_GROUP = schema.generateGroupExecutorList();

    //= ================================================================================================================
    //= ÊéßÂà∂Âè∞Â≠êÁ≥ªÁªü
    //= ================================================================================================================

    dispatcher = new Dispatcher();

    //= ========================================================================

    dispatcher.registerFunction()
      .command("info")
      .function(it -> FurryBlack.println(CONTENT_INFO));

    //= ========================================================================

    dispatcher.registerFunction()
      .command("help")
      .command("?")
      .function(it -> FurryBlack.println(CONTENT_HELP));

    //= ========================================================================

    dispatcher.registerFunction()
      .command("system", "status")
      .command("status")
      .command("gc")
      .function(it -> {

        long totalMemory = Runtime.getRuntime().totalMemory();
        long freeMemory = Runtime.getRuntime().freeMemory();
        long maxMemory = Runtime.getRuntime().maxMemory();
        long useMemory = totalMemory - freeMemory;

        String totalMemoryH = toHumanBytes(totalMemory);
        String freeMemoryH = toHumanBytes(freeMemory);
        String maxMemoryH = toHumanBytes(maxMemory);
        String useMemoryH = toHumanBytes(useMemory);

        FurryBlack.println(

          // @formatter:off

          "ÂëΩÂêçÁ©∫Èó¥: " + (NAMESPACE == null || NAMESPACE.isBlank() ? "Êó†" : NAMESPACE ) + LINE +
          "Ë∞ÉËØïÂºÄÂÖ≥: " + (kernelConfig.debug ? "Ë∞ÉËØïÊ®°Âºè" : "Áîü‰∫ßÊ®°Âºè") + LINE +
          "ÂÆâÂÖ®Á≠ñÁï•: " + (kernelConfig.unsafe ? "ÂÆΩÊùæÁ≠ñÁï•" : "Ê†áÂáÜÁ≠ñÁï•") + LINE +
          "ÁªàÁ´ØÊ®°Âºè: " + (kernelConfig.noJline ? "Á≤æÁÆÄÁªàÁ´Ø" : "ÂÆåÊï¥ÁªàÁ´Ø") + LINE +
          "ÁôªÂΩïÊ®°Âºè: " + (kernelConfig.noLogin ? "Ë∑≥ËøáÁôªÂΩï" : "ÁúüÂÆûÁôªÂΩï") + LINE +
          "ÂÖ≥Èó≠Á≠ñÁï•: " + (SHUTDOWN_HALT ? "Âº∫Âà∂ÈÄÄÂá∫" : "Ê≠£Â∏∏ÈÄÄÂá∫") + LINE +
          "Ê∂àÊÅØ‰∫ã‰ª∂: " + (EVENT_ENABLE ? "Ê≠£Â∏∏ÁõëÂê¨" : "ÂøΩÁï•Ê∂àÊÅØ") + LINE +
          "Ê†∏ÂøÉÊï∞Èáè: " + Runtime.getRuntime().availableProcessors() + LINE +
          "ÊúÄÂ§ßÂÜÖÂ≠ò: " + maxMemoryH + "/" + maxMemory + LINE +
          "Â∑≤Áî®ÂÜÖÂ≠ò: " + useMemoryH + "/" + useMemory + LINE +
          "Á©∫Èó≤ÂÜÖÂ≠ò: " + freeMemoryH + "/" + freeMemory + LINE +
          "ÂàÜÈÖçÂÜÖÂ≠ò: " + totalMemoryH + "/" + totalMemory + LINE +
          "ËøêË°åÊó∂Èó¥: " + TimeEnhance.duration(System.currentTimeMillis() - BOOT_TIME)

          // @formatter:on

        );

      });

    dispatcher.registerFunction()
      .command("system", "stacks")
      .function(it -> {

        Map<Thread, StackTraceElement[]> stackTraces = Thread.getAllStackTraces();

        ArrayList<Map.Entry<Thread, StackTraceElement[]>> entries = new ArrayList<>(stackTraces.entrySet());

        entries.sort((o1, o2) -> {
          if (o1 == o2) return 0;
          Thread o1Key = o1.getKey();
          Thread o2Key = o2.getKey();
          return (int) (o1Key.getId() - o2Key.getId());
        });

        for (Map.Entry<Thread, StackTraceElement[]> entry : entries) {
          var k = entry.getKey();
          var v = entry.getValue();
          StringBuilder builder = new StringBuilder();
          if (k.isDaemon()) {
            builder.append("Daemon-");
          } else {
            builder.append("Thread-");
          }
          builder.append(k.getId()).append(" ").append(k.getState());
          builder.append(" (").append(k.getName()).append(") ").append(k.getPriority());
          builder.append(" [").append(k.getThreadGroup().getName()).append("]").append(LINE);
          for (StackTraceElement element : v) {
            builder.append("    ").append(element.getClassName()).append(":").append(element.getMethodName()).append("(").append(element.getLineNumber()).append(")").append(LINE);
          }
          FurryBlack.println(builder);
        }
      });

    //= ========================================================================

    dispatcher.registerExclusive()
      .command("system", "debug")
      .function(it -> {
        if (it == null) {
          FurryBlack.println("DEBUGÊ®°Âºè -> " + (KERNEL_DEBUG ? "Â∑≤ÂºÄÂêØ" : "Â∑≤ÂÖ≥Èó≠"));
        } else {
          switch (it.getOrEmpty(0).toLowerCase()) {
            case "enable" -> {
              kernelConfig.debug = true;
              FurryBlack.println("DEBUGÊ®°Âºè: ÂêØÂä®");
            }
            case "disable" -> {
              kernelConfig.debug = false;
              FurryBlack.println("DEBUGÊ®°Âºè: ÂÖ≥Èó≠");
            }
            default -> FurryBlack.println("USAGE: system debug enable|disable");
          }
        }
      });

    //= ========================================================================

    dispatcher.registerFunction()
      .command("system", "power-off")
      .command("exit")
      .command("quit")
      .command("stop")
      .function(it -> {
        FurryBlack.println(YELLOW + "CONSOLE invoke -> shutdown" + RESET);
        Runtime.getRuntime().exit(0);
      });

    //= ========================================================================

    dispatcher.registerFunction()
      .command("system", "rapid-stop")
      .function(it -> {
        SHUTDOWN_DROP = true;
        FurryBlack.println(RED + "‚ö† !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ‚ö†" + RESET);
        FurryBlack.println(RED + "‚ö† WARNING WARNING WARNING WARNING WARNING ‚ö†" + RESET);
        FurryBlack.println(RED + "‚ö†                                         ‚ö†" + RESET);
        FurryBlack.println(RED + "‚ö†   This command will skip all waiting    ‚ö†" + RESET);
        FurryBlack.println(RED + "‚ö†     It is not good for your health      ‚ö†" + RESET);
        FurryBlack.println(RED + "‚ö†       Wish we can see you again         ‚ö†" + RESET);
        FurryBlack.println(RED + "‚ö†                                         ‚ö†" + RESET);
        FurryBlack.println(RED + "‚ö† WARNING WARNING WARNING WARNING WARNING ‚ö†" + RESET);
        FurryBlack.println(RED + "‚ö† !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ‚ö†" + RESET);
        Runtime.getRuntime().exit(0);
      });

    //= ========================================================================

    dispatcher.registerFunction()
      .command("kill")
      .function(command -> {
        FurryBlack.println(RED + "üíÄ !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! üíÄ" + RESET);
        FurryBlack.println(RED + "üíÄ FATAL FATAL FATAL FATAL FATAL FATAL üíÄ" + RESET);
        FurryBlack.println(RED + "üíÄ                                     üíÄ" + RESET);
        FurryBlack.println(RED + "üíÄ        Directly halt invoking       üíÄ" + RESET);
        FurryBlack.println(RED + "üíÄ       There is no turning back      üíÄ" + RESET);
        FurryBlack.println(RED + "üíÄ      JVM will be termination now    üíÄ" + RESET);
        FurryBlack.println(RED + "üíÄ                                     üíÄ" + RESET);
        FurryBlack.println(RED + "üíÄ FATAL FATAL FATAL FATAL FATAL FATAL üíÄ" + RESET);
        FurryBlack.println(RED + "üíÄ !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! üíÄ" + RESET);
        FurryBlack.println(RED + "[FurryBlack][FATAL] Invoke -> Runtime.getRuntime().halt(1)" + RESET);
        Runtime.getRuntime().halt(1);
      });

    //= ========================================================================

    dispatcher.registerFunction()
      .command("system", "force-exit")
      .function(command -> {
        if (SHUTDOWN_KILL) {
          FurryBlack.println(RED + "üíÄ !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! üíÄ" + RESET);
          FurryBlack.println(RED + "üíÄ FATAL FATAL FATAL FATAL FATAL FATAL üíÄ" + RESET);
          FurryBlack.println(RED + "üíÄ                                     üíÄ" + RESET);
          FurryBlack.println(RED + "üíÄ         Intention confirmed         üíÄ" + RESET);
          FurryBlack.println(RED + "üíÄ       There is no turning back      üíÄ" + RESET);
          FurryBlack.println(RED + "üíÄ      JVM will be termination now    üíÄ" + RESET);
          FurryBlack.println(RED + "üíÄ                                     üíÄ" + RESET);
          FurryBlack.println(RED + "üíÄ FATAL FATAL FATAL FATAL FATAL FATAL üíÄ" + RESET);
          FurryBlack.println(RED + "üíÄ !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! üíÄ" + RESET);
          FurryBlack.println(RED + "[FurryBlack][FATAL] Invoke -> Runtime.getRuntime().halt(1)" + RESET);
          Runtime.getRuntime().halt(1);
        } else {
          logger.fatal(RED + "‚ö† !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ‚ö†" + RESET);
          logger.fatal(RED + "‚ö† WARNING WARNING WARNING WARNING WARNING ‚ö†" + RESET);
          logger.fatal(RED + "‚ö†                                         ‚ö†" + RESET);
          logger.fatal(RED + "‚ö†   This command will kill JVM directly   ‚ö†" + RESET);
          logger.fatal(RED + "‚ö†   Input it again to confirm intention   ‚ö†" + RESET);
          logger.fatal(RED + "‚ö†                                         ‚ö†" + RESET);
          logger.fatal(RED + "‚ö† WARNING WARNING WARNING WARNING WARNING ‚ö†" + RESET);
          logger.fatal(RED + "‚ö† !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ‚ö†" + RESET);
          SHUTDOWN_KILL = true;
        }
      });

    //= ========================================================================

    dispatcher.registerFunction()
      .command("logger", "color")
      .command("color")
      .function(it -> FurryBlack.println(CONTENT_COLOR));

    //= ========================================================================

    dispatcher.registerExclusive()
      .command("logger", "level")
      .function(it -> {
        if (it == null) {
          FurryBlack.println("ÂΩìÂâçÊó•ÂøóÁ∫ßÂà´ -> " + LoggerXFactory.getLevel());
        } else {

          LoggerXLevel of = LoggerXLevel.of(it.getOrEmpty(0));

          if (of == null) {
            FurryBlack.println("Êó•ÂøóÁ∫ßÂà´‰∏çÂ≠òÂú® -> " + it.getOrEmpty(0));
            FurryBlack.println(

              // @formatter:off

              "ÂèØÁî®Êó•ÂøóÁ∫ßÂà´‰∏∫: " + LINE +
              "TRACE = TRACE "  + LINE +
              "DEBUG = DEBUG "  + LINE +
              "INFO  = HINT + SEEK + INFO"  + LINE +
              "WARN  = WARN"   + LINE +
              "ERROR = ERROR + FATAL"  + LINE +
              "CLOSE = N/A"

              // @formatter:on

            );
          } else {
            FurryBlack.println("Êó•ÂøóÁ∫ßÂà´‰øÆÊîπ‰∏∫ -> " + LoggerXFactory.getLevel());
          }
        }
      });

    //= ========================================================================

    dispatcher.registerExclusive()
      .command("logger", "verbose", "name")
      .function(it -> {
        if (it == null) {
          FurryBlack.println("ÂΩìÂâçËØ¶ÁªÜÂêçÁß∞ -> " + LoggerXFactory.isEnableFullName());
        } else {
          if (it.getBooleanOrFalse(0)) {
            LoggerXFactory.setEnableFullName(true);
            FurryBlack.println("ËÆæÁΩÆËØ¶ÁªÜÂêçÁß∞‰∏∫ -> ÂºÄÂêØ");
          } else {
            LoggerXFactory.setEnableFullName(false);
            FurryBlack.println("ËÆæÁΩÆËØ¶ÁªÜÂêçÁß∞‰∏∫ -> ÂÖ≥Èó≠");
          }
        }
      });

    //= ========================================================================

    dispatcher.registerFunction()
      .command("schema")
      .function(it -> FurryBlack.println(schema.verboseStatus()));

    //= ========================================================================

    dispatcher.registerExclusive()
      .command("schema", "event")
      .function(it -> {
        if (it == null) {
          FurryBlack.println("SCHEMAÊ®°Âºè, ÊòØÂê¶ÂìçÂ∫îÊ∂àÊÅØ‰∫ã‰ª∂ -> " + (KERNEL_DEBUG ? "Â∑≤ÂºÄÂêØ" : "Â∑≤ÂÖ≥Èó≠"));
        } else {
          switch (it.getOrEmpty(0).toLowerCase()) {
            case "enable" -> {
              kernelConfig.debug = true;
              FurryBlack.println("SCHEMAÊ®°Âºè: ÂêØÂä®");
            }
            case "disable" -> {
              kernelConfig.debug = false;
              FurryBlack.println("SCHEMAÊ®°Âºè: ÂÖ≥Èó≠");
            }
            default -> FurryBlack.println("USAGE: system debug enable|disable");
          }
        }
      });

    //= ========================================================================

    dispatcher.registerExclusive()
      .command("schema", "plugin")
      .function(it -> {

        StringEnhance.LineBuilder builder = new StringEnhance.LineBuilder();

        for (Map.Entry<String, Schema.Plugin> pluginEntry : schema.getAllPlugin()) {

          var pluginName = pluginEntry.getKey();
          var pluginItem = pluginEntry.getValue();

          builder.append(BRIGHT_CYAN + pluginName + " " + pluginItem.getModules().size() + RESET);

          Map<Runner, Class<? extends EventHandlerRunner>> runnerClassMap = pluginItem.getRunnerClassMap();
          builder.append(GREEN + ">> ÂÆöÊó∂Âô® " + runnerClassMap.size() + RESET);
          for (Map.Entry<Runner, Class<? extends EventHandlerRunner>> classEntry : runnerClassMap.entrySet()) {
            var moduleName = classEntry.getKey();
            var moduleItem = classEntry.getValue();
            builder.append(moduleName.value() + '[' + moduleName.priority() + "] -> " + moduleItem.getName());
          }

          Map<Filter, Class<? extends EventHandlerFilter>> filterClassMap = pluginItem.getFilterClassMap();
          builder.append(GREEN + ">> ËøáÊª§Âô® " + filterClassMap.size() + RESET);
          for (Map.Entry<Filter, Class<? extends EventHandlerFilter>> classEntry : filterClassMap.entrySet()) {
            var moduleName = classEntry.getKey();
            var moduleItem = classEntry.getValue();
            builder.append(moduleName.value() + '[' + moduleName.priority() + "] -> " + moduleItem.getName());
          }

          Map<Monitor, Class<? extends EventHandlerMonitor>> monitorClassMap = pluginItem.getMonitorClassMap();
          builder.append(GREEN + ">> ÁõëÂê¨Âô® " + monitorClassMap.size() + RESET);
          for (Map.Entry<Monitor, Class<? extends EventHandlerMonitor>> classEntry : monitorClassMap.entrySet()) {
            var moduleName = classEntry.getKey();
            var moduleItem = classEntry.getValue();
            builder.append(moduleName.value() + '[' + moduleName.priority() + "] -> " + moduleItem.getName());
          }

          Map<Checker, Class<? extends EventHandlerChecker>> checkerClassMap = pluginItem.getCheckerClassMap();
          builder.append(GREEN + ">> Ê£ÄÊü•Âô® " + checkerClassMap.size() + RESET);
          for (Map.Entry<Checker, Class<? extends EventHandlerChecker>> classEntry : checkerClassMap.entrySet()) {
            var moduleName = classEntry.getKey();
            var moduleItem = classEntry.getValue();
            builder.append(moduleName.value() + '[' + moduleName.priority() + "](" + moduleName.command() + ") -> " + moduleItem.getName());
          }

          Map<Executor, Class<? extends EventHandlerExecutor>> executorClassMap = pluginItem.getExecutorClassMap();
          builder.append(GREEN + ">> ÊâßË°åÂô® " + executorClassMap.size() + RESET);
          for (Map.Entry<Executor, Class<? extends EventHandlerExecutor>> classEntry : executorClassMap.entrySet()) {
            var moduleName = classEntry.getKey();
            var moduleItem = classEntry.getValue();
            builder.append(moduleName.value() + '(' + moduleName.command() + ") -> " + moduleItem.getName());
          }
        }

        FurryBlack.println(builder);

      });

    //= ========================================================================

    dispatcher.registerExclusive()
      .command("schema", "module")
      .function(it -> {

        if (it == null) {

          StringEnhance.LineBuilder builder = new StringEnhance.LineBuilder();

          Map<Runner, Boolean> listRunner = schema.listRunner();
          builder.append(BRIGHT_CYAN + ">> ÂÆöÊó∂Âô® " + listRunner.size() + RESET);
          for (Map.Entry<Runner, Boolean> entry : listRunner.entrySet()) {
            builder.append((entry.getValue() ? "ÂºÄ " : "ÂÖ≥ ") + entry.getKey().value());
          }

          Map<Filter, Boolean> listFilter = schema.listFilter();
          builder.append(BRIGHT_CYAN + ">> ËøáÊª§Âô® " + listFilter.size() + RESET);
          for (Map.Entry<Filter, Boolean> entry : listFilter.entrySet()) {
            builder.append((entry.getValue() ? "ÂºÄ " : "ÂÖ≥ ") + entry.getKey().value() + "{" + (entry.getKey().users() ? "U" : "") + (entry.getKey().group() ? "G" : "") + "}");
          }

          Map<Monitor, Boolean> listMonitor = schema.listMonitor();
          builder.append(BRIGHT_CYAN + ">> ÁõëÂê¨Âô® " + listMonitor.size() + RESET);
          for (Map.Entry<Monitor, Boolean> entry : listMonitor.entrySet()) {
            builder.append((entry.getValue() ? "ÂºÄ " : "ÂÖ≥ ") + entry.getKey().value() + "{" + (entry.getKey().users() ? "U" : "") + (entry.getKey().group() ? "G" : "") + "}");
          }

          Map<Checker, Boolean> listChecker = schema.listChecker();
          builder.append(BRIGHT_CYAN + ">> Ê£ÄÊü•Âô® " + listChecker.size() + RESET);
          for (Map.Entry<Checker, Boolean> entry : listChecker.entrySet()) {
            builder.append((entry.getValue() ? "ÂºÄ " : "ÂÖ≥ ") + entry.getKey().value() + "[" + entry.getKey().command() + "]" + "{" + (entry.getKey().users() ? "U" : "") + (entry.getKey().group() ? "G" : "") + "}");
          }

          Map<Executor, Boolean> listExecutor = schema.listExecutor();
          builder.append(BRIGHT_CYAN + ">> ÊâßË°åÂô® " + listExecutor.size() + RESET);
          for (Map.Entry<Executor, Boolean> entry : listExecutor.entrySet()) {
            builder.append((entry.getValue() ? "ÂºÄ " : "ÂÖ≥ ") + entry.getKey().value() + "[" + entry.getKey().command() + "]{" + (entry.getKey().users() ? "U" : "") + (entry.getKey().group() ? "G" : "") + "}");
          }

          List<Checker> globalUsersChecker = schema.listGlobalUsersChecker();
          builder.append(BRIGHT_CYAN + ">> ÂÖ®Â±ÄÁßÅËÅäÊ£ÄÊü•Âô® " + globalUsersChecker.size() + RESET);
          for (Checker annotation : globalUsersChecker) {
            builder.append(annotation.value());
          }

          List<Checker> globalGroupChecker = schema.listGlobalGroupChecker();
          builder.append(BRIGHT_CYAN + ">> ÂÖ®Â±ÄÁæ§ËÅäÊ£ÄÊü•Âô® " + globalGroupChecker.size() + RESET);
          for (Checker annotation : globalGroupChecker) {
            builder.append("  " + annotation.value());
          }

          Map<String, List<Checker>> listCommandUsersChecker = schema.listCommandsUsersChecker();
          builder.append(BRIGHT_CYAN + ">> ÊúâÈôêÁßÅËÅäÊ£ÄÊü•Âô® " + listCommandUsersChecker.size() + RESET);
          for (Map.Entry<String, List<Checker>> entry : listCommandUsersChecker.entrySet()) {
            builder.append(entry.getKey() + " " + entry.getValue().size());
            for (Checker item : entry.getValue()) {
              builder.append("  " + item.value());
            }
          }

          Map<String, List<Checker>> listCommandGroupChecker = schema.listCommandsGroupChecker();
          builder.append(BRIGHT_CYAN + ">> ÊúâÈôêÁæ§ËÅäÊ£ÄÊü•Âô® " + listCommandGroupChecker.size() + RESET);
          for (Map.Entry<String, List<Checker>> entry : listCommandGroupChecker.entrySet()) {
            builder.append(entry.getKey() + " " + entry.getValue().size());
            for (Checker item : entry.getValue()) {
              builder.append("  " + item.value());
            }
          }

          builder.append(BRIGHT_CYAN + ">> ÁßÅËÅäÂëΩ‰ª§ÂàóË°®" + RESET);
          builder.append(MESSAGE_LIST_USERS);
          builder.append(BRIGHT_CYAN + ">> Áæ§ËÅäÂëΩ‰ª§ÂàóË°®" + RESET);
          builder.append(MESSAGE_LIST_GROUP);

          FurryBlack.println(builder);

        } else {

          String type = it.getOrNull(0);
          String name = it.getOrNull(1);

          if (type == null || name == null) {
            FurryBlack.println("USAGE: schema module init|boot|shut|reboot|unload <name>");
            return;
          }

          switch (type) {
            case "init" -> schema.initModule(name);
            case "boot" -> schema.bootModule(name);
            case "shut" -> schema.shutModule(name);
            case "reboot" -> schema.rebootModule(name);
            case "unload" -> schema.unloadModule(name);
            default -> FurryBlack.println("USAGE: schema module init|boot|shut|reboot|unload <name>");
          }
        }
      });

    //= ========================================================================

    dispatcher.registerFunction()
      .command("nickname")
      .function(it -> FurryBlack.println("USAGE: nickname list|load|clean|reload|export"));

    //= ========================================================================

    dispatcher.registerExclusive()
      .command("nickname", "list")
      .function(it -> {
        FurryBlack.println(BRIGHT_CYAN + "ÂÖ®Â±ÄÊòµÁß∞ " + nickname.getNicknameGlobal().size() + RESET);
        for (Map.Entry<Long, String> entry : nickname.getNicknameGlobal().entrySet()) {
          FurryBlack.println(entry.getKey() + ":" + entry.getValue());
        }
        FurryBlack.println(BRIGHT_CYAN + "Áæ§ÂÜÖÊòµÁß∞ " + nickname.getNicknameGroups().size() + RESET);
        for (Map.Entry<Long, Map<Long, String>> groupsEntry : nickname.getNicknameGroups().entrySet()) {
          FurryBlack.println("> " + groupsEntry.getKey());
          for (Map.Entry<Long, String> nicknameEntry : groupsEntry.getValue().entrySet()) {
            FurryBlack.println(nicknameEntry.getKey() + ":" + nicknameEntry.getValue());
          }
        }
      });

    //= ========================================================================

    dispatcher.registerExclusive()
      .command("nickname", "clean")
      .function(it -> {
        nickname.cleanNickname();
        FurryBlack.println("ÊòµÁß∞Â∑≤Ê∏ÖÁ©∫");
      });

    //= ========================================================================

    dispatcher.registerExclusive()
      .command("nickname", "append")
      .function(it -> {
        nickname.appendNickname();
        FurryBlack.println("ÊòµÁß∞Â∑≤Áª≠Âä†");
      });

    //= ========================================================================

    dispatcher.registerExclusive()
      .command("nickname", "reload")
      .function(it -> {
        nickname.cleanNickname();
        nickname.appendNickname();
        FurryBlack.println("ÊòµÁß∞Â∑≤ÈáçËΩΩ");
      });

    //= ========================================================================

    dispatcher.registerExclusive()
      .command("nickname", "export")
      .function(it -> {
        Path path = FileEnhance.get(FOLDER_CONFIG, "export-" + FORMATTER.format(Instant.now()) + ".txt");
        StringEnhance.LineBuilder builder = new StringEnhance.LineBuilder();
        ContactList<Friend> friends = getFriends();
        builder.append("# Â•ΩÂèã ", friends.size());
        for (Friend friend : friends) {
          builder.append("*.", friend.getId(), ":", friend.getNick());
        }
        ContactList<Group> groups = getGroups();
        builder.append("# Áæ§ÁªÑ ", groups.size());
        for (Group group : groups) {
          long groupId = group.getId();
          builder.append("# ", group.getName(), " ", group.getOwner().getId());
          for (NormalMember member : group.getMembers()) {
            String nameCard = member.getNameCard();
            if (nameCard.isEmpty()) {
              builder.append(groupId, ".", member.getId(), ":", member.getNick());
            } else {
              builder.append(groupId, ".", member.getId(), ":", member.getNick(), "[", nameCard, "]");
            }
          }
        }
        FileEnhance.write(path, builder.toString());
        FurryBlack.println("ÊòµÁß∞Â∑≤ÂØºÂá∫ -> " + path);
      });

    //= ========================================================================

    terminal.updateCompleter();

    //= ========================================================================

    Thread consoleThread = new Thread(() -> {
      while (true) {
        String readLine = terminal.readLine();
        if (readLine == null || readLine.isBlank()) {
          continue;
        }
        readLine = readLine.trim();
        try {
          boolean exist = dispatcher.execute(readLine);
          if (!exist) {
            logger.error("ÂëΩ‰ª§‰∏çÂ≠òÂú® -> " + readLine);
          }
        } catch (Exception exception) {
          logger.error("ÊâßË°åÂëΩ‰ª§ÂèëÁîüÈîôËØØ -> " + readLine, exception);
        }
      }
    });
    consoleThread.setName("furryblack-terminal");
    consoleThread.setDaemon(true);
    consoleThread.start();

    //= ================================================================================================================
    //= ÂêØÂä®ÂÆåÊàê
    //= ================================================================================================================

    //= ========================================================================
    //= ÂÆâÂÖ®Ê®°Âºè

    kernelConfig.unsafe = false;

    //= ========================================================================
    //= ÂêØÂä®ËÆ¢ÈòÖ

    EVENT_ENABLE = true;

    //= ========================================================================
    //= ÂêØÂä®ÂÆåÊàê

    logger.hint("Á≥ªÁªüÂêØÂä®ÂÆåÊàê ËÄóÊó∂" + TimeEnhance.duration(System.currentTimeMillis() - BOOT_TIME));

    //= ========================================================================
    //= Ê≠£Â∏∏Â∑•‰Ωú

    LATCH.await();

    //= ================================================================================================================
    //= ================================================================================================================
    //= ================================================================================================================
    //= ================================================================================================================
    //= ================================================================================================================
    //= ================================================================================================================
    //= ================================================================================================================
    //= ================================================================================================================

    //= ========================================================================
    //= ÂÖ≥Èó≠‰∫ã‰ª∂ÂìçÂ∫î

    EVENT_ENABLE = false;

    //= ================================================================================================================
    //= Êú∫Âô®‰∫∫Â≠êÁ≥ªÁªü
    //= ================================================================================================================

    //= ========================================================================
    //= ÂèñÊ∂àÊ∂àÊÅØËÆ¢ÈòÖ

    logger.hint("ÁªìÊùüÁõëÂê¨ÈÄöÈÅì");

    logger.info("ÁªìÊùüÁßÅËÅäÁõëÂê¨ÈÄöÈÅì");
    userMessageEventListener.complete();

    logger.info("ÁªìÊùüÁæ§ËÅäÁõëÂê¨ÈÄöÈÅì");
    groupMessageEventListener.complete();

    logger.info("ÁªìÊùüÊàêÂëòËøõÁæ§ÁõëÂê¨ÈÄöÈÅì");
    memberJoinEventListener.complete();

    logger.info("ÁªìÊùüÊàêÂëòÁ¶ªÁæ§ÁõëÂê¨ÈÄöÈÅì");
    memberLeaveEventListener.complete();

    logger.info("ÁªìÊùüÂ•ΩÂèãÊ∑ªÂä†ÁõëÂê¨ÈÄöÈÅì");
    newFriendRequestEventListener.complete();

    logger.info("ÁªìÊùüÈÇÄËØ∑Âä†Áæ§ÁõëÂê¨ÈÄöÈÅì");
    botInvitedJoinGroupRequestEventListener.complete();

    //= ================================================================================================================
    //= Êèí‰ª∂Â≠êÁ≥ªÁªü
    //= ================================================================================================================

    //= ========================================================================
    //= ÂÖ≥Èó≠Ê®°Âùó

    try {
      schema.shutModule();
    } catch (Exception exception) {
      logger.error("ÂÖ≥Èó≠Êèí‰ª∂Ê®°ÂûãÂèëÁîüÂºÇÂ∏∏", exception);
    }

    //= ========================================================================
    //= ÂÖ≥Èó≠Á∫øÁ®ãÊ±†

    logger.hint("ÂÖ≥Èó≠Á∫øÁ®ãÊ±†");

    CompletableFuture<Void> monitorShutdown = CompletableFuture.runAsync(() -> {
      if (SHUTDOWN_DROP) {
        logger.warn("‰∏¢ÂºÉÁõëÂê¨‰ªªÂä°Á∫øÁ®ãÊ±†");
        MONITOR_PROCESS.shutdownNow();
      } else {
        logger.info("ÂÖ≥Èó≠ÁõëÂê¨‰ªªÂä°Á∫øÁ®ãÊ±†");
        MONITOR_PROCESS.shutdown();
        try {
          boolean termination = MONITOR_PROCESS.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
          if (!termination)
            logger.warn("ÁõëÂê¨‰ªªÂä°Á∫øÁ®ãÊ±†ÂÖ≥Èó≠Ë∂ÖÊó∂");
        } catch (InterruptedException exception) {
          logger.error("Á≠âÂæÖÂÖ≥Èó≠ÁõëÂê¨‰ªªÂä°Á∫øÁ®ãÊ±†Ë¢´‰∏≠Êñ≠", exception);
        }
        logger.info("ÁõëÂê¨‰ªªÂä°Á∫øÁ®ãÊ±†ÂÖ≥Èó≠");
      }
    });

    CompletableFuture<Void> scheduleShutdown = CompletableFuture.runAsync(() -> {
      if (SHUTDOWN_DROP) {
        logger.warn("‰∏¢ÂºÉÂÆöÊó∂‰ªªÂä°Á∫øÁ®ãÊ±†");
        SCHEDULE_SERVICE.shutdownNow();
      } else {
        logger.info("ÂÖ≥Èó≠ÂÆöÊó∂‰ªªÂä°Á∫øÁ®ãÊ±†");
        SCHEDULE_SERVICE.shutdown();
        try {
          boolean termination = SCHEDULE_SERVICE.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
          if (!termination)
            logger.warn("ÂÆöÊó∂‰ªªÂä°Á∫øÁ®ãÊ±†ÂÖ≥Èó≠Ë∂ÖÊó∂");
        } catch (InterruptedException exception) {
          logger.error("Á≠âÂæÖÂÖ≥Èó≠ÂÆöÊó∂‰ªªÂä°Á∫øÁ®ãÊ±†Ë¢´‰∏≠Êñ≠", exception);
        }
        logger.info("ÂÆöÊó∂‰ªªÂä°Á∫øÁ®ãÊ±†ÂÖ≥Èó≠");
      }
    });

    try {
      CompletableFuture.allOf(monitorShutdown, scheduleShutdown).get();
    } catch (InterruptedException | ExecutionException exception) {
      logger.error("Á≠âÂæÖÂÖ≥Èó≠Á∫øÁ®ãÊ±†Ë¢´‰∏≠Êñ≠", exception);
    }

    //= ================================================================================================================
    //= Êú∫Âô®‰∫∫Â≠êÁ≥ªÁªü
    //= ================================================================================================================

    logger.hint("ÂÖ≥Èó≠Êú∫Âô®‰∫∫");

    //= ========================================================================
    //= ÂÖ≥Èó≠Êú∫Âô®‰∫∫

    logger.info("ÈÄöÁü•Êú∫Âô®‰∫∫ÂÖ≥Èó≠");

    if (kernelConfig.noLogin) {
      logger.warn("Ë∞ÉËØïÊ®°Âºè ‰∏çÈúÄË¶ÅÂÖ≥Èó≠Êú∫Âô®‰∫∫");
    } else {
      if (SHUTDOWN_DROP) {
        bot.close(null);
      } else {
        logger.info("Êú∫Âô®‰∫∫ÂÖ≥Èó≠‰∏≠");
        bot.closeAndJoin(null);
      }
    }

    logger.info("Êú∫Âô®‰∫∫Â∑≤ÂÖ≥Èó≠");

  }

  //= ==================================================================================================================
  //=
  //= MiraiLogger
  //=
  //= ==================================================================================================================

  private static class MiraiLoggerX implements MiraiLogger {

    private final LoggerX logger;

    protected MiraiLoggerX(String name) {
      this.logger = LoggerXFactory.getLogger(name);
    }

    @Override public String getIdentity() {
      return logger.getName();
    }

    @Override public boolean isEnabled() {
      return true;
    }

    @Override public boolean isErrorEnabled() {
      return logger.isErrorEnabled();
    }

    @Override public boolean isWarningEnabled() {
      return logger.isWarnEnabled();
    }

    @Override public boolean isInfoEnabled() {
      return logger.isInfoEnabled();
    }

    @Override public boolean isDebugEnabled() {
      return logger.isDebugEnabled();
    }

    @Override public boolean isVerboseEnabled() {
      return logger.isTraceEnabled();
    }

    @Override public void error(String message) {
      if (message == null) return;
      logger.error(message);
    }

    @Override public void error(Throwable throwable) {
      if (throwable == null) return;
      logger.error(StringEnhance.extractStackTrace(throwable));
    }

    @Override public void error(String message, Throwable throwable) {
      if (throwable == null) error(message);
      if (message == null) error(throwable);
      logger.error(message, throwable);
    }

    @Override public void warning(String message) {
      if (message == null) return;
      logger.warn(message);
    }

    @Override public void warning(Throwable throwable) {
      if (throwable == null) return;
      logger.warn(StringEnhance.extractStackTrace(throwable));
    }

    @Override public void warning(String message, Throwable throwable) {
      if (throwable == null) warning(message);
      if (message == null) warning(throwable);
      logger.warn(message, throwable);
    }

    @Override public void info(String message) {
      if (message == null) return;
      logger.info(message);
    }

    @Override public void info(Throwable throwable) {
      if (throwable == null) return;
      logger.info(StringEnhance.extractStackTrace(throwable));
    }

    @Override public void info(String message, Throwable throwable) {
      if (throwable == null) info(message);
      if (message == null) info(throwable);
      logger.info(message, throwable);
    }

    @Override public void debug(String message) {
      if (message == null) return;
      logger.error(message);

    }

    @Override public void debug(Throwable throwable) {
      if (throwable == null) return;
      logger.debug(StringEnhance.extractStackTrace(throwable));
    }

    @Override public void debug(String message, Throwable throwable) {
      if (throwable == null) debug(message);
      if (message == null) debug(throwable);
      logger.debug(message, throwable);
    }

    @Override public void verbose(String message) {
      if (message == null) return;
      logger.trace(message);
    }

    @Override public void verbose(Throwable throwable) {
      if (throwable == null) return;
      logger.trace(StringEnhance.extractStackTrace(throwable));
    }

    @Override public void verbose(String message, Throwable throwable) {
      if (throwable == null) verbose(message);
      if (message == null) verbose(throwable);
      logger.trace(message, throwable);
    }

  }

  //= ==================================================================================================================
  //=
  //= ÁªàÁ´ØÂ≠êÁ≥ªÁªü
  //=
  //= ==================================================================================================================

  //= ==================================================================================================================
  //=  ÁªàÁ´ØÁ≥ªÁªü
  //= ==================================================================================================================

  private abstract sealed static class Terminal permits NoConsoleTerminal, StdinTerminal, JlineTerminal {

    public static final String CONSOLE_PROMPT = "[console]$ ";

    //= ========================================================================
    //= ÊéßÂà∂Âè∞ÁªàÁ´Ø

    String readLine() {
      return readLineImpl();
    }

    void print(String message) {
      printImpl(message);
    }

    void println(String message) {
      printLineImpl(message);
    }

    void updateCompleter() {
      updateCompleterImpl();
    }

    protected abstract String readLineImpl();

    protected abstract void printImpl(String message);

    protected abstract void printLineImpl(String message);

    protected abstract void updateCompleterImpl();

  }

  //= ==========================================================================
  //= NoConsoleTerminal

  private static final class NoConsoleTerminal extends Terminal {

    public static NoConsoleTerminal getInstance() {
      return new NoConsoleTerminal();
    }

    private NoConsoleTerminal() {}

    @Override
    protected String readLineImpl() {
      try {
        Thread.sleep(Long.MAX_VALUE);
      } catch (InterruptedException exception) {
        throw new TerminalException(exception);
      }
      return null;
    }

    @Override
    protected synchronized void printImpl(String message) {
      System.out.print(message);
    }

    @Override
    protected void printLineImpl(String message) {
      System.out.println(message + LINE);
    }

    @Override
    protected void updateCompleterImpl() {

    }
  }

  //= ==========================================================================
  //= StdinTerminal

  private static final class StdinTerminal extends Terminal {

    public static StdinTerminal getInstance() {
      return new StdinTerminal();
    }

    private final BufferedReader reader;
    private final OutputStreamWriter writer;

    private StdinTerminal() {
      InputStreamReader inputStreamReader = new InputStreamReader(System.in, StandardCharsets.UTF_8);
      reader = new BufferedReader(inputStreamReader);
      writer = new OutputStreamWriter(System.out, StandardCharsets.UTF_8);
    }

    @Override
    protected String readLineImpl() {
      printImpl(CONSOLE_PROMPT);
      try {
        return reader.readLine();
      } catch (IOException exception) {
        throw new TerminalException(exception);
      }
    }

    @Override
    protected synchronized void printImpl(String message) {
      try {
        writer.write(message);
        writer.flush();
      } catch (IOException exception) {
        exception.printStackTrace();
      }
    }

    @Override
    protected void printLineImpl(String message) {
      printImpl(message + LINE);
    }

    @Override
    protected void updateCompleterImpl() {

    }
  }

  //= ==========================================================================
  //= JlineTerminal

  private static final class JlineTerminal extends Terminal {

    public static JlineTerminal getInstance() {
      return new JlineTerminal();
    }

    private final LineReader reader;
    private final CompleterDelegate completerDelegate;

    private JlineTerminal() {
      if (kernelConfig.noJline) {
        completerDelegate = null;
        reader = null;
      } else {
        completerDelegate = new CompleterDelegate();
        reader = LineReaderBuilder.builder().completer(completerDelegate).build();
        AutopairWidgets autopairWidgets = new AutopairWidgets(reader);
        autopairWidgets.enable();
      }
    }

    @Override
    protected String readLineImpl() {
      return reader.readLine(CONSOLE_PROMPT);
    }

    @Override
    protected synchronized void printImpl(String message) {
      reader.printAbove(message);
    }

    @Override
    protected void printLineImpl(String message) {
      printImpl(message + LINE);
    }

    @Override
    protected void updateCompleterImpl() {
      completerDelegate.update();
    }

    private static class CompleterDelegate implements Completer {

      private Completer completer;

      private CompleterDelegate() {}

      @Override
      public void complete(LineReader reader, ParsedLine line, List<Candidate> candidates) {
        completer.complete(reader, line, candidates);
      }

      private void update() {
        completer = buildCompleter();
      }

      private AggregateCompleter buildCompleter() {

        return new AggregateCompleter(

          // system dump
          // system status
          // system power-off
          // system rapid-stop
          // system force-exit
          new TreeCompleter(node("system", node("status", "dump", "power-off", "rapid-stop", "force-exit"))),

          // system debug
          // system debug enable|disable
          new TreeCompleter(node("system", node("debug", node("enable", "disable")))),

          // schema plugin
          new TreeCompleter(node("schema", node("plugin"))),

          // schema module
          // schema module init xxx
          // schema module boot xxx
          // schema module shut xxx
          // schema module reboot xxx
          // schema module unload xxx
          new TreeCompleter(node("schema", node("module", node("init", "boot", "shut", "reboot", "unload", node(new StringsCompleter(schema.listModuleName())))))),

          // nickname list
          // nickname clean
          // nickname append
          // nickname reload
          // nickname export
          new TreeCompleter(node("nickname", node("list", "clean", "append", "reload", "export"))),

          // logger level xxx
          new TreeCompleter(node("logger", node("level", node("TRACE", "DEBUG", "INFO", "SEEK", "HINT", "WARN", "ERROR", "FATAL", "CLOSE")))),

          // logger verbose name
          // logger verbose slf4j
          new TreeCompleter(node("logger", node("verbose", node("name", node("true", "false"))))),

          // ?
          // help
          // info
          // gc
          // status
          // stop
          new ArgumentCompleter(new StringsCompleter("?", "help", "info", "status", "gc", "stop"))
        );
      }
    }
  }

  //= ==================================================================================================================
  //=
  //= ÊéßÂà∂Âè∞Â≠êÁ≥ªÁªü
  //=
  //= ==================================================================================================================

  //= ================================================================================================================
  //= ÂëΩ‰ª§‰Ωì
  //= ================================================================================================================

  private static class ConsoleCommand {

    private final String[] args;

    public static ConsoleCommand of(String command) {
      return new ConsoleCommand(command);
    }

    private ConsoleCommand(String[] args) {
      this.args = args;
    }

    private ConsoleCommand(String command) {
      this(parseCommand(command));
    }

    private static String[] parseCommand(String command) {
      char[] chars = command.toCharArray();
      boolean filed = false;
      boolean escape = false;
      List<String> parts = new LinkedList<>();
      StringBuilder builder = new StringBuilder();
      for (char chat : chars) {
        switch (chat) {
          case '\\' -> {
            if (escape) {
              builder.append("\\");
            }
            escape = !escape;
          }
          case '\'' -> {
            if (escape) {
              builder.append('\'');
            } else {
              filed = !filed;
            }
            escape = false;
          }
          case ' ' -> {
            if (filed) {
              builder.append(chat);
            } else {
              if (builder.length() == 0) {
                continue;
              }
              parts.add(builder.toString());
              builder.setLength(0);
            }
            escape = false;
          }
          default -> {
            builder.append(chat);
            escape = false;
          }
        }
      }
      parts.add(builder.toString());
      return parts.toArray(new String[0]);
    }

    public String[] copy() {
      String[] copy = new String[args.length];
      System.arraycopy(args, 0, copy, 0, args.length);
      return copy;
    }

    public ConsoleSubCommand subCommand(int i) {
      if (i > args.length) {
        throw new IllegalArgumentException("Too long");
      }
      String[] copy = new String[args.length - i];
      System.arraycopy(args, i, copy, 0, copy.length);
      return new ConsoleSubCommand(copy);
    }

    public int length() {
      return args.length;
    }

    @Override
    public String toString() {
      StringBuilder builder = new StringBuilder();
      for (String arg : args) {
        if (arg.contains(" ")) {
          builder.append("'").append(arg).append("'");
        } else {
          builder.append(arg);
        }
        builder.append(" ");
      }
      builder.setLength(builder.length() - 1);
      return builder.toString();
    }
  }

  @SuppressWarnings("unused")
  private record ConsoleSubCommand(String[] args) {

    public String getOrNull(int i) {
      return i < args.length ? args[i] : null;
    }

    public String getOrEmpty(int i) {
      return i < args.length ? args[i] : "";
    }

    public boolean getBooleanOrTrue(int i) {
      if (i < args.length) {
        return Boolean.parseBoolean(args[i]);
      } else {
        return true;
      }
    }

    public boolean getBooleanOrFalse(int i) {
      if (i < args.length) {
        return Boolean.parseBoolean(args[i]);
      } else {
        return false;
      }
    }

    @Override
    public String toString() {
      StringBuilder builder = new StringBuilder();
      for (String arg : args) {
        if (arg.contains(" ")) {
          builder.append("'").append(arg).append("'");
        } else {
          builder.append(arg);
        }
        builder.append(" ");
      }
      builder.setLength(builder.length() - 1);
      return builder.toString();
    }
  }

  //= ================================================================================================================
  //= Ë∞ÉÂ∫¶Âô®
  //= ================================================================================================================

  private static class Dispatcher {

    private final Tree tree = new Tree(null, 0);

    public boolean execute(String command) {
      ConsoleCommand consoleCommand = new ConsoleCommand(command);
      return tree.execute(consoleCommand);
    }

    public RegisterFunctionAccessor registerFunction() {
      return new RegisterFunctionAccessor(this);
    }

    public RegisterExclusiveAccessor registerExclusive() {
      return new RegisterExclusiveAccessor(this);
    }

    public static class RegisterFunctionAccessor {

      private final Dispatcher dispatcher;
      private final List<String[]> commands = new LinkedList<>();

      private RegisterFunctionAccessor(Dispatcher dispatcher) {
        this.dispatcher = dispatcher;
      }

      public RegisterFunctionAccessor command(String... command) {
        if (dispatcher.tree.isAdopted()) {
          throw new IllegalArgumentException("Can't register this command -> " + String.join(".", command));
        }
        commands.add(command);
        return this;
      }

      public void function(Consumer<ConsoleSubCommand> function) {
        dispatcher.tree.registerFunction(commands, function);
      }
    }

    public static class RegisterExclusiveAccessor {

      private final Dispatcher dispatcher;
      private final List<String[]> commands = new LinkedList<>();

      private RegisterExclusiveAccessor(Dispatcher dispatcher) {
        this.dispatcher = dispatcher;
      }

      public RegisterExclusiveAccessor command(String... command) {
        if (dispatcher.tree.isAdopted()) {
          throw new IllegalArgumentException("Can't register this command -> " + String.join(".", command));
        }
        commands.add(command);
        return this;
      }

      public void function(Consumer<ConsoleSubCommand> function) {
        dispatcher.tree.registerExclusive(commands, function);
      }
    }
  }

  //= ================================================================================================================
  //= Â≠òÂÇ®‰Ωì
  //= ================================================================================================================

  private static class Tree {

    private final Tree parent;
    private final int depth;
    private final Map<String, Tree> tree = new LinkedHashMap<>();

    public String name;
    public Boolean exclusive = false;
    public Consumer<ConsoleSubCommand> function;

    public Tree(Tree parent, int depth) {
      this.parent = parent;
      this.depth = depth;
    }

    public boolean isAdopted(String... args) {
      Tree node = this;
      for (String arg : args) {
        Tree next = node.tree.get(arg);
        if (next == null) return false;
        node = next;
      }
      return node.exclusive;
    }

    public synchronized void registerFunction(List<String[]> commands, Consumer<ConsoleSubCommand> function) {
      for (String[] command : commands) {
        if (isAdopted(command)) {
          throw new RuntimeException("Command already registered -> " + String.join(" ", command));
        }
      }
      for (String[] command : commands) {
        Tree node = this;
        for (String arg : command) {
          Tree next = node.tree.get(arg);
          if (next == null) {
            Tree temp = new Tree(node, node.depth + 1);
            temp.name = arg;
            node.tree.put(arg, temp);
            node = temp;
          } else {
            node = next;
          }
        }
        node.function = function;
        node.exclusive = false;
      }
    }

    public synchronized void registerExclusive(List<String[]> commands, Consumer<ConsoleSubCommand> function) {
      for (String[] command : commands) {
        if (isAdopted(command)) {
          throw new RuntimeException("Command already registered -> " + String.join(" ", command));
        }
      }
      for (String[] command : commands) {
        Tree node = this;
        for (String arg : command) {
          Tree next = node.tree.get(arg);
          if (next == null) {
            Tree temp = new Tree(node, node.depth + 1);
            temp.name = arg;
            node.tree.put(arg, temp);
            node = temp;
          } else {
            node = next;
          }
        }
        node.function = function;
        node.exclusive = true;
      }
    }

    public boolean execute(ConsoleCommand consoleCommand) {
      Tree node = this;
      String[] args = consoleCommand.copy();
      for (String arg : args) {
        Tree next = node.tree.get(arg);
        if (next == null) {
          return false;
        } else {
          node = next;
          if (node.exclusive) {
            break;
          }
        }
      }
      if (node.function == null) {
        return false;
      }
      if (consoleCommand.length() == node.depth) {
        node.function.accept(null);
      } else {
        ConsoleSubCommand subCommand = consoleCommand.subCommand(node.depth);
        node.function.accept(subCommand);
      }
      return true;
    }

    @Override
    public String toString() {
      if (parent == null) {
        return "";
      } else {
        return parent + "." + name;
      }
    }

  }

  //= ==================================================================================================================
  //=
  //= Êèí‰ª∂Â≠êÁ≥ªÁªü
  //=
  //= ==================================================================================================================

  //= ==================================================================================================================
  //= Êèí‰ª∂Á≥ªÁªü

  private static final class Schema {

    private final LoggerX logger = LoggerXFactory.getLogger("Schema");

    private final Path folder;

    private final Map<String, Plugin> plugins;

    private final Map<String, Class<? extends AbstractEventHandler>> modules;

    private final Map<Runner, Class<? extends EventHandlerRunner>> COMPONENT_RUNNER_CLAZZ;
    private final Map<Filter, Class<? extends EventHandlerFilter>> COMPONENT_FILTER_CLAZZ;
    private final Map<Monitor, Class<? extends EventHandlerMonitor>> COMPONENT_MONITOR_CLAZZ;
    private final Map<Checker, Class<? extends EventHandlerChecker>> COMPONENT_CHECKER_CLAZZ;
    private final NavigableMap<Executor, Class<? extends EventHandlerExecutor>> COMPONENT_EXECUTOR_CLAZZ;

    private final List<Runner> SORTED_RUNNER;
    private final List<Filter> SORTED_FILTER;
    private final List<Monitor> SORTED_MONITOR;
    private final List<Checker> SORTED_CHECKER;

    private final Map<Runner, EventHandlerRunner> COMPONENT_RUNNER_INSTANCE;
    private final Map<Filter, EventHandlerFilter> COMPONENT_FILTER_INSTANCE;
    private final Map<Monitor, EventHandlerMonitor> COMPONENT_MONITOR_INSTANCE;
    private final Map<Checker, EventHandlerChecker> COMPONENT_CHECKER_INSTANCE;
    private final NavigableMap<Executor, EventHandlerExecutor> COMPONENT_EXECUTOR_INSTANCE;

    private final Map<String, Executor> COMMAND_EXECUTOR_RELATION;

    private final Map<String, String> MODULE_PLUGIN_RELATION;

    private final List<EventHandlerFilter> FILTER_USERS_CHAIN;
    private final List<EventHandlerFilter> FILTER_GROUP_CHAIN;

    private final List<EventHandlerMonitor> MONITOR_USERS_CHAIN;
    private final List<EventHandlerMonitor> MONITOR_GROUP_CHAIN;

    private final Map<String, EventHandlerExecutor> EXECUTOR_USERS_POOL;
    private final Map<String, EventHandlerExecutor> EXECUTOR_GROUP_POOL;

    private final List<EventHandlerChecker> GLOBAL_CHECKER_USERS_POOL;
    private final List<EventHandlerChecker> GLOBAL_CHECKER_GROUP_POOL;

    private final Map<String, List<EventHandlerChecker>> COMMAND_CHECKER_USERS_POOL;
    private final Map<String, List<EventHandlerChecker>> COMMAND_CHECKER_GROUP_POOL;

    //= ========================================================================
    //= ÊûÑÈÄ†
    //= ========================================================================

    public Schema(Path folder) {

      this.folder = folder;

      logger.hint("Âä†ËΩΩÊèí‰ª∂Ê®°Âûã");

      plugins = new HashMap<>();
      modules = new HashMap<>();

      COMPONENT_RUNNER_CLAZZ = new HashMap<>();
      COMPONENT_FILTER_CLAZZ = new HashMap<>();
      COMPONENT_MONITOR_CLAZZ = new HashMap<>();
      COMPONENT_CHECKER_CLAZZ = new HashMap<>();
      COMPONENT_EXECUTOR_CLAZZ = new TreeMap<>(AnnotationEnhance::compare);

      SORTED_RUNNER = new LinkedList<>();
      SORTED_FILTER = new LinkedList<>();
      SORTED_MONITOR = new LinkedList<>();
      SORTED_CHECKER = new LinkedList<>();

      COMPONENT_RUNNER_INSTANCE = new ConcurrentHashMap<>();
      COMPONENT_FILTER_INSTANCE = new ConcurrentHashMap<>();
      COMPONENT_MONITOR_INSTANCE = new ConcurrentHashMap<>();
      COMPONENT_CHECKER_INSTANCE = new ConcurrentHashMap<>();
      COMPONENT_EXECUTOR_INSTANCE = new ConcurrentSkipListMap<>(AnnotationEnhance::compare);

      COMMAND_EXECUTOR_RELATION = new HashMap<>();
      MODULE_PLUGIN_RELATION = new HashMap<>();

      FILTER_USERS_CHAIN = new CopyOnWriteArrayList<>();
      FILTER_GROUP_CHAIN = new CopyOnWriteArrayList<>();

      MONITOR_USERS_CHAIN = new CopyOnWriteArrayList<>();
      MONITOR_GROUP_CHAIN = new CopyOnWriteArrayList<>();

      EXECUTOR_USERS_POOL = new ConcurrentHashMap<>();
      EXECUTOR_GROUP_POOL = new ConcurrentHashMap<>();

      GLOBAL_CHECKER_USERS_POOL = new CopyOnWriteArrayList<>();
      GLOBAL_CHECKER_GROUP_POOL = new CopyOnWriteArrayList<>();

      COMMAND_CHECKER_USERS_POOL = new ConcurrentHashMap<>();
      COMMAND_CHECKER_GROUP_POOL = new ConcurrentHashMap<>();

    }

    //= ========================================================================
    //= Ê†∏ÂøÉÂäüËÉΩ
    //= ========================================================================

    //= ========================================================================
    //= ÂèçËΩ¨ÊéßÂà∂

    @SuppressWarnings("unchecked")
    public <T extends EventHandlerRunner> T getRunner(Class<T> clazz) {
      List<EventHandlerRunner> collect = COMPONENT_RUNNER_INSTANCE.values().stream().filter(clazz::isInstance).toList();
      if (collect.size() == 1) {
        return (T) collect.get(0);
      } else {
        return null;
      }
    }

    //= ========================================================================
    //= ÁîüÊàê‰ø°ÊÅØ

    public String generateUsersExecutorList() {
      if (EXECUTOR_USERS_POOL.size() == 0) {
        return "Ê≤°Êúâ‰ªª‰ΩïÂ∑≤Ë£ÖËΩΩÁöÑÂëΩ‰ª§";
      }
      StringBuilder builder = new StringBuilder();
      for (Executor executor : COMPONENT_EXECUTOR_INSTANCE.keySet()) {
        if (!EXECUTOR_USERS_POOL.containsKey(executor.command())) {
          continue;
        }
        builder.append(executor.outline());
        builder.append("[");
        builder.append(executor.command());
        builder.append("]");
        builder.append(executor.description());
        builder.append("\r\n");
      }
      builder.setLength(builder.length() - 2);
      return builder.toString();
    }

    public String generateGroupExecutorList() {
      if (EXECUTOR_GROUP_POOL.size() == 0) {
        return "Ê≤°Êúâ‰ªª‰ΩïÂ∑≤Ë£ÖËΩΩÁöÑÂëΩ‰ª§";
      }
      StringBuilder builder = new StringBuilder();
      for (Executor executor : COMPONENT_EXECUTOR_INSTANCE.keySet()) {
        if (!EXECUTOR_GROUP_POOL.containsKey(executor.command())) {
          continue;
        }
        builder.append(executor.outline());
        builder.append("[");
        builder.append(executor.command());
        builder.append("]");
        builder.append(executor.description());
        builder.append("\r\n");
      }
      builder.setLength(builder.length() - 2);
      return builder.toString();
    }

    //= ========================================================================
    //= Â§ÑÁêÜÁ≥ªÁªü

    public List<EventHandlerFilter> getFilterUsersChain() {
      return FILTER_USERS_CHAIN;
    }

    public List<EventHandlerFilter> getFilterGroupChain() {
      return FILTER_GROUP_CHAIN;
    }

    public List<EventHandlerMonitor> getMonitorUsersChain() {
      return MONITOR_USERS_CHAIN;
    }

    public List<EventHandlerMonitor> getMonitorGroupChain() {
      return MONITOR_GROUP_CHAIN;
    }

    public Map<String, EventHandlerExecutor> getExecutorUsersPool() {
      return EXECUTOR_USERS_POOL;
    }

    public Map<String, EventHandlerExecutor> getExecutorGroupPool() {
      return EXECUTOR_GROUP_POOL;
    }

    public List<EventHandlerChecker> getGlobalCheckerUsersPool() {
      return GLOBAL_CHECKER_USERS_POOL;
    }

    public List<EventHandlerChecker> getGlobalCheckerGroupPool() {
      return GLOBAL_CHECKER_GROUP_POOL;
    }

    public List<EventHandlerChecker> getCommandCheckerUsersPool(String name) {
      return COMMAND_CHECKER_USERS_POOL.get(name);
    }

    public List<EventHandlerChecker> getCommandCheckerGroupPool(String name) {
      return COMMAND_CHECKER_GROUP_POOL.get(name);
    }

    //= ========================================================================
    //= Ê®°ÂùóÊâøËΩΩ
    //= ========================================================================

    //= ========================================================================
    //=  Êâ´ÊèèÊèí‰ª∂

    public void scanPlugin() {

      logger.hint("Êâ´ÊèèÊèí‰ª∂ÁõÆÂΩï");

      List<Path> listFiles;

      try (Stream<Path> stream = Files.list(folder)) {
        listFiles = stream.toList();
      } catch (IOException exception) {
        throw new SchemaException("Êâ´ÊèèÊèí‰ª∂ÁõÆÂΩïÂ§±Ë¥•", exception);
      }

      if (listFiles.size() == 0) {
        logger.warn("Êèí‰ª∂ÁõÆÂΩï‰∏∫Á©∫");
        return;
      }

      logger.seek("ÂèëÁé∞[" + listFiles.size() + "]‰∏™Êñá‰ª∂");

      for (Path path : listFiles) {
        logger.info("Â∞ùËØïÂä†ËΩΩ -> " + path.getFileName());
        Plugin plugin = Plugin.load(path);
        String name = plugin.getName();
        if (plugins.containsKey(name)) {
          Plugin exist = plugins.get(name);
          throw new SchemaException("ÂèëÁé∞Êèí‰ª∂ÂêçÁß∞ÂÜ≤Á™Å " + plugin.getPath() + "ÂêçÁß∞" + name + "Â∑≤Ë¢´Ê≥®ÂÜå" + exist.getPath());
        }
        plugins.put(name, plugin);
      }

      logger.seek("ÂèëÁé∞[" + plugins.size() + "]‰∏™Êèí‰ª∂");

      for (Plugin plugin : plugins.values()) {
        logger.info(plugin.getPath().getFileName() + " -> " + plugin.getName());
      }
    }

    //= ========================================================================
    //=  Êâ´ÊèèÊ®°Âùó

    public void scanModule() {
      logger.hint("Êâ´ÊèèÊèí‰ª∂ÂåÖÂÜÖÂÆπ");
      plugins.values().forEach(Plugin::scan);
    }

    //= ========================================================================
    //=  Ê≥®ÂÜåÊ®°Âùó

    public void loadModule() {

      logger.hint("ÂêëÊèí‰ª∂Ê®°ÂûãÊ≥®ÂÜåÊ®°Âùó");

      for (Map.Entry<String, Plugin> pluginEntry : plugins.entrySet()) {

        var pluginName = pluginEntry.getKey();
        var pluginPackage = pluginEntry.getValue();

        logger.seek("Â∞ùËØïÊ≥®ÂÜåÊèí‰ª∂ -> " + pluginName);

        if (pluginPackage.getModules().isEmpty()) {
          logger.warn("Êèí‰ª∂ÂåÖÂÜÖ‰∏çÂê´‰ªª‰ΩïÊ®°Âùó " + pluginName);
          return;
        }

        logger.info("Ê®°ÂùóÂÜ≤Á™ÅÊ£ÄÊü• -> " + pluginName);

        for (Map.Entry<Runner, Class<? extends EventHandlerRunner>> moduleEntry : pluginPackage.getRunnerClassMap().entrySet()) {
          var k = moduleEntry.getKey();
          var v = moduleEntry.getValue();
          if (COMPONENT_RUNNER_CLAZZ.containsKey(k)) {
            Class<? extends AbstractEventHandler> exist = COMPONENT_RUNNER_CLAZZ.get(k);
            throw new SchemaException("ÂèëÁé∞Ê®°ÂùóÂêçÂÜ≤Á™Å " + pluginName + ":" + v.getName() + "‰∏é" + COMPONENT_RUNNER_CLAZZ.get(k) + ":" + exist.getName());
          }
        }

        for (Map.Entry<Filter, Class<? extends EventHandlerFilter>> moduleEntry : pluginPackage.getFilterClassMap().entrySet()) {
          var k = moduleEntry.getKey();
          var v = moduleEntry.getValue();
          if (COMPONENT_FILTER_CLAZZ.containsKey(k)) {
            Class<? extends AbstractEventHandler> exist = COMPONENT_FILTER_CLAZZ.get(k);
            throw new SchemaException("ÂèëÁé∞Ê®°ÂùóÂêçÂÜ≤Á™Å " + pluginName + ":" + v.getName() + "‰∏é" + COMPONENT_FILTER_CLAZZ.get(k) + ":" + exist.getName());
          }
        }

        for (Map.Entry<Monitor, Class<? extends EventHandlerMonitor>> moduleEntry : pluginPackage.getMonitorClassMap().entrySet()) {
          var k = moduleEntry.getKey();
          var v = moduleEntry.getValue();
          if (COMPONENT_MONITOR_CLAZZ.containsKey(k)) {
            Class<? extends AbstractEventHandler> exist = COMPONENT_MONITOR_CLAZZ.get(k);
            throw new SchemaException("ÂèëÁé∞Ê®°ÂùóÂêçÂÜ≤Á™Å " + pluginName + ":" + v.getName() + "‰∏é" + COMPONENT_MONITOR_CLAZZ.get(k) + ":" + exist.getName());
          }
        }

        for (Map.Entry<Checker, Class<? extends EventHandlerChecker>> moduleEntry : pluginPackage.getCheckerClassMap().entrySet()) {
          var k = moduleEntry.getKey();
          var v = moduleEntry.getValue();
          if (COMPONENT_CHECKER_CLAZZ.containsKey(k)) {
            Class<? extends AbstractEventHandler> exist = COMPONENT_CHECKER_CLAZZ.get(k);
            throw new SchemaException("ÂèëÁé∞Ê®°ÂùóÂêçÂÜ≤Á™Å " + pluginName + ":" + v.getName() + "‰∏é" + COMPONENT_CHECKER_CLAZZ.get(k) + ":" + exist.getName());
          }
        }

        for (Map.Entry<Executor, Class<? extends EventHandlerExecutor>> moduleEntry : pluginPackage.getExecutorClassMap().entrySet()) {
          var k = moduleEntry.getKey();
          var v = moduleEntry.getValue();
          if (COMPONENT_EXECUTOR_CLAZZ.containsKey(k)) {
            Class<? extends AbstractEventHandler> exist = COMPONENT_EXECUTOR_CLAZZ.get(k);
            throw new SchemaException("ÂèëÁé∞Ê®°ÂùóÂêçÂÜ≤Á™Å " + pluginName + ":" + v.getName() + "‰∏é" + COMPONENT_EXECUTOR_CLAZZ.get(k) + ":" + exist.getName());
          }
        }

        for (Map.Entry<Executor, Class<? extends EventHandlerExecutor>> entry : pluginPackage.getExecutorClassMap().entrySet()) {
          var k = entry.getKey();
          var v = entry.getValue();
          String command = k.command();
          if (COMMAND_EXECUTOR_RELATION.containsKey(command)) {
            Executor annotation = COMMAND_EXECUTOR_RELATION.get(command);
            Class<? extends EventHandlerExecutor> exist = COMPONENT_EXECUTOR_CLAZZ.get(annotation);
            String existPluginName = MODULE_PLUGIN_RELATION.get(annotation.value());
            throw new SchemaException("ÂèëÁé∞ÂëΩ‰ª§ÂÜ≤Á™Å " + command + " - " + pluginName + ":" + v.getName() + "Â∑≤Ê≥®ÂÜå‰∏∫" + existPluginName + ":" + exist.getName());
          }
        }

        logger.info("ÂÜ≤Á™ÅÊ£ÄÊü•ÈÄöËøá -> " + pluginName);

        for (Map.Entry<Runner, Class<? extends EventHandlerRunner>> entry : pluginPackage.getRunnerClassMap().entrySet()) {
          var k = entry.getKey();
          var v = entry.getValue();
          String moduleName = k.value();
          modules.put(moduleName, v);
          SORTED_RUNNER.add(k);
          COMPONENT_RUNNER_CLAZZ.put(k, v);
          MODULE_PLUGIN_RELATION.put(moduleName, pluginName);
          logger.info("Ê≥®ÂÜåÂÆöÊó∂Âô®" + pluginName + ":" + moduleName + "[" + k.priority() + "] -> " + v.getName());
        }

        for (Map.Entry<Filter, Class<? extends EventHandlerFilter>> entry : pluginPackage.getFilterClassMap().entrySet()) {
          var k = entry.getKey();
          var v = entry.getValue();
          String moduleName = k.value();
          modules.put(moduleName, v);
          SORTED_FILTER.add(k);
          COMPONENT_FILTER_CLAZZ.put(k, v);
          MODULE_PLUGIN_RELATION.put(moduleName, pluginName);
          logger.info("Ê≥®ÂÜåËøáÊª§Âô®" + pluginName + ":" + moduleName + "[" + k.priority() + "] -> " + v.getName());
        }

        for (Map.Entry<Monitor, Class<? extends EventHandlerMonitor>> entry : pluginPackage.getMonitorClassMap().entrySet()) {
          var k = entry.getKey();
          var v = entry.getValue();
          String moduleName = k.value();
          modules.put(moduleName, v);
          SORTED_MONITOR.add(k);
          COMPONENT_MONITOR_CLAZZ.put(k, v);
          MODULE_PLUGIN_RELATION.put(moduleName, pluginName);
          logger.info("Ê≥®ÂÜåÁõëÂê¨Âô®" + pluginName + ":" + moduleName + "[" + k.priority() + "] -> " + v.getName());
        }

        for (Map.Entry<Checker, Class<? extends EventHandlerChecker>> entry : pluginPackage.getCheckerClassMap().entrySet()) {
          var k = entry.getKey();
          var v = entry.getValue();
          String moduleName = k.value();
          modules.put(moduleName, v);
          SORTED_CHECKER.add(k);
          COMPONENT_CHECKER_CLAZZ.put(k, v);
          MODULE_PLUGIN_RELATION.put(moduleName, pluginName);
          logger.info("Ê≥®ÂÜåÊ£ÄÊü•Âô®" + pluginName + ":" + moduleName + "[" + k.priority() + "] -> " + v.getName());
        }

        for (Map.Entry<Executor, Class<? extends EventHandlerExecutor>> entry : pluginPackage.getExecutorClassMap().entrySet()) {
          var k = entry.getKey();
          var v = entry.getValue();
          String moduleName = k.value();
          modules.put(moduleName, v);
          COMMAND_EXECUTOR_RELATION.put(k.command(), k);
          COMPONENT_EXECUTOR_CLAZZ.put(k, v);
          MODULE_PLUGIN_RELATION.put(moduleName, pluginName);
          logger.info("Ê≥®ÂÜåÊâßË°åÂô®" + pluginName + ":" + moduleName + "[" + k.command() + "] -> " + v.getName());
        }
      }

      SORTED_RUNNER.sort(AnnotationEnhance::compare);
      SORTED_FILTER.sort(AnnotationEnhance::compare);
      SORTED_MONITOR.sort(AnnotationEnhance::compare);
      SORTED_CHECKER.sort(AnnotationEnhance::compare);

    }

    //= ========================================================================
    //=  ÂàõÂª∫Ê®°Âùó

    public void makeModule() {

      logger.hint("Âä†ËΩΩÂÆöÊó∂Âô® " + COMPONENT_RUNNER_CLAZZ.size());

      for (Runner annotation : SORTED_RUNNER) {
        Class<? extends EventHandlerRunner> clazz = COMPONENT_RUNNER_CLAZZ.get(annotation);
        String moduleName = annotation.value();
        String pluginName = MODULE_PLUGIN_RELATION.get(moduleName);
        Plugin plugin = plugins.get(pluginName);
        URLClassLoader dependClassLoader = plugin.getDependClassLoader();
        logger.info("Âä†ËΩΩÂÆöÊó∂Âô®" + pluginName + ":" + moduleName + "[" + annotation.priority() + "] -> " + clazz.getName());
        EventHandlerRunner instance;
        try {
          instance = clazz.getConstructor().newInstance();
          instance.internalInit(pluginName, moduleName, dependClassLoader);
        } catch (InvocationTargetException | InstantiationException | IllegalAccessException | NoSuchMethodException e) {
          throw new SchemaException("Âä†ËΩΩÂÆöÊó∂Âô®Â§±Ë¥• " + pluginName + ":" + moduleName + "[" + annotation.priority() + "] -> " + clazz.getName());
        }

        COMPONENT_RUNNER_INSTANCE.put(annotation, instance);
      }

      logger.hint("Âä†ËΩΩËøáÊª§Âô® " + COMPONENT_FILTER_CLAZZ.size());

      for (Filter annotation : SORTED_FILTER) {
        Class<? extends EventHandlerFilter> clazz = COMPONENT_FILTER_CLAZZ.get(annotation);
        String moduleName = annotation.value();
        String pluginName = MODULE_PLUGIN_RELATION.get(moduleName);
        Plugin plugin = plugins.get(pluginName);
        URLClassLoader dependClassLoader = plugin.getDependClassLoader();
        logger.info("Âä†ËΩΩËøáÊª§Âô®" + pluginName + ":" + moduleName + "[" + annotation.priority() + "] -> " + clazz.getName());
        EventHandlerFilter instance;
        try {
          instance = clazz.getConstructor().newInstance();
          instance.internalInit(pluginName, moduleName, dependClassLoader);
        } catch (InvocationTargetException | InstantiationException | IllegalAccessException | NoSuchMethodException e) {
          throw new SchemaException("Âä†ËΩΩËøáÊª§Âô®Â§±Ë¥• " + MODULE_PLUGIN_RELATION.get(moduleName) + ":" + moduleName + " " + clazz.getName());
        }
        COMPONENT_FILTER_INSTANCE.put(annotation, instance);
        if (annotation.users()) FILTER_USERS_CHAIN.add(instance);
        if (annotation.group()) FILTER_GROUP_CHAIN.add(instance);
      }

      logger.hint("Âä†ËΩΩÁõëÂê¨Âô® " + COMPONENT_MONITOR_CLAZZ.size());

      for (Monitor annotation : SORTED_MONITOR) {
        Class<? extends EventHandlerMonitor> clazz = COMPONENT_MONITOR_CLAZZ.get(annotation);
        String moduleName = annotation.value();
        String pluginName = MODULE_PLUGIN_RELATION.get(moduleName);
        Plugin plugin = plugins.get(pluginName);
        URLClassLoader dependClassLoader = plugin.getDependClassLoader();
        logger.info("Âä†ËΩΩÁõëÂê¨Âô®" + pluginName + ":" + moduleName + "[" + annotation.priority() + "] -> " + clazz.getName());
        EventHandlerMonitor instance;
        try {
          instance = clazz.getConstructor().newInstance();
          instance.internalInit(pluginName, moduleName, dependClassLoader);
        } catch (InvocationTargetException | InstantiationException | IllegalAccessException | NoSuchMethodException e) {
          throw new SchemaException("Âä†ËΩΩÁõëÂê¨Âô®Â§±Ë¥• " + MODULE_PLUGIN_RELATION.get(moduleName) + ":" + moduleName + " " + clazz.getName());
        }
        COMPONENT_MONITOR_INSTANCE.put(annotation, instance);
        if (annotation.users()) MONITOR_USERS_CHAIN.add(instance);
        if (annotation.group()) MONITOR_GROUP_CHAIN.add(instance);
      }

      logger.hint("Âä†ËΩΩÊ£ÄÊü•Âô® " + COMPONENT_CHECKER_CLAZZ.size());

      for (Checker annotation : SORTED_CHECKER) {
        Class<? extends EventHandlerChecker> clazz = COMPONENT_CHECKER_CLAZZ.get(annotation);
        String moduleName = annotation.value();
        String pluginName = MODULE_PLUGIN_RELATION.get(moduleName);
        Plugin plugin = plugins.get(pluginName);
        URLClassLoader dependClassLoader = plugin.getDependClassLoader();
        logger.info("Âä†ËΩΩÊ£ÄÊü•Âô®" + pluginName + ":" + moduleName + "[" + annotation.priority() + "] -> " + clazz.getName());
        EventHandlerChecker instance;
        try {
          instance = clazz.getConstructor().newInstance();
          instance.internalInit(pluginName, moduleName, dependClassLoader);
        } catch (InvocationTargetException | InstantiationException | IllegalAccessException | NoSuchMethodException e) {
          throw new SchemaException("Âä†ËΩΩÊ£ÄÊü•Âô®Â§±Ë¥• " + MODULE_PLUGIN_RELATION.get(moduleName) + ":" + moduleName + " " + clazz.getName());
        }
        COMPONENT_CHECKER_INSTANCE.put(annotation, instance);
        if (annotation.command().equals("*")) {
          if (annotation.users()) GLOBAL_CHECKER_USERS_POOL.add(instance);
          if (annotation.group()) GLOBAL_CHECKER_GROUP_POOL.add(instance);
        } else {
          if (annotation.users()) {
            List<EventHandlerChecker> checkerList = COMMAND_CHECKER_USERS_POOL.computeIfAbsent(annotation.command(), k1 -> new CopyOnWriteArrayList<>());
            checkerList.add(instance);
            checkerList.sort((o1, o2) -> {
              Checker o1Annotation = o1.getClass().getAnnotation(Checker.class);
              Checker o2Annotation = o2.getClass().getAnnotation(Checker.class);
              return o1Annotation.priority() - o2Annotation.priority();
            });
          }
          if (annotation.group()) {
            List<EventHandlerChecker> checkerList = COMMAND_CHECKER_GROUP_POOL.computeIfAbsent(annotation.command(), k1 -> new CopyOnWriteArrayList<>());
            checkerList.add(instance);
            checkerList.sort((o1, o2) -> {
              Checker o1Annotation = o1.getClass().getAnnotation(Checker.class);
              Checker o2Annotation = o2.getClass().getAnnotation(Checker.class);
              return o1Annotation.priority() - o2Annotation.priority();
            });
          }
        }
      }

      logger.hint("Âä†ËΩΩÊâßË°åÂô® " + COMPONENT_EXECUTOR_CLAZZ.size());

      for (Map.Entry<Executor, Class<? extends EventHandlerExecutor>> entry : COMPONENT_EXECUTOR_CLAZZ.entrySet()) {
        Executor annotation = entry.getKey();
        Class<? extends EventHandlerExecutor> clazz = entry.getValue();
        String moduleName = annotation.value();
        String pluginName = MODULE_PLUGIN_RELATION.get(moduleName);
        Plugin plugin = plugins.get(pluginName);
        URLClassLoader dependClassLoader = plugin.getDependClassLoader();
        logger.info("Âä†ËΩΩÊâßË°åÂô®" + pluginName + ":" + moduleName + "[" + annotation.command() + "] -> " + clazz.getName());
        EventHandlerExecutor instance;
        try {
          instance = clazz.getConstructor().newInstance();
          instance.internalInit(pluginName, moduleName, dependClassLoader);
          instance.buildHelp(annotation);
        } catch (InvocationTargetException | InstantiationException | IllegalAccessException | NoSuchMethodException e) {
          throw new SchemaException("Âä†ËΩΩÊâßË°åÂô®Â§±Ë¥• " + MODULE_PLUGIN_RELATION.get(moduleName) + ":" + moduleName + " " + clazz.getName());
        }
        COMPONENT_EXECUTOR_INSTANCE.put(annotation, instance);
        if (annotation.users()) EXECUTOR_USERS_POOL.put(annotation.command(), instance);
        if (annotation.group()) EXECUTOR_GROUP_POOL.put(annotation.command(), instance);
      }

    }

    //= ========================================================================
    //=  È¢ÑËΩΩÊ®°Âùó

    public void initModule() {

      logger.hint("È¢ÑËΩΩÂÆöÊó∂Âô®");

      for (Runner annotation : SORTED_RUNNER) {
        EventHandlerRunner instance = COMPONENT_RUNNER_INSTANCE.get(annotation);
        logger.info("È¢ÑËΩΩÂÆöÊó∂Âô®" + annotation.value() + "[" + annotation.priority() + "] -> " + instance.getClass().getName());
        try {
          instance.initWrapper();
        } catch (Exception exception) {
          throw new SchemaException("È¢ÑËΩΩÂÆöÊó∂Âô®Â§±Ë¥• " + MODULE_PLUGIN_RELATION.get(annotation.value()) + ":" + annotation.value() + " -> " + instance.getClass().getName(), exception);
        }
      }

      logger.hint("È¢ÑËΩΩËøáÊª§Âô®");

      for (Filter annotation : SORTED_FILTER) {
        EventHandlerFilter instance = COMPONENT_FILTER_INSTANCE.get(annotation);
        logger.info("È¢ÑËΩΩËøáÊª§Âô®" + annotation.value() + "[" + annotation.priority() + "] -> " + instance.getClass().getName());
        try {
          instance.initWrapper();
        } catch (Exception exception) {
          throw new SchemaException("È¢ÑËΩΩËøáÊª§Âô®Â§±Ë¥• " + MODULE_PLUGIN_RELATION.get(annotation.value()) + ":" + annotation.value() + " -> " + instance.getClass().getName(), exception);
        }
      }

      logger.hint("È¢ÑËΩΩÁõëÂê¨Âô®");

      for (Monitor annotation : SORTED_MONITOR) {
        EventHandlerMonitor instance = COMPONENT_MONITOR_INSTANCE.get(annotation);
        logger.info("È¢ÑËΩΩÁõëÂê¨Âô®" + annotation.value() + "[" + annotation.priority() + "] -> " + instance.getClass().getName());
        try {
          instance.initWrapper();
        } catch (Exception exception) {
          throw new SchemaException("È¢ÑËΩΩÁõëÂê¨Âô®Â§±Ë¥• " + MODULE_PLUGIN_RELATION.get(annotation.value()) + ":" + annotation.value() + " -> " + instance.getClass().getName(), exception);
        }
      }

      logger.hint("È¢ÑËΩΩÊ£ÄÊü•Âô®");

      for (Checker annotation : SORTED_CHECKER) {
        EventHandlerChecker instance = COMPONENT_CHECKER_INSTANCE.get(annotation);
        logger.info("È¢ÑËΩΩÊ£ÄÊü•Âô®" + annotation.value() + "[" + annotation.priority() + "] -> " + instance.getClass().getName());
        try {
          instance.initWrapper();
        } catch (Exception exception) {
          throw new SchemaException("È¢ÑËΩΩÊ£ÄÊü•Âô®Â§±Ë¥• " + MODULE_PLUGIN_RELATION.get(annotation.value()) + ":" + annotation.value() + " -> " + instance.getClass().getName(), exception);
        }
      }

      logger.hint("È¢ÑËΩΩÊâßË°åÂô®");

      for (Map.Entry<Executor, EventHandlerExecutor> entry : COMPONENT_EXECUTOR_INSTANCE.entrySet()) {
        Executor annotation = entry.getKey();
        EventHandlerExecutor instance = entry.getValue();
        logger.info("È¢ÑËΩΩÊâßË°åÂô®" + annotation.value() + "[" + annotation.command() + "] -> " + instance.getClass().getName());
        try {
          instance.initWrapper();
        } catch (Exception exception) {
          throw new SchemaException("È¢ÑËΩΩÊâßË°åÂô®Â§±Ë¥• " + MODULE_PLUGIN_RELATION.get(annotation.value()) + ":" + annotation.value() + " -> " + instance.getClass().getName(), exception);
        }
      }
    }

    //= ========================================================================
    //=  ÂêØÂä®Ê®°Âùó

    public void bootModule() {

      logger.hint("ÂêØÂä®ÂÆöÊó∂Âô®");

      for (Runner annotation : SORTED_RUNNER) {
        EventHandlerRunner clazz = COMPONENT_RUNNER_INSTANCE.get(annotation);
        logger.info("ÂêØÂä®ÂÆöÊó∂Âô®" + annotation.value() + "[" + annotation.priority() + "] -> " + clazz.getClass().getName());
        try {
          clazz.bootWrapper();
        } catch (Exception exception) {
          throw new SchemaException("ÂêØÂä®ÂÆöÊó∂Âô®Â§±Ë¥• " + MODULE_PLUGIN_RELATION.get(annotation.value()) + ":" + annotation.value() + " -> " + clazz.getClass().getName(), exception);
        }
      }

      logger.hint("ÂêØÂä®ËøáÊª§Âô®");

      for (Filter annotation : SORTED_FILTER) {
        EventHandlerFilter clazz = COMPONENT_FILTER_INSTANCE.get(annotation);
        logger.info("ÂêØÂä®ËøáÊª§Âô®" + annotation.value() + "[" + annotation.priority() + "] -> " + clazz.getClass().getName());
        try {
          clazz.bootWrapper();
        } catch (Exception exception) {
          throw new SchemaException("ÂêØÂä®ËøáÊª§Âô®Â§±Ë¥• " + MODULE_PLUGIN_RELATION.get(annotation.value()) + ":" + annotation.value() + " -> " + clazz.getClass().getName(), exception);
        }
      }

      logger.hint("ÂêØÂä®ÁõëÂê¨Âô®");

      for (Monitor annotation : SORTED_MONITOR) {
        EventHandlerMonitor clazz = COMPONENT_MONITOR_INSTANCE.get(annotation);
        logger.info("ÂêØÂä®ÁõëÂê¨Âô®" + annotation.value() + "[" + annotation.priority() + "] -> " + clazz.getClass().getName());
        try {
          clazz.bootWrapper();
        } catch (Exception exception) {
          throw new SchemaException("ÂêØÂä®ÁõëÂê¨Âô®Â§±Ë¥• " + MODULE_PLUGIN_RELATION.get(annotation.value()) + ":" + annotation.value() + " -> " + clazz.getClass().getName(), exception);
        }
      }

      logger.hint("ÂêØÂä®Ê£ÄÊü•Âô®");

      for (Checker annotation : SORTED_CHECKER) {
        EventHandlerChecker clazz = COMPONENT_CHECKER_INSTANCE.get(annotation);
        logger.info("ÂêØÂä®Ê£ÄÊü•Âô®" + annotation.value() + "[" + annotation.priority() + "] -> " + clazz.getClass().getName());
        try {
          clazz.bootWrapper();
        } catch (Exception exception) {
          throw new SchemaException("ÂêØÂä®Ê£ÄÊü•Âô®Â§±Ë¥• " + MODULE_PLUGIN_RELATION.get(annotation.value()) + ":" + annotation.value() + " -> " + clazz.getClass().getName(), exception);
        }
      }

      logger.hint("ÂêØÂä®ÊâßË°åÂô®");

      for (Map.Entry<Executor, EventHandlerExecutor> entry : COMPONENT_EXECUTOR_INSTANCE.entrySet()) {
        Executor annotation = entry.getKey();
        EventHandlerExecutor clazz = entry.getValue();
        logger.info("ÂêØÂä®ÊâßË°åÂô®" + annotation.value() + "[" + annotation.command() + "] -> " + clazz.getClass().getName());
        try {
          clazz.bootWrapper();
        } catch (Exception exception) {
          throw new SchemaException("ÂêØÂä®ÊâßË°åÂô®Â§±Ë¥• " + MODULE_PLUGIN_RELATION.get(annotation.value()) + ":" + annotation.value() + " -> " + clazz.getClass().getName(), exception);
        }
      }
    }

    //= ========================================================================
    //=  ÂÖ≥Èó≠Ê®°Âùó

    public void shutModule() {

      logger.hint("ÂÖ≥Èó≠ÊâßË°åÂô®");

      for (Map.Entry<Executor, EventHandlerExecutor> entry : COMPONENT_EXECUTOR_INSTANCE.entrySet()) {
        Executor annotation = entry.getKey();
        EventHandlerExecutor instance = entry.getValue();
        try {
          if (SHUTDOWN_DROP) {
            logger.info("‰∏¢ÂºÉÊâßË°åÂô®" + annotation.value() + "[" + annotation.command() + "] -> " + instance.getClass().getName());
            Thread thread = new Thread(instance::shutWrapper);
            thread.setDaemon(true);
            thread.start();
          } else {
            logger.info("ÂÖ≥Èó≠ÊâßË°åÂô®" + annotation.value() + "[" + annotation.command() + "] -> " + instance.getClass().getName());
            instance.shutWrapper();
          }
        } catch (Exception exception) {
          logger.warn("ÂÖ≥Èó≠ÊâßË°åÂô®ÂºÇÂ∏∏" + annotation.value() + "[" + annotation.command() + "] -> " + instance.getClass().getName(), exception);
        }
      }

      logger.hint("ÂÖ≥Èó≠Ê£ÄÊü•Âô®");

      List<Checker> checkers = new ArrayList<>(SORTED_CHECKER);
      Collections.reverse(checkers);
      for (Checker annotation : checkers) {
        EventHandlerChecker instance = COMPONENT_CHECKER_INSTANCE.get(annotation);
        try {
          if (SHUTDOWN_DROP) {
            logger.info("‰∏¢ÂºÉÊ£ÄÊü•Âô®" + annotation.value() + "[" + annotation.command() + "/" + annotation.priority() + "] -> " + instance.getClass().getName());
            Thread thread = new Thread(instance::shutWrapper);
            thread.setDaemon(true);
            thread.start();
          } else {
            logger.info("ÂÖ≥Èó≠Ê£ÄÊü•Âô®" + annotation.value() + "[" + annotation.command() + "/" + annotation.priority() + "] -> " + instance.getClass().getName());
            instance.shutWrapper();
          }
        } catch (Exception exception) {
          logger.warn("ÂÖ≥Èó≠Ê£ÄÊü•Âô®ÂºÇÂ∏∏" + annotation.value() + "[" + annotation.command() + "/" + annotation.priority() + "] -> " + instance.getClass().getName(), exception);
        }
      }

      logger.hint("ÂÖ≥Èó≠ÁõëÂê¨Âô®");

      List<Monitor> monitors = new ArrayList<>(SORTED_MONITOR);
      Collections.reverse(monitors);
      for (Monitor annotation : monitors) {
        EventHandlerMonitor instance = COMPONENT_MONITOR_INSTANCE.get(annotation);
        try {
          if (SHUTDOWN_DROP) {
            logger.info("‰∏¢ÂºÉÊ£ÄÊü•Âô®" + annotation.value() + "[" + annotation.priority() + "] -> " + instance.getClass().getName());
            Thread thread = new Thread(instance::shutWrapper);
            thread.setDaemon(true);
            thread.start();
          } else {
            logger.info("ÂÖ≥Èó≠Ê£ÄÊü•Âô®" + annotation.value() + "[" + annotation.priority() + "] -> " + instance.getClass().getName());
            instance.shutWrapper();
          }
        } catch (Exception exception) {
          logger.warn("ÂÖ≥Èó≠Ê£ÄÊü•Âô®ÂºÇÂ∏∏" + annotation.value() + "[" + annotation.priority() + "] -> " + instance.getClass().getName(), exception);
        }
      }

      logger.hint("ÂÖ≥Èó≠ËøáÊª§Âô®");

      List<Filter> filters = new ArrayList<>(SORTED_FILTER);
      Collections.reverse(filters);
      for (Filter annotation : filters) {
        EventHandlerFilter instance = COMPONENT_FILTER_INSTANCE.get(annotation);
        try {
          if (SHUTDOWN_DROP) {
            logger.info("‰∏¢ÂºÉËøáÊª§Âô®" + annotation.value() + "[" + annotation.priority() + "] -> " + instance.getClass().getName());
            Thread thread = new Thread(instance::shutWrapper);
            thread.setDaemon(true);
            thread.start();
          } else {
            logger.info("ÂÖ≥Èó≠ËøáÊª§Âô®" + annotation.value() + "[" + annotation.priority() + "] -> " + instance.getClass().getName());
            instance.shutWrapper();
          }
        } catch (Exception exception) {
          logger.warn("ÂÖ≥Èó≠ËøáÊª§Âô®ÂºÇÂ∏∏" + annotation.value() + "[" + annotation.priority() + "] -> " + instance.getClass().getName(), exception);
        }
      }

      logger.hint("ÂÖ≥Èó≠ÂÆöÊó∂Âô®");

      List<Runner> runners = new ArrayList<>(SORTED_RUNNER);
      Collections.reverse(runners);
      for (Runner annotation : runners) {
        EventHandlerRunner instance = COMPONENT_RUNNER_INSTANCE.get(annotation);
        try {
          if (SHUTDOWN_DROP) {
            logger.info("‰∏¢ÂºÉÂÆöÊó∂Âô®" + annotation.value() + "[" + annotation.priority() + "] -> " + instance.getClass().getName());
            Thread thread = new Thread(instance::shutWrapper);
            thread.setDaemon(true);
            thread.start();
          } else {
            logger.info("ÂÖ≥Èó≠ÂÆöÊó∂Âô®" + annotation.value() + "[" + annotation.priority() + "] -> " + instance.getClass().getName());
            instance.shutWrapper();
          }
        } catch (Exception exception) {
          logger.warn("ÂÖ≥Èó≠ÂÆöÊó∂Âô®ÂºÇÂ∏∏" + annotation.value() + "[" + annotation.priority() + "] -> " + instance.getClass().getName(), exception);
        }
      }

    }

    //= ========================================================================
    //= Ê®°ÂùóÁÆ°ÁêÜ
    //= ========================================================================

    //= ========================================================================
    //=  Êü•ËØ¢Ê®°Âùó

    public Set<Map.Entry<String, Plugin>> getAllPlugin() {
      return plugins.entrySet();
    }

    public Set<String> listModuleName() {
      return modules.keySet();
    }

    public Map<Runner, Boolean> listRunner() {
      Map<Runner, Boolean> result = new LinkedHashMap<>();
      for (Runner annotation : COMPONENT_RUNNER_CLAZZ.keySet()) {
        result.put(annotation, COMPONENT_RUNNER_INSTANCE.containsKey(annotation));
      }
      return result;
    }

    public Map<Filter, Boolean> listFilter() {
      Map<Filter, Boolean> result = new LinkedHashMap<>();
      for (Filter annotation : COMPONENT_FILTER_CLAZZ.keySet()) {
        result.put(annotation, COMPONENT_FILTER_INSTANCE.containsKey(annotation));
      }
      return result;
    }

    public Map<Monitor, Boolean> listMonitor() {
      Map<Monitor, Boolean> result = new LinkedHashMap<>();
      for (Monitor annotation : COMPONENT_MONITOR_CLAZZ.keySet()) {
        result.put(annotation, COMPONENT_MONITOR_INSTANCE.containsKey(annotation));
      }
      return result;
    }

    public Map<Checker, Boolean> listChecker() {
      Map<Checker, Boolean> result = new LinkedHashMap<>();
      for (Checker annotation : COMPONENT_CHECKER_CLAZZ.keySet()) {
        result.put(annotation, COMPONENT_CHECKER_INSTANCE.containsKey(annotation));
      }
      return result;
    }

    public Map<Executor, Boolean> listExecutor() {
      Map<Executor, Boolean> result = new LinkedHashMap<>();
      for (Executor annotation : COMPONENT_EXECUTOR_CLAZZ.keySet()) {
        result.put(annotation, COMPONENT_EXECUTOR_INSTANCE.containsKey(annotation));
      }
      return result;
    }

    public List<Checker> listGlobalUsersChecker() {
      return GLOBAL_CHECKER_USERS_POOL.stream().map(item -> item.getClass().getAnnotation(Checker.class)).toList();
    }

    public List<Checker> listGlobalGroupChecker() {
      return GLOBAL_CHECKER_GROUP_POOL.stream().map(item -> item.getClass().getAnnotation(Checker.class)).toList();
    }

    public Map<String, List<Checker>> listCommandsUsersChecker() {
      Map<String, List<Checker>> result = new LinkedHashMap<>();
      for (Map.Entry<String, List<EventHandlerChecker>> entry : COMMAND_CHECKER_USERS_POOL.entrySet()) {
        var k = entry.getKey();
        var v = entry.getValue();
        List<Checker> collect = v.stream().map(item -> item.getClass().getAnnotation(Checker.class)).toList();
        result.put(k, collect);
      }
      return result;
    }

    public Map<String, List<Checker>> listCommandsGroupChecker() {
      Map<String, List<Checker>> result = new LinkedHashMap<>();
      for (Map.Entry<String, List<EventHandlerChecker>> entry : COMMAND_CHECKER_GROUP_POOL.entrySet()) {
        var k = entry.getKey();
        var v = entry.getValue();
        List<Checker> collect = v.stream().map(item -> item.getClass().getAnnotation(Checker.class)).toList();
        result.put(k, collect);
      }
      return result;
    }

    //= ========================================================================
    //=  È¢ÑËΩΩÊ®°ÂùóÊ®°Êùø

    private Class<? extends AbstractEventHandler> getModuleClass(String name) {

      if (!modules.containsKey(name)) return null;

      for (Map.Entry<Runner, Class<? extends EventHandlerRunner>> entry : COMPONENT_RUNNER_CLAZZ.entrySet()) {
        if (entry.getKey().value().equals(name)) return entry.getValue();
      }

      for (Map.Entry<Filter, Class<? extends EventHandlerFilter>> entry : COMPONENT_FILTER_CLAZZ.entrySet()) {
        if (entry.getKey().value().equals(name)) return entry.getValue();
      }

      for (Map.Entry<Monitor, Class<? extends EventHandlerMonitor>> entry : COMPONENT_MONITOR_CLAZZ.entrySet()) {
        if (entry.getKey().value().equals(name)) return entry.getValue();

      }

      for (Map.Entry<Checker, Class<? extends EventHandlerChecker>> entry : COMPONENT_CHECKER_CLAZZ.entrySet()) {
        if (entry.getKey().value().equals(name)) return entry.getValue();
      }

      for (Map.Entry<Executor, Class<? extends EventHandlerExecutor>> entry : COMPONENT_EXECUTOR_CLAZZ.entrySet()) {
        if (entry.getKey().value().equals(name)) return entry.getValue();
      }

      return null;
    }

    //= ========================================================================
    //=  Ëé∑ÂèñÊ®°ÂùóÂÆû‰æã

    private AbstractEventHandler getModuleInstanceEnsure(String name) {
      AbstractEventHandler instance = getModuleInstance(name);
      if (instance == null) {
        logger.info("Ê≤°ÊúâÊâæÂà∞Ê®°ÂùóÂÆû‰æã -> " + name + " " + (getModuleClass(name) == null ? "‰∏çÂ≠òÂú®" : "Êú™Âä†ËΩΩ"));
      }
      return instance;
    }

    private AbstractEventHandler getModuleInstance(String name) {

      if (!modules.containsKey(name)) {
        return null;
      }

      for (Map.Entry<Runner, EventHandlerRunner> entry : COMPONENT_RUNNER_INSTANCE.entrySet()) {
        if (entry.getKey().value().equals(name)) {
          return entry.getValue();
        }
      }

      for (Map.Entry<Filter, EventHandlerFilter> entry : COMPONENT_FILTER_INSTANCE.entrySet()) {
        if (entry.getKey().value().equals(name)) {
          return entry.getValue();
        }
      }

      for (Map.Entry<Monitor, EventHandlerMonitor> entry : COMPONENT_MONITOR_INSTANCE.entrySet()) {
        if (entry.getKey().value().equals(name)) {
          return entry.getValue();
        }
      }

      for (Map.Entry<Checker, EventHandlerChecker> entry : COMPONENT_CHECKER_INSTANCE.entrySet()) {
        if (entry.getKey().value().equals(name)) {
          return entry.getValue();
        }
      }

      for (Map.Entry<Executor, EventHandlerExecutor> entry : COMPONENT_EXECUTOR_INSTANCE.entrySet()) {
        if (entry.getKey().value().equals(name)) {
          return entry.getValue();
        }
      }

      return null;
    }

    //= ========================================================================
    //=  È¢ÑËΩΩÊ®°Âùó

    public void initModule(String name) {
      AbstractEventHandler moduleInstance = getModuleInstanceEnsure(name);
      if (moduleInstance == null)
        return;
      String instanceName = moduleInstance.getClass().getName();
      logger.info("È¢ÑËΩΩÊ®°Âùó " + name + " -> " + instanceName);
      try {
        moduleInstance.initWrapper();
      } catch (Exception exception) {
        logger.warn("È¢ÑËΩΩÊ®°ÂùóÂèëÁîüÈîôËØØ " + name + " " + instanceName, exception);
      }
    }

    //= ========================================================================
    //=  ÂêØÂä®Ê®°Âùó

    public void bootModule(String name) {
      AbstractEventHandler moduleInstance = getModuleInstanceEnsure(name);
      if (moduleInstance == null)
        return;
      String instanceName = moduleInstance.getClass().getName();
      logger.info("ÂêØÂä®Ê®°Âùó " + name + " -> " + instanceName);
      try {
        moduleInstance.bootWrapper();
      } catch (Exception exception) {
        logger.warn("ÂêØÂä®Ê®°ÂùóÂèëÁîüÈîôËØØ " + name + " " + instanceName, exception);
      }
    }

    //= ========================================================================
    //=  ÂÖ≥Èó≠Ê®°Âùó

    public void shutModule(String name) {
      AbstractEventHandler moduleInstance = getModuleInstanceEnsure(name);
      if (moduleInstance == null)
        return;
      String instanceName = moduleInstance.getClass().getName();
      logger.info("ÂÖ≥Èó≠Ê®°Âùó " + name + " -> " + instanceName);
      try {
        moduleInstance.shutWrapper();
      } catch (Exception exception) {
        logger.warn("ÂÖ≥Èó≠Ê®°ÂùóÂèëÁîüÈîôËØØ " + name + " " + instanceName, exception);
      }
    }

    //= ========================================================================
    //=  ÈáçÂêØÊ®°Âùó

    public void rebootModule(String name) {
      AbstractEventHandler moduleInstance = getModuleInstanceEnsure(name);
      if (moduleInstance == null)
        return;
      String instanceName = moduleInstance.getClass().getName();
      logger.info("ÈáçÂêØÊ®°Âùó " + name + " -> " + instanceName);
      try {
        moduleInstance.shutWrapper();
        moduleInstance.initWrapper();
        moduleInstance.bootWrapper();
      } catch (Exception exception) {
        logger.warn("ÈáçÂêØÊ®°ÂùóÂèëÁîüÈîôËØØ " + name + " " + instanceName, exception);
      }
    }

    //= ========================================================================
    //=  Âç∏ËΩΩÊ®°Âùó

    public void unloadModule(String name) {

      Class<? extends AbstractEventHandler> clazz = modules.get(name);

      if (clazz == null) {
        logger.warn("‰∏çÂ≠òÂú®Ê≠§ÂêçÁß∞ÁöÑÊ®°Âùó -> " + name);
        return;
      }

      for (Map.Entry<Runner, EventHandlerRunner> entry : COMPONENT_RUNNER_INSTANCE.entrySet()) {
        if (entry.getKey().value().equals(name)) {
          unloadModule(entry.getKey());
          return;
        }
      }

      for (Map.Entry<Filter, EventHandlerFilter> entry : COMPONENT_FILTER_INSTANCE.entrySet()) {
        if (entry.getKey().value().equals(name)) {
          unloadModule(entry.getKey());
          return;
        }
      }

      for (Map.Entry<Monitor, EventHandlerMonitor> entry : COMPONENT_MONITOR_INSTANCE.entrySet()) {
        if (entry.getKey().value().equals(name)) {
          unloadModule(entry.getKey());
          return;
        }
      }

      for (Map.Entry<Checker, EventHandlerChecker> entry : COMPONENT_CHECKER_INSTANCE.entrySet()) {
        if (entry.getKey().value().equals(name)) {
          unloadModule(entry.getKey());
          return;
        }
      }

      for (Map.Entry<Executor, EventHandlerExecutor> entry : COMPONENT_EXECUTOR_INSTANCE.entrySet()) {
        if (entry.getKey().value().equals(name)) {
          unloadModule(entry.getKey());
          return;
        }
      }

      logger.warn("Ê≠§ÂêçÁß∞ÁöÑÊ®°ÂùóÊú™Âä†ËΩΩ -> " + name);

    }

    private void unloadModule(Runner annotation) {
      EventHandlerRunner instance = COMPONENT_RUNNER_INSTANCE.remove(annotation);
      instance.setEnable(false);
      instance.shutWrapper();
      logger.info("ÂÆöÊó∂Âô®Â∑≤Âç∏ËΩΩ -> " + printAnnotation(annotation));
    }

    private void unloadModule(Filter annotation) {
      EventHandlerFilter instance = COMPONENT_FILTER_INSTANCE.remove(annotation);
      instance.setEnable(false);
      if (annotation.users())
        FILTER_USERS_CHAIN.remove(instance);
      if (annotation.group())
        FILTER_GROUP_CHAIN.remove(instance);
      instance.shutWrapper();
      logger.info("ËøáÊª§Âô®Â∑≤Âç∏ËΩΩ -> " + printAnnotation(annotation));
    }

    private void unloadModule(Monitor annotation) {
      EventHandlerMonitor instance = COMPONENT_MONITOR_INSTANCE.remove(annotation);
      instance.setEnable(false);
      if (annotation.users())
        MONITOR_USERS_CHAIN.remove(instance);
      if (annotation.group())
        MONITOR_GROUP_CHAIN.remove(instance);
      instance.shutWrapper();
      logger.info("ÁõëÂê¨Âô®Â∑≤Âç∏ËΩΩ -> " + printAnnotation(annotation));
    }

    private void unloadModule(Checker annotation) {
      EventHandlerChecker instance = COMPONENT_CHECKER_INSTANCE.remove(annotation);
      instance.setEnable(false);
      if (annotation.users()) {
        if ("*".equals(annotation.command())) {
          GLOBAL_CHECKER_USERS_POOL.remove(instance);
        } else {
          COMMAND_CHECKER_USERS_POOL.get(annotation.command()).remove(instance);
        }
      }
      if (annotation.group()) {
        if ("*".equals(annotation.command())) {
          GLOBAL_CHECKER_GROUP_POOL.remove(instance);
        } else {
          COMMAND_CHECKER_GROUP_POOL.get(annotation.command()).remove(instance);
        }
      }
      instance.shutWrapper();
      logger.info("Ê£ÄÊü•Âô®Â∑≤Âç∏ËΩΩ -> " + printAnnotation(annotation));
    }

    private void unloadModule(Executor annotation) {
      EventHandlerExecutor instance = COMPONENT_EXECUTOR_INSTANCE.remove(annotation);
      instance.setEnable(false);
      if (annotation.users())
        EXECUTOR_USERS_POOL.remove(annotation.command());
      if (annotation.group())
        EXECUTOR_GROUP_POOL.remove(annotation.command());
      COMMAND_EXECUTOR_RELATION.remove(annotation.command());
      instance.shutWrapper();
      logger.info("ÊâßË°åÂô®Â∑≤Âç∏ËΩΩ -> " + printAnnotation(annotation));
    }

    //= ========================================================================
    //= Ë∞ÉËØï‰ø°ÊÅØ
    //= ========================================================================

    @SuppressWarnings("DuplicatedCode")
    public String verboseStatus() {

      StringBuilder builder = new StringBuilder();

      builder.append(BRIGHT_MAGENTA).append(">> PLUGINS").append(RESET).append(LINE);

      for (Map.Entry<String, Plugin> entry : plugins.entrySet()) {
        var k = entry.getKey();
        var v = entry.getValue();
        builder
          .append(BRIGHT_CYAN)
          .append(k)
          .append(":")
          .append(toHumanHashCode(v))
          .append(" ")
          .append(v.getPath())
          .append(RESET)
          .append(LINE);
        for (Map.Entry<String, Class<? extends AbstractEventHandler>> classEntry : v.getModules().entrySet()) {
          var classK = classEntry.getKey();
          var classV = classEntry.getValue();
          builder
            .append(classK)
            .append(" -> ")
            .append(classV.getName())
            .append(":")
            .append(toHumanHashCode(classV))
            .append(LINE);
        }
      }

      builder.append(BRIGHT_MAGENTA).append(">> MODULES").append(RESET).append(LINE);

      for (Map.Entry<String, Class<? extends AbstractEventHandler>> entry : modules.entrySet()) {
        var k = entry.getKey();
        var v = entry.getValue();
        builder
          .append(k)
          .append(" -> ")
          .append(v.getName())
          .append(":")
          .append(toHumanHashCode(v))
          .append(LINE);
      }

      builder.append(BRIGHT_MAGENTA).append(">> MODULE_PLUGIN_RELATION").append(RESET).append(LINE);

      for (Map.Entry<String, String> entry : MODULE_PLUGIN_RELATION.entrySet()) {
        var k = entry.getKey();
        var v = entry.getValue();
        builder
          .append(k)
          .append(" -> ")
          .append(v)
          .append(LINE);
      }

      builder.append(BRIGHT_CYAN).append(">> COMPONENT_RUNNER_CLAZZ").append(RESET).append(LINE);

      for (Map.Entry<Runner, Class<? extends EventHandlerRunner>> entry : COMPONENT_RUNNER_CLAZZ.entrySet()) {
        var k = entry.getKey();
        var v = entry.getValue();
        builder
          .append(printAnnotation(k))
          .append(":")
          .append(toHumanHashCode(k))
          .append(" -> ")
          .append(v.getName())
          .append(":")
          .append(toHumanHashCode(v))
          .append(LINE);
      }

      builder.append(BRIGHT_CYAN).append(">> COMPONENT_FILTER_CLAZZ").append(RESET).append(LINE);

      for (Map.Entry<Filter, Class<? extends EventHandlerFilter>> entry : COMPONENT_FILTER_CLAZZ.entrySet()) {
        var k = entry.getKey();
        var v = entry.getValue();
        builder
          .append(printAnnotation(k))
          .append(":")
          .append(toHumanHashCode(k))
          .append(" -> ")
          .append(v.getName())
          .append(":")
          .append(toHumanHashCode(v))
          .append(LINE);
      }

      builder.append(BRIGHT_CYAN).append(">> COMPONENT_MONITOR_CLAZZ").append(RESET).append(LINE);

      for (Map.Entry<Monitor, Class<? extends EventHandlerMonitor>> entry : COMPONENT_MONITOR_CLAZZ.entrySet()) {
        var k = entry.getKey();
        var v = entry.getValue();
        builder
          .append(printAnnotation(k))
          .append(":")
          .append(toHumanHashCode(k))
          .append(" -> ")
          .append(v.getName())
          .append(":")
          .append(toHumanHashCode(v))
          .append(LINE);
      }

      builder.append(BRIGHT_CYAN).append(">> COMPONENT_CHECKER_CLAZZ").append(RESET).append(LINE);

      for (Map.Entry<Checker, Class<? extends EventHandlerChecker>> entry : COMPONENT_CHECKER_CLAZZ.entrySet()) {
        var k = entry.getKey();
        var v = entry.getValue();
        builder
          .append(printAnnotation(k))
          .append(":")
          .append(toHumanHashCode(k))
          .append(" -> ")
          .append(v.getName())
          .append(":")
          .append(toHumanHashCode(v))
          .append(LINE);
      }

      builder.append(BRIGHT_CYAN).append(">> COMPONENT_EXECUTOR_CLAZZ").append(RESET).append(LINE);

      for (Map.Entry<Executor, Class<? extends EventHandlerExecutor>> entry : COMPONENT_EXECUTOR_CLAZZ.entrySet()) {
        var k = entry.getKey();
        var v = entry.getValue();
        builder
          .append(printAnnotation(k))
          .append(":")
          .append(toHumanHashCode(k))
          .append(" -> ")
          .append(v.getName())
          .append(":")
          .append(toHumanHashCode(v))
          .append(LINE);
      }

      builder.append(BRIGHT_CYAN).append(">> SORTED_RUNNER").append(RESET).append(LINE);

      for (Runner entry : SORTED_RUNNER) {
        builder
          .append(printAnnotation(entry))
          .append(":")
          .append(toHumanHashCode(entry))
          .append(LINE);
      }

      builder.append(BRIGHT_CYAN).append(">> SORTED_FILTER").append(RESET).append(LINE);

      for (Filter entry : SORTED_FILTER) {
        builder
          .append(printAnnotation(entry))
          .append(":")
          .append(toHumanHashCode(entry))
          .append(LINE);
      }

      builder.append(BRIGHT_CYAN).append(">> SORTED_MONITOR").append(RESET).append(LINE);

      for (Monitor entry : SORTED_MONITOR) {
        builder
          .append(printAnnotation(entry))
          .append(":")
          .append(toHumanHashCode(entry))
          .append(LINE);
      }

      builder.append(BRIGHT_CYAN).append(">> SORTED_CHECKER").append(RESET).append(LINE);

      for (Checker entry : SORTED_CHECKER) {
        builder
          .append(printAnnotation(entry))
          .append(":")
          .append(toHumanHashCode(entry))
          .append(LINE);
      }

      builder.append(BRIGHT_CYAN).append(">> COMPONENT_RUNNER_INSTANCE").append(RESET).append(LINE);

      for (Map.Entry<Runner, EventHandlerRunner> entry : COMPONENT_RUNNER_INSTANCE.entrySet()) {
        var k = entry.getKey();
        var v = entry.getValue();
        builder
          .append(printAnnotation(k))
          .append(":")
          .append(toHumanHashCode(k))
          .append(" -> ")
          .append(v.getClass().getName())
          .append(":")
          .append(toHumanHashCode(v))
          .append(LINE);
      }

      builder.append(BRIGHT_CYAN).append(">> COMPONENT_FILTER_INSTANCE").append(RESET).append(LINE);

      for (Map.Entry<Filter, EventHandlerFilter> entry : COMPONENT_FILTER_INSTANCE.entrySet()) {
        var k = entry.getKey();
        var v = entry.getValue();
        builder
          .append(printAnnotation(k))
          .append(":")
          .append(toHumanHashCode(k))
          .append(" -> ")
          .append(v.getClass().getName())
          .append(":")
          .append(toHumanHashCode(v))
          .append(LINE);
      }

      builder.append(BRIGHT_CYAN).append(">> COMPONENT_MONITOR_INSTANCE").append(RESET).append(LINE);

      for (Map.Entry<Monitor, EventHandlerMonitor> entry : COMPONENT_MONITOR_INSTANCE.entrySet()) {
        var k = entry.getKey();
        var v = entry.getValue();
        builder
          .append(printAnnotation(k))
          .append(":")
          .append(toHumanHashCode(k))
          .append(" -> ")
          .append(v.getClass().getName())
          .append(":")
          .append(toHumanHashCode(v))
          .append(LINE);
      }

      builder.append(BRIGHT_CYAN).append(">> COMPONENT_CHECKER_INSTANCE").append(RESET).append(LINE);

      for (Map.Entry<Checker, EventHandlerChecker> entry : COMPONENT_CHECKER_INSTANCE.entrySet()) {
        var k = entry.getKey();
        var v = entry.getValue();
        builder
          .append(printAnnotation(k))
          .append(":")
          .append(toHumanHashCode(k))
          .append(" -> ")
          .append(v.getClass().getName())
          .append(":")
          .append(toHumanHashCode(v))
          .append(LINE);
      }

      builder.append(BRIGHT_CYAN).append(">> COMPONENT_EXECUTOR_INSTANCE").append(RESET).append(LINE);

      for (Map.Entry<Executor, EventHandlerExecutor> entry : COMPONENT_EXECUTOR_INSTANCE.entrySet()) {
        var k = entry.getKey();
        var v = entry.getValue();
        builder
          .append(printAnnotation(k))
          .append(":")
          .append(toHumanHashCode(k))
          .append(" -> ")
          .append(v.getClass().getName())
          .append(":")
          .append(toHumanHashCode(v))
          .append(LINE);
      }

      builder.append(BRIGHT_CYAN).append(">> FILTER_USERS_CHAIN").append(RESET).append(LINE);

      for (EventHandlerFilter item : FILTER_USERS_CHAIN) {
        builder
          .append(item.getClass().getName())
          .append(":")
          .append(toHumanHashCode(item))
          .append(LINE);
      }

      builder.append(BRIGHT_CYAN).append(">> FILTER_GROUP_CHAIN").append(RESET).append(LINE);

      for (EventHandlerFilter item : FILTER_GROUP_CHAIN) {
        builder
          .append(item.getClass().getName())
          .append(":")
          .append(toHumanHashCode(item))
          .append(LINE);
      }

      builder.append(BRIGHT_CYAN).append(">> MONITOR_USERS_CHAIN").append(RESET).append(LINE);

      for (EventHandlerMonitor item : MONITOR_USERS_CHAIN) {
        builder
          .append(item.getClass().getName())
          .append(":")
          .append(toHumanHashCode(item))
          .append(LINE);
      }

      builder.append(BRIGHT_CYAN).append(">> MONITOR_GROUP_CHAIN").append(RESET).append(LINE);

      for (EventHandlerMonitor item : MONITOR_GROUP_CHAIN) {
        builder
          .append(item.getClass().getName())
          .append(":")
          .append(toHumanHashCode(item))
          .append(LINE);
      }

      builder.append(BRIGHT_CYAN).append(">> GLOBAL_CHECKER_USERS_POOL").append(RESET).append(LINE);

      for (EventHandlerChecker item : GLOBAL_CHECKER_USERS_POOL) {
        builder
          .append(item.getClass().getName())
          .append(":")
          .append(toHumanHashCode(item))
          .append(LINE);
      }

      builder.append(BRIGHT_CYAN).append(">> GLOBAL_CHECKER_GROUP_POOL").append(RESET).append(LINE);

      for (EventHandlerChecker item : GLOBAL_CHECKER_GROUP_POOL) {
        builder
          .append(item.getClass().getName())
          .append(":")
          .append(toHumanHashCode(item))
          .append(LINE);
      }

      builder.append(BRIGHT_CYAN).append(">> COMMAND_CHECKER_USERS_POOL").append(RESET).append(LINE);

      for (Map.Entry<String, List<EventHandlerChecker>> entry : COMMAND_CHECKER_USERS_POOL.entrySet()) {
        var k = entry.getKey();
        var v = entry.getValue();
        builder
          .append(CYAN)
          .append(k)
          .append(RESET)
          .append(" ")
          .append(v.size())
          .append(LINE);
        for (EventHandlerChecker checker : v) {
          builder
            .append(checker.getClass().getName())
            .append(":")
            .append(toHumanHashCode(checker))
            .append(LINE);
        }
      }

      builder.append(BRIGHT_CYAN).append(">> COMMAND_CHECKER_GROUP_POOL").append(RESET).append(LINE);

      for (Map.Entry<String, List<EventHandlerChecker>> entry : COMMAND_CHECKER_GROUP_POOL.entrySet()) {
        var k = entry.getKey();
        var v = entry.getValue();
        builder
          .append(CYAN)
          .append(k)
          .append(RESET)
          .append(" ")
          .append(v.size())
          .append(LINE);
        for (EventHandlerChecker checker : v) {
          builder
            .append(checker.getClass().getName())
            .append(":")
            .append(toHumanHashCode(checker))
            .append(LINE);
        }
      }

      builder.append(BRIGHT_CYAN).append(">> EXECUTOR_USERS_POOL").append(RESET).append(LINE);

      for (Map.Entry<String, EventHandlerExecutor> entry : EXECUTOR_USERS_POOL.entrySet()) {
        var k = entry.getKey();
        var v = entry.getValue();
        builder
          .append(k)
          .append(" -> ")
          .append(v.getClass().getName())
          .append(":")
          .append(toHumanHashCode(v))
          .append(LINE);
      }

      builder.append(BRIGHT_CYAN).append(">> EXECUTOR_GROUP_POOL").append(RESET).append(LINE);

      for (Map.Entry<String, EventHandlerExecutor> entry : EXECUTOR_GROUP_POOL.entrySet()) {
        var k = entry.getKey();
        var v = entry.getValue();
        builder
          .append(k)
          .append(" -> ")
          .append(v.getClass().getName())
          .append(":")
          .append(toHumanHashCode(v))
          .append(LINE);
      }

      builder.append(BRIGHT_CYAN).append(">> COMMAND_EXECUTOR_RELATION").append(RESET).append(LINE);

      for (Map.Entry<String, Executor> entry : COMMAND_EXECUTOR_RELATION.entrySet()) {
        var k = entry.getKey();
        var v = entry.getValue();
        builder
          .append(CYAN)
          .append(k)
          .append(RESET)
          .append(" -> ")
          .append(v.value())
          .append(":")
          .append(toHumanHashCode(v))
          .append(" {")
          .append(v.users() ? "U" : "")
          .append(v.group() ? "G" : "")
          .append("} ")
          .append(v.outline())
          .append(":")
          .append(v.description())
          .append(LINE);
        for (String temp : v.usage()) {
          builder
            .append(temp)
            .append(LINE);
        }
        for (String temp : v.privacy()) {
          builder
            .append(temp)
            .append(LINE);
        }
      }

      return builder.toString();

    }

    private static final class Plugin {

      private static final Pattern PATTERN = Pattern.compile("^[\\da-z_-]{8,64}$");

      private final LoggerX logger;

      private final Path path;
      private final String name;

      private URLClassLoader dependClassLoader;
      private URLClassLoader pluginClassLoader;

      private Map<String, Class<? extends AbstractEventHandler>> modules;
      private Map<Runner, Class<? extends EventHandlerRunner>> runnerClassMap;
      private Map<Filter, Class<? extends EventHandlerFilter>> filterClassMap;
      private Map<Monitor, Class<? extends EventHandlerMonitor>> monitorClassMap;
      private Map<Checker, Class<? extends EventHandlerChecker>> checkerClassMap;
      private Map<Executor, Class<? extends EventHandlerExecutor>> executorClassMap;

      public static Plugin load(Path path) {

        String name;

        try (JarFile jarFile = new JarFile(path.toFile())) {

          Manifest manifest;
          try {
            manifest = jarFile.getManifest();
          } catch (IOException exception) {
            throw new SchemaException("Âä†ËΩΩMANIFESTÂ§±Ë¥• -> " + path, exception);
          }

          Attributes attributes = manifest.getAttributes("FurryBlack-Extension");
          if (attributes == null || attributes.isEmpty()) {
            throw new SchemaException("Âä†ËΩΩÊèí‰ª∂Â§±Ë¥•: MANIFEST‰∏çÂåÖÂê´FurryBlack-ExtensionÊ†áÁ≠æÁªÑ");
          }

          String loaderVersion = attributes.getValue("Loader-Version");

          if (loaderVersion == null) {
            throw new SchemaException("Âä†ËΩΩÊèí‰ª∂Â§±Ë¥•: MANIFEST‰∏≠FurryBlack-ExtensionÊ†áÁ≠æÁªÑ‰∏çÂê´Loader-Version");
          }

          if (!"1".equals(loaderVersion)) {
            throw new SchemaException("Âä†ËΩΩÊèí‰ª∂Â§±Ë¥•: Âä†ËΩΩÂô®ÁâàÊú¨‰∏çÁ¨¶, Ê≠§Êèí‰ª∂Â£∞ÊòéÂÖ∂ÁâàÊú¨‰∏∫ " + loaderVersion);
          }

          name = attributes.getValue("Extension-Name");

          if (name == null) {
            throw new SchemaException("Âä†ËΩΩÊèí‰ª∂Â§±Ë¥•: MANIFEST‰∏≠FurryBlack-ExtensionÊ†áÁ≠æÁªÑ‰∏çÂê´Extension-Name");
          }

          if (!PATTERN.matcher(name).find()) {
            throw new SchemaException("Âä†ËΩΩÊèí‰ª∂Â§±Ë¥•: Êèí‰ª∂ÂåÖÂêçÈùûÊ≥ï, Ê≠§Êèí‰ª∂Â£∞ÊòéÂÖ∂ÂêçÁß∞‰∏∫ " + name);
          }

        } catch (IOException | SchemaException exception) {
          throw new SchemaException(exception);
        }

        Plugin plugin;
        try {
          plugin = new Plugin(path, name);
        } catch (Exception exception) {
          throw new SchemaException(exception);
        }
        return plugin;
      }

      //= ==================================================================================================================

      private Plugin(Path path, String name) {

        this.path = path;
        this.name = name;

        logger = LoggerXFactory.getLogger(name);

      }

      @SuppressWarnings("unchecked")
      public void scan() {

        //= ==================================================================================================================

        Path depend = FileEnhance.get(FOLDER_DEPEND, name);

        //= ==================================================================================================================

        List<URL> tempURL = new LinkedList<>();

        try (JarFile jarFile = new JarFile(path.toFile())) {

          if (Files.exists(depend)) {

            if (!Files.isDirectory(depend)) {
              throw new SchemaException("‰æùËµñÊñá‰ª∂‰∏çÊòØÁõÆÂΩï -> " + depend);
            }

            List<Path> dependFiles;

            try (Stream<Path> stream = Files.list(depend)) {
              dependFiles = stream.toList();
            } catch (IOException exception) {
              throw new SchemaException("ÂàóÂá∫‰æùËµñÊñá‰ª∂Â§±Ë¥• -> " + depend);
            }

            for (Path dependFile : dependFiles) {
              if (Files.isRegularFile(dependFile)) {
                URL url = dependFile.toUri().toURL();
                tempURL.add(url);
              }
            }
          }

          URL[] urls = tempURL.toArray(new URL[0]);

          logger.seek("Âä†ËΩΩ‰æùËµñ -> " + depend + "[" + urls.length + "]");

          dependClassLoader = new URLClassLoader(urls); // Inject with systemClassLoader in default

          URL pluginURL = path.toUri().toURL();

          pluginClassLoader = new URLClassLoader(new URL[]{pluginURL}, dependClassLoader);

          Map<String, Class<? extends EventHandlerExecutor>> commands = new HashMap<>();

          Enumeration<JarEntry> entries = jarFile.entries();

          //= ==================================================================================================================

          modules = new LinkedHashMap<>();
          runnerClassMap = new LinkedHashMap<>();
          filterClassMap = new LinkedHashMap<>();
          monitorClassMap = new LinkedHashMap<>();
          checkerClassMap = new LinkedHashMap<>();
          executorClassMap = new LinkedHashMap<>();

          //= ==================================================================================================================

          while (entries.hasMoreElements()) {

            JarEntry jarEntry = entries.nextElement();

            if (jarEntry.isDirectory()) {
              continue;
            }

            String jarEntryName = jarEntry.getName();

            if (!jarEntryName.endsWith(".class")) {
              continue;
            }

            String className = jarEntryName.substring(0, jarEntryName.length() - 6).replace("/", ".");

            //= ==================================================================================================================

            Class<?> clazz;

            try {
              clazz = Class.forName(className, false, pluginClassLoader);
            } catch (ClassNotFoundException exception) {
              logger.warn("Âä†ËΩΩÁ±ªÂ§±Ë¥• " + name + ":" + className, exception);
              continue;
            }

            if (!AbstractEventHandler.class.isAssignableFrom(clazz)) {
              continue;
            }

            String clazzName = clazz.getName();

            //= ==================================================================================================================

            if (EventHandlerRunner.class.isAssignableFrom(clazz)) {

              if (!clazz.isAnnotationPresent(Runner.class)) {
                logger.warn("ÂèëÁé∞Êó†Ê≥®Ëß£Ê®°Âùó ‰∏ç‰∫àÊ≥®ÂÜå " + name);
                continue;
              }

              Runner annotation = clazz.getAnnotation(Runner.class);

              String moduleName = annotation.value();

              if (modules.containsKey(moduleName)) {
                Class<? extends AbstractEventHandler> exist = modules.get(moduleName);
                logger.warn("ÂèëÁé∞Ëá™ÂÜ≤Á™Å " + clazz.getName() + " " + moduleName + " " + exist.getName());
                logger.warn("‰∏ç‰∫àÊ≥®ÂÜåÊèí‰ª∂ " + name);
                throw new SchemaException("ÂèëÁé∞ÂûÉÂúæÊèí‰ª∂ ÂåÖÂê´Ëá™ÂÜ≤Á™Å");
              }

              modules.put(moduleName, (Class<? extends AbstractEventHandler>) clazz);
              runnerClassMap.put(annotation, (Class<? extends EventHandlerRunner>) clazz);
              logger.info("ÂÆöÊó∂Âô® -> " + clazzName);

              continue;

            } else if (EventHandlerFilter.class.isAssignableFrom(clazz)) {

              if (!clazz.isAnnotationPresent(Filter.class)) {
                logger.warn("ÂèëÁé∞Êó†Ê≥®Ëß£Ê®°Âùó ‰∏ç‰∫àÊ≥®ÂÜå " + name);
                continue;
              }

              Filter annotation = clazz.getAnnotation(Filter.class);

              String moduleName = annotation.value();

              if (modules.containsKey(moduleName)) {
                Class<? extends AbstractEventHandler> exist = modules.get(moduleName);
                logger.warn("ÂèëÁé∞Ëá™ÂÜ≤Á™Å " + clazz.getName() + " " + moduleName + " " + exist.getName());
                logger.warn("‰∏ç‰∫àÊ≥®ÂÜåÊèí‰ª∂ " + name);
                throw new SchemaException("ÂèëÁé∞ÂûÉÂúæÊèí‰ª∂ ÂåÖÂê´Ëá™ÂÜ≤Á™Å");
              }

              if (annotation.users() || annotation.group()) {
                modules.put(moduleName, (Class<? extends AbstractEventHandler>) clazz);
                filterClassMap.put(annotation, (Class<? extends EventHandlerFilter>) clazz);
                logger.info("ËøáÊª§Âô® -> " + clazzName);
              } else {
                logger.warn("ÂèëÁé∞Êú™ÂêØÁî®ËøáÊª§Âô® " + clazzName);
              }

              continue;

            } else if (EventHandlerMonitor.class.isAssignableFrom(clazz)) {

              if (!clazz.isAnnotationPresent(Monitor.class)) {
                logger.warn("ÂèëÁé∞Êó†Ê≥®Ëß£Ê®°Âùó ‰∏ç‰∫àÊ≥®ÂÜå " + name);
                continue;
              }

              Monitor annotation = clazz.getAnnotation(Monitor.class);

              String moduleName = annotation.value();

              if (modules.containsKey(moduleName)) {
                Class<? extends AbstractEventHandler> exist = modules.get(moduleName);
                logger.warn("ÂèëÁé∞Ëá™ÂÜ≤Á™Å " + clazz.getName() + " " + moduleName + " " + exist.getName());
                logger.warn("‰∏ç‰∫àÊ≥®ÂÜåÊèí‰ª∂ " + name);
                throw new SchemaException("ÂèëÁé∞ÂûÉÂúæÊèí‰ª∂ ÂåÖÂê´Ëá™ÂÜ≤Á™Å");
              }

              if (annotation.users() || annotation.group()) {
                modules.put(moduleName, (Class<? extends AbstractEventHandler>) clazz);
                monitorClassMap.put(annotation, (Class<? extends EventHandlerMonitor>) clazz);
                logger.info("ÁõëËßÜÂô® -> " + clazzName);
              } else {
                logger.warn("ÂèëÁé∞Êú™ÂêØÁî®ÁõëÂê¨Âô® " + clazz.getName());
              }

              continue;

            } else if (EventHandlerChecker.class.isAssignableFrom(clazz)) {

              if (!clazz.isAnnotationPresent(Checker.class)) {
                logger.warn("ÂèëÁé∞Êó†Ê≥®Ëß£Ê®°Âùó ‰∏ç‰∫àÊ≥®ÂÜå " + name);
                continue;
              }

              Checker annotation = clazz.getAnnotation(Checker.class);

              String moduleName = annotation.value();

              if (modules.containsKey(moduleName)) {
                Class<? extends AbstractEventHandler> exist = modules.get(moduleName);
                logger.warn("ÂèëÁé∞Ëá™ÂÜ≤Á™Å " + clazz.getName() + " " + moduleName + " " + exist.getName());
                logger.warn("‰∏ç‰∫àÊ≥®ÂÜåÊèí‰ª∂ " + name);
                throw new SchemaException("ÂèëÁé∞ÂûÉÂúæÊèí‰ª∂ ÂåÖÂê´Ëá™ÂÜ≤Á™Å");
              }

              if (annotation.users() || annotation.group()) {
                modules.put(moduleName, (Class<? extends AbstractEventHandler>) clazz);
                checkerClassMap.put(annotation, (Class<? extends EventHandlerChecker>) clazz);
                logger.info("Ê£ÄÊü•Âô® -> " + clazzName);
              } else {
                logger.warn("ÂèëÁé∞Êú™ÂêØÁî®Ê£ÄÊü•Âô® " + clazz.getName());
              }

              continue;

            } else if (EventHandlerExecutor.class.isAssignableFrom(clazz)) {

              if (!clazz.isAnnotationPresent(Executor.class)) {
                logger.warn("ÂèëÁé∞Êó†Ê≥®Ëß£Ê®°Âùó ‰∏ç‰∫àÊ≥®ÂÜå " + name);
                continue;
              }

              Executor annotation = clazz.getAnnotation(Executor.class);

              String moduleName = annotation.value();

              if (modules.containsKey(moduleName)) {
                Class<? extends AbstractEventHandler> exist = modules.get(moduleName);
                logger.warn("ÂèëÁé∞Ëá™ÂÜ≤Á™Å " + clazz.getName() + " " + moduleName + " " + exist.getName());
                logger.warn("‰∏ç‰∫àÊ≥®ÂÜåÊèí‰ª∂ " + name);
                throw new SchemaException("ÂèëÁé∞ÂûÉÂúæÊèí‰ª∂ ÂåÖÂê´Ëá™ÂÜ≤Á™Å");
              }

              String command = annotation.command();

              if (commands.containsKey(command)) {
                Class<? extends EventHandlerExecutor> exist = commands.get(command);
                logger.warn("ÂèëÁé∞Ëá™ÂÜ≤Á™ÅÂëΩ‰ª§ " + command + " " + clazz.getName() + " " + moduleName + " " + exist.getName());
                logger.warn("‰∏ç‰∫àÊ≥®ÂÜåÊèí‰ª∂ " + name);
                throw new SchemaException("ÂèëÁé∞ÂûÉÂúæÊèí‰ª∂ ÂåÖÂê´Ëá™ÂÜ≤Á™Å");
              }

              if (annotation.users() || annotation.group()) {
                commands.put(command, (Class<? extends EventHandlerExecutor>) clazz);
                modules.put(moduleName, (Class<? extends AbstractEventHandler>) clazz);
                executorClassMap.put(annotation, (Class<? extends EventHandlerExecutor>) clazz);
                logger.info("ÊâßË°åÂô® -> " + clazzName);
              } else {
                logger.warn("ÂèëÁé∞Êú™ÂêØÁî®ÊâßË°åÂô® " + clazzName);
              }

              continue;

            }

            logger.warn("‰∏çÊîØÊåÅËá™Ë°åÂàõÂª∫ÁöÑÂàÜÊîØÊ®°Âùó ‰∏ç‰∫àÊ≥®ÂÜå " + name + ":" + className);

          }

        } catch (IOException exception) {
          throw new SchemaException(exception);
        }
      }

      public String getName() {
        return name;
      }

      public Path getPath() {
        return path;
      }

      public Map<String, Class<? extends AbstractEventHandler>> getModules() {
        return modules;
      }

      public Map<Runner, Class<? extends EventHandlerRunner>> getRunnerClassMap() {
        return runnerClassMap;
      }

      public Map<Filter, Class<? extends EventHandlerFilter>> getFilterClassMap() {
        return filterClassMap;
      }

      public Map<Monitor, Class<? extends EventHandlerMonitor>> getMonitorClassMap() {
        return monitorClassMap;
      }

      public Map<Checker, Class<? extends EventHandlerChecker>> getCheckerClassMap() {
        return checkerClassMap;
      }

      public Map<Executor, Class<? extends EventHandlerExecutor>> getExecutorClassMap() {
        return executorClassMap;
      }

      public URLClassLoader getDependClassLoader() {
        return dependClassLoader;
      }

      @SuppressWarnings("unused")
      public URLClassLoader getPluginClassLoader() {
        return pluginClassLoader;
      }
    }

  }

  //= ==================================================================================================================
  //=
  //= ÊòµÁß∞Â≠êÁ≥ªÁªü
  //=
  //= ==================================================================================================================

  private static class Nickname {

    private static final LoggerX logger = LoggerXFactory.getLogger("Nickname");

    private final Map<Long, String> global;
    private final Map<Long, Map<Long, String>> groups;

    public static Nickname getInstance() {
      return new Nickname();
    }

    private Nickname() {
      global = new ConcurrentHashMap<>();
      groups = new ConcurrentHashMap<>();
    }

    private void cleanNickname() {
      global.clear();
      groups.clear();
    }

    private void appendNickname() {
      Path path = FileEnhance.get(FOLDER_CONFIG, "nickname.txt");
      List<String> nicknames;
      try {
        nicknames = Files.readAllLines(path, StandardCharsets.UTF_8);
      } catch (IOException exception) {
        throw new CoreException("ËØªÂèñÊòµÁß∞ÈÖçÁΩÆÊñá‰ª∂Â§±Ë¥• -> " + path, exception);
      }
      for (String line : nicknames) {
        String temp = line.trim();
        int indexOfDot = temp.indexOf(".");
        int indexOfColon = temp.indexOf(":");
        if (indexOfDot < 0) {
          logger.warn("ÈÖçÁΩÆÊó†Êïà " + line);
          continue;
        }
        if (indexOfColon < 0) {
          logger.warn("ÈÖçÁΩÆÊó†Êïà " + line);
          continue;
        }
        String group = line.substring(0, indexOfDot);
        String user = line.substring(indexOfDot + 1, indexOfColon);
        String nickname = line.substring(indexOfColon + 1);
        long userId = Long.parseLong(user);
        if ("*".equals(group)) {
          global.put(userId, nickname);
          logger.seek("ÂÖ®Â±Ä " + userId + " -> " + nickname);
        } else {
          long groupId = Long.parseLong(group);
          Map<Long, String> groupNicks = groups.computeIfAbsent(groupId, k -> new ConcurrentHashMap<>());
          groupNicks.put(userId, nickname);
          logger.seek("Áæ§ÂÜÖ " + groupId + "." + userId + " -> " + nickname);
        }
      }
    }

    private Map<Long, String> getNicknameGlobal() {
      return global;
    }

    private Map<Long, Map<Long, String>> getNicknameGroups() {
      return groups;
    }

    private String getUsersMappedNickName(User user) {
      return global.getOrDefault(user.getId(), user.getNick());
    }

    private String getUsersMappedNickName(long userId) {
      return global.getOrDefault(userId, Mirai.getInstance().queryProfile(bot, userId).getNickname());
    }

    private String getMemberMappedNickName(Member member) {
      Map<Long, String> groupMap = groups.get(member.getGroup().getId());
      if (groupMap != null) {
        String nickName = groupMap.get(member.getId());
        if (nickName != null)
          return nickName;
      }
      String nickName = global.get(member.getId());
      if (nickName != null)
        return nickName;
      String nameCard = member.getNameCard();
      if (nameCard.isBlank()) {
        return member.getNick();
      } else {
        return nameCard;
      }
    }

    private String getMemberMappedNickName(long groupId, long userId) {
      Map<Long, String> groupMap = groups.get(groupId);
      if (groupMap != null) {
        String nickName = groupMap.get(userId);
        if (nickName != null)
          return nickName;
      }
      String nickName = global.get(userId);
      if (nickName != null)
        return nickName;
      Member member = bot.getGroupOrFail(groupId).getOrFail(userId);
      String nameCard = member.getNameCard();
      if (nameCard.isBlank()) {
        return member.getNick();
      } else {
        return nameCard;
      }
    }

  }

  //= ==================================================================================================================
  //=
  //= ÈÖçÁΩÆÂ≠êÁ≥ªÁªü
  //=
  //= ==================================================================================================================

  //= ==================================================================================================================
  //= ÂèÇÊï∞Ê®°Âùó
  //= ==================================================================================================================

  private static class Argument {

    private final Properties properties;
    private final LinkedList<String> options;
    private final LinkedHashMap<String, String> parameters;

    //= ========================================================================
    //= ÂêçÁß∞ËΩ¨Êç¢

    /**
     * a,b,c -> a-b-c for args --a-b-c xxx
     */
    public static String toArgumentName(String... name) {
      String join = String.join("-", name);
      if (NAMESPACE == null)
        return join;
      return NAMESPACE + "-" + join;
    }

    /**
     * a,b,c -> a.b.c for system property -Da.b.c=xxx
     */
    public static String toPropertyName(String... name) {
      String join = String.join(".", name);
      if (NAMESPACE == null)
        return join;
      return NAMESPACE + "." + join;
    }

    /**
     * a,b,c -> A_B_C for envs export A_B_C=xxx
     */
    public static String toEnvironmentName(String... name) {
      String join = String.join("_", name);
      if (NAMESPACE == null)
        return join;
      return (NAMESPACE + "_" + join).toUpperCase();
    }

    /**
     * a,b,c -> a.b.c for property a.b.c=xxx no namespace
     */
    public static String toConfigName(String... name) {
      return String.join(".", name);
    }

    //= ========================================================================

    public static Argument parse(String[] arguments) {

      Argument instance = new Argument();
      int length = arguments.length;
      for (int i = 0; i < length; i++) {
        String argument = arguments[i].trim();
        if (argument.startsWith("--")) {
          if (i + 1 == length) {
            instance.options.add(argument.substring(2));
          } else {
            String next = arguments[i + 1];
            if (next.startsWith("--")) {
              instance.options.add(argument.substring(2));
            } else {
              instance.parameters.put(argument.substring(2), next);
              i++;
            }
          }
        } else {
          instance.options.add(argument);
        }
      }
      return instance;
    }

    //= ========================================================================

    private Argument() {
      options = new LinkedList<>();
      parameters = new LinkedHashMap<>();
      properties = new Properties();
    }

    //= ========================================================================

    public int optionSize() {
      return options.size();
    }

    public int parameterSize() {
      return parameters.size();
    }

    public LinkedList<String> cloneOptions() {
      return new LinkedList<>(options);
    }

    public LinkedHashMap<String, String> cloneParameters() {
      return new LinkedHashMap<>(parameters);
    }

    public void append(Object key, Object value) {
      properties.put(key.toString(), String.valueOf(value));
    }

    //= ========================================================================

    @Comment("ÁéØÂ¢ÉÂèòÈáè > Á≥ªÁªüÈÖçÁΩÆ > Á®ãÂ∫èÂèÇÊï∞ > ÈÖçÁΩÆÊñá‰ª∂")
    public boolean checkKernelOption(String... name) {
      if (System.getenv(toEnvironmentName(name)) != null) return true;
      if (System.getProperty(toPropertyName(name)) != null) return true;
      return options.contains(toArgumentName(name));
    }

    @Nullable
    @Comment("ÁéØÂ¢ÉÂèòÈáè > Á≥ªÁªüÈÖçÁΩÆ > Á®ãÂ∫èÂèÇÊï∞ > ÈÖçÁΩÆÊñá‰ª∂")
    public String getKernelParameter(String... name) {
      String value = System.getenv(toEnvironmentName(name));
      if (value != null) return value;
      value = System.getProperty(toPropertyName(name));
      if (value != null) return value;
      value = parameters.get(toArgumentName(name));
      if (value != null) return value;
      return null;
    }

    //= ========================================================================

    @Comment("ÁéØÂ¢ÉÂèòÈáè > Á≥ªÁªüÈÖçÁΩÆ > Á®ãÂ∫èÂèÇÊï∞ > ÈÖçÁΩÆÊñá‰ª∂")
    public boolean checkSystemOption(String... name) {
      if (System.getenv(toEnvironmentName(name)) != null) return true;
      if (System.getProperty(toPropertyName(name)) != null) return true;
      if (options.contains(toArgumentName(name))) return true;
      return properties.getProperty(toConfigName(name)) != null;
    }

    @Nullable
    @Comment("ÁéØÂ¢ÉÂèòÈáè > Á≥ªÁªüÈÖçÁΩÆ > Á®ãÂ∫èÂèÇÊï∞ > ÈÖçÁΩÆÊñá‰ª∂")
    public String getSystemParameter(String... name) {
      String value = System.getenv(toEnvironmentName(name));
      if (value != null) return value;
      value = System.getProperty(toPropertyName(name));
      if (value != null) return value;
      value = parameters.get(toArgumentName(name)); if (value != null) return value;
      value = properties.getProperty(toConfigName(name));
      if (value != null) return value;
      return null;
    }

    @Comment("ÁéØÂ¢ÉÂèòÈáè > unsafe(Á≥ªÁªüÈÖçÁΩÆ) > unsafe(Á®ãÂ∫èÂèÇÊï∞) > ÈÖçÁΩÆÊñá‰ª∂")
    public boolean checkSystemOptionSafe(String... name) {
      if (System.getenv(toEnvironmentName(name)) != null) return true;
      if (kernelConfig.unsafe) {
        if (System.getProperty(toPropertyName(name)) != null) {
          logger.warn("WARNING WARNING WARNING WARNING WARNING WARNING");
          logger.warn("‰ªéÁ≥ªÁªüÂ±ûÊÄßÂä†ËΩΩÁßÅÂØÜÈÖçÁΩÆÈùûÂ∏∏Âç±Èô©, Âº∫ÁÉàÂª∫ËÆÆ‰∏çË¶Å‰ΩøÁî®Ê≠§ÈÖçÁΩÆÊñπÂºè");
          logger.warn("WARNING WARNING WARNING WARNING WARNING WARNING");
          return true;
        }
        if (options.contains(toArgumentName(name))) {
          logger.warn("WARNING WARNING WARNING WARNING WARNING WARNING");
          logger.warn("‰ªéÁ®ãÂ∫èÂèÇÊï∞Âä†ËΩΩÁßÅÂØÜÈÖçÁΩÆÈùûÂ∏∏Âç±Èô©, Âº∫ÁÉàÂª∫ËÆÆ‰∏çË¶Å‰ΩøÁî®Ê≠§ÈÖçÁΩÆÊñπÂºè");
          logger.warn("WARNING WARNING WARNING WARNING WARNING WARNING");
          return true;
        }
      }
      return properties.getProperty(toConfigName(name)) != null;
    }

    @Nullable
    @Comment("ÁéØÂ¢ÉÂèòÈáè > unsafe(Á≥ªÁªüÈÖçÁΩÆ) > unsafe(Á®ãÂ∫èÂèÇÊï∞) > ÈÖçÁΩÆÊñá‰ª∂")
    public String getSystemParameterSafe(String... name) {
      String value = System.getenv(toEnvironmentName(name));
      if (value != null) return value;
      if (kernelConfig.unsafe) {
        value = System.getProperty(toPropertyName(name));
        if (value != null) {
          logger.warn("WARNING WARNING WARNING WARNING WARNING WARNING");
          logger.warn("‰ªéÁ≥ªÁªüÂ±ûÊÄßÂä†ËΩΩÁßÅÂØÜÈÖçÁΩÆÈùûÂ∏∏Âç±Èô©, Âº∫ÁÉàÂª∫ËÆÆ‰∏çË¶Å‰ΩøÁî®Ê≠§ÈÖçÁΩÆÊñπÂºè");
          logger.warn("WARNING WARNING WARNING WARNING WARNING WARNING");
          return value;
        }
        value = parameters.get(toArgumentName(name));
        if (value != null) {
          logger.warn("WARNING WARNING WARNING WARNING WARNING WARNING");
          logger.warn("‰ªéÁ®ãÂ∫èÂèÇÊï∞Âä†ËΩΩÁßÅÂØÜÈÖçÁΩÆÈùûÂ∏∏Âç±Èô©, Âº∫ÁÉàÂª∫ËÆÆ‰∏çË¶Å‰ΩøÁî®Ê≠§ÈÖçÁΩÆÊñπÂºè");
          logger.warn("WARNING WARNING WARNING WARNING WARNING WARNING");
          return value;
        }
      }
      value = properties.getProperty(toConfigName(name));
      if (value != null) return value;
      return null;
    }

  }

  //= ==================================================================================================================
  //= ÂÜÖÊ†∏ÂèÇÊï∞
  //= ==================================================================================================================

  private static class KernelConfig {

    private volatile boolean debug;
    private volatile boolean unsafe;
    private boolean noLogin;
    private boolean noJline;
    private boolean fullname;
    private boolean noConsole;
    private boolean forceExit;

    private String level;
    private String prefix;
    private String provider;

    public static KernelConfig getInstance(Argument argument) {

      KernelConfig config = new KernelConfig();

      config.debug = argument.checkKernelOption(ARGS_DEBUG);
      config.unsafe = argument.checkKernelOption(ARGS_UNSAFE);
      config.noLogin = argument.checkKernelOption(ARGS_NO_LOGIN);
      config.noJline = argument.checkKernelOption(ARGS_NO_JLINE);
      config.fullname = argument.checkKernelOption(ARGS_FULL_NAME);
      config.noConsole = argument.checkKernelOption(ARGS_NO_CONSOLE);
      config.forceExit = argument.checkKernelOption(ARGS_FORCE_EXIT);

      config.level = argument.getKernelParameter(ARGS_LOGGER_LEVEL);
      config.prefix = argument.getKernelParameter(ARGS_LOGGER_PREFIX);
      config.provider = argument.getKernelParameter(ARGS_LOGGER_PROVIDER);

      return config;
    }

    private KernelConfig() {}
  }

  //= ==================================================================================================================
  //= Á≥ªÁªüÂèÇÊï∞
  //= ==================================================================================================================

  private static class SystemConfig {

    private static final LoggerX logger = LoggerXFactory.getLogger("Config");

    AuthMode authMod;
    long username;
    String password;
    DeviceType deviceType;
    String deviceInfo;
    Pattern commandRegex;
    Integer monitorThreads;
    Integer scheduleThreads;
    Set<BotConfiguration.MiraiProtocol> upgradeProtocols;

    static SystemConfig getInstance(Argument argument) {

      SystemConfig config = new SystemConfig();

      //= ======================================================================

      String authMod = argument.getSystemParameter(CONF_ACCOUNT_AUTH);
      if (authMod == null) {
        logger.info("ËÆ§ËØÅÊ®°Âºè -> ‰ΩøÁî®ÈªòËÆ§ÂÄº");
      } else {
        config.authMod = AuthMode.of(authMod);
        logger.seek("ËÆ§ËØÅÊ®°Âºè -> " + config.authMod);
      }

      //= ======================================================================

      String username = argument.getSystemParameter(CONF_ACCOUNT_USERNAME);
      FirstBootException.require(username, CONF_ACCOUNT_USERNAME);
      logger.seek("ÁôªÂΩïË¥¶Âè∑ -> " + username);
      config.username = parseLong(username, () -> new InvalidConfigException("Ë¥¶Âè∑ÈÖçÁΩÆÊúâËØØ -> " + username));

      //= ======================================================================

      if (config.authMod == AuthMode.PASSWD) {
        String password = argument.getSystemParameterSafe(CONF_ACCOUNT_PASSWORD);
        FirstBootException.require(password, CONF_ACCOUNT_PASSWORD);
        config.password = password;
        if (kernelConfig.debug) {
          logger.warn("ÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅ");
          logger.warn("Ë∞ÉËØïÊ®°ÂºèÂºÄÂêØÊó∂‰ºöÂú®Êó•Âøó‰∏≠ËÆ∞ÂΩïÂØÜÁ†Å");
          logger.warn("ÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅ");
          logger.seek("ÁôªÂΩïÂØÜÁ†Å -> " + password);
          logger.warn("ÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅ");
          logger.warn("Ë∞ÉËØïÊ®°ÂºèÂºÄÂêØÊó∂‰ºöÂú®Êó•Âøó‰∏≠ËÆ∞ÂΩïÂØÜÁ†Å");
          logger.warn("ÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅ");
        } else {
          logger.seek("ÁôªÂΩïÂØÜÁ†Å -> " + "*".repeat(username.length()));
        }
      }

      //= ======================================================================

      String deviceType = argument.getSystemParameter(CONF_DEVICE_TYPE);
      if (deviceType == null) {
        if (config.authMod == AuthMode.QRCODE) {
          config.deviceType = DeviceType.WATCH;
          logger.info("ËÆæÂ§áÁ±ªÂûã -> ‰ΩøÁî®ÈªòËÆ§ÂÄº WATCH");
        } else {
          config.deviceType = DeviceType.PHONE;
          logger.info("ËÆæÂ§áÁ±ªÂûã -> ‰ΩøÁî®ÈªòËÆ§ÂÄº PHONE");
        }
      } else {
        config.deviceType = DeviceType.of(deviceType);
        if (config.authMod == AuthMode.QRCODE && config.deviceType != DeviceType.WATCH && config.deviceType != DeviceType.MACOS) {
          throw new InvalidConfigException("ÈÖçÁΩÆÊó†Êïà - Êâ´Á†ÅËÆ§ËØÅÂøÖÈ°ª‰ΩøÁî® WATCH/MACOS ÂçèËÆÆ");
        }
        logger.seek("ËÆæÂ§áÁ±ªÂûã -> " + config.deviceType);
      }

      //= ======================================================================

      String deviceInfo = argument.getSystemParameter(CONF_DEVICE_INFO);
      if (deviceInfo == null) {
        logger.info("ËÆæÂ§á‰ø°ÊÅØ -> ‰ΩøÁî®ÈªòËÆ§ÂÄº device.json");
      } else {
        if (!deviceInfo.matches("^[a-zA-Z0-9.]*$")) {
          throw new InvalidConfigException("ÈÖçÁΩÆÊó†Êïà - ËÆæÂ§á‰ø°ÊÅØÊñá‰ª∂Âêç‰∏çÂêàÊ≥ï ÂøÖÈ°ªÊª°Ë∂≥ ^[a-zA-Z0-9.]*$");
        }
        logger.seek("ËÆæÂ§á‰ø°ÊÅØ -> " + deviceInfo);
      }
      Path deviceInfoPath = FileEnhance.get(FOLDER_CONFIG, deviceInfo == null ? "device.json" : deviceInfo);

      if (Files.notExists(deviceInfoPath)) {
        throw new FirstBootException("ÈÖçÁΩÆÊó†Êïà - ËÆæÂ§á‰ø°ÊÅØÊñá‰ª∂‰∏çÂ≠òÂú® -> " + deviceInfoPath);
      }

      if (!Files.isRegularFile(deviceInfoPath)) {
        throw new FirstBootException("ÈÖçÁΩÆÊó†Êïà - ËÆæÂ§á‰ø°ÊÅØ‰∏çÊòØÂπ≥Êñá‰ª∂ -> " + deviceInfoPath);
      }

      try {
        config.deviceInfo = Files.readString(deviceInfoPath);
      } catch (IOException exception) {
        throw new CoreException("ÈÖçÁΩÆÊó†Êïà - ËÆæÂ§á‰ø°ÊÅØÊñá‰ª∂Êó†Ê≥ïËØªÂèñ -> " + deviceInfoPath, exception);
      }

      //= ======================================================================

      String commandRegex = argument.getSystemParameter(CONF_COMMAND_REGEX);
      if (commandRegex == null) {
        config.commandRegex = Pattern.compile("^/[a-zA-Z0-9]{2,16}");
        logger.info("ÂëΩ‰ª§Ê≠£Âàô -> ‰ΩøÁî®ÈªòËÆ§ÂÄº ^/[a-zA-Z0-9]{2,16}");
      } else {
        config.commandRegex = Pattern.compile(commandRegex);
        logger.seek("ÂëΩ‰ª§Ê≠£Âàô -> " + commandRegex);
      }

      //= ======================================================================

      String monitorThreads = argument.getSystemParameter(CONF_THREADS_MONITOR);
      if (monitorThreads == null) {
        config.monitorThreads = CPU_CORES;
        logger.info("ÁõëÂê¨Âô®Ê±† -> ‰ΩøÁî®Á≥ªÁªüÂÄº " + CPU_CORES);
      } else {
        config.monitorThreads = parseInt(monitorThreads, () -> new InvalidConfigException("ÁõëÂê¨Âô®Ê±†ÈÖçÁΩÆÊúâËØØ -> " + monitorThreads));
        if (config.monitorThreads <= 0) {
          config.monitorThreads = CPU_CORES;
          logger.seek("ÁõëÂê¨Âô®Ê±† -> ‰ΩøÁî®Ëá™Âä®ÂÄº " + config.monitorThreads);
        } else {
          logger.seek("ÁõëÂê¨Âô®Ê±† -> " + config.monitorThreads);
        }
      }

      //= ======================================================================

      String scheduleThreads = argument.getSystemParameter(CONF_THREADS_SCHEDULE);
      if (scheduleThreads == null) {
        config.scheduleThreads = CPU_CORES;
        logger.info("ÂÆöÊó∂Âô®Ê±† -> ‰ΩøÁî®Á≥ªÁªüÂÄº " + CPU_CORES);
      } else {
        config.scheduleThreads = parseInt(scheduleThreads, () -> new InvalidConfigException("ÂÆöÊó∂Âô®Ê±†ÈÖçÁΩÆÊúâËØØ -> " + scheduleThreads));
        if (config.scheduleThreads <= 0) {
          config.scheduleThreads = CPU_CORES;
          logger.seek("ÂÆöÊó∂Âô®Ê±† -> ‰ΩøÁî®Ëá™Âä®ÂÄº " + config.monitorThreads);
        } else {
          logger.seek("ÂÆöÊó∂Âô®Ê±† -> " + config.scheduleThreads);
        }
      }

      //= ======================================================================

      String upgradeProtocols = argument.getSystemParameter(CONF_UPGRADE_PROTOCOLS);

      if (upgradeProtocols == null || upgradeProtocols.isBlank()) {
        config.upgradeProtocols = null;
      } else {
        String[] strings = upgradeProtocols.split(",");
        config.upgradeProtocols = Arrays.stream(strings)
          .map(DeviceType::of)
          .map(DeviceType::toMiraiProtocol)
          .collect(Collectors.toUnmodifiableSet());
      }

      //= ======================================================================

      return config;
    }

    private SystemConfig() {}

  }

  //= ==================================================================================================================
  //= ËÆ§ËØÅÊ®°Âºè
  //= ==================================================================================================================

  private enum AuthMode {

    PASSWD,
    QRCODE,
    ;

    public static AuthMode of(String value) {
      return switch (value.toLowerCase()) {
        case "code", "qrcode", "scancode" -> QRCODE;
        case "pass", "passwd", "password" -> PASSWD;
        default -> throw new InvalidConfigException("ERROR: No such AuthMode -> " + value);
      };
    }
  }

  //= ==================================================================================================================
  //= ËÆæÂ§áÁ±ªÂûã
  //= ==================================================================================================================

  private enum DeviceType {

    PAD,
    PHONE,
    WATCH,
    IPAD,
    MACOS,
    ;

    public static DeviceType of(String value) {
      return switch (value.toLowerCase()) {
        case "pad", "android_pad" -> PAD;
        case "phone", "android_phone" -> PHONE;
        case "watch", "android_watch" -> WATCH;
        case "ipad" -> IPAD;
        case "macos" -> MACOS;
        default -> throw new InvalidConfigException("ERROR: No such DeviceType -> " + value);
      };
    }

    public BotConfiguration.MiraiProtocol toMiraiProtocol() {
      return switch (this) {
        case PAD -> BotConfiguration.MiraiProtocol.ANDROID_PAD;
        case PHONE -> BotConfiguration.MiraiProtocol.ANDROID_PHONE;
        case WATCH -> BotConfiguration.MiraiProtocol.ANDROID_WATCH;
        case IPAD -> BotConfiguration.MiraiProtocol.IPAD;
        case MACOS -> BotConfiguration.MiraiProtocol.MACOS;
      };
    }
  }

  //= ==================================================================================================================
  //=
  //= ÂÖ¨ÂÖ±API
  //=
  //= ==================================================================================================================

  //= ==========================================================================
  //= ÊâìÂç∞Ê∂àÊÅØ

  @Comment("Âú®ÁªàÁ´ØÊâìÂç∞Ê∂àÊÅØ")
  public static void terminalPrint(Object message) {
    if (message == null) return;
    terminal.print(message.toString());
  }

  @Comment("Âú®ÁªàÁ´ØÊâìÂç∞Ê∂àÊÅØ")
  public static void println(Object message) {
    if (message == null) return;
    terminal.println(message.toString());
  }

  //= ==========================================================================
  //= Ê°ÜÊû∂Áä∂ÊÄÅ

  @Comment("Ê°ÜÊû∂ËøêË°åÁä∂ÊÄÅ")
  public static boolean isDebug() {
    return kernelConfig.debug;
  }

  @Comment("Ê°ÜÊû∂ËøêË°åÁä∂ÊÄÅ")
  public static boolean isNoJline() {
    return kernelConfig.noJline;
  }

  @Comment("Ê°ÜÊû∂ËøêË°åÁä∂ÊÄÅ")
  public static boolean isNoConsole() {
    return kernelConfig.noConsole;
  }

  @Comment("Ê°ÜÊû∂ËøêË°åÁä∂ÊÄÅ")
  public static boolean isShutdownHalt() {
    return SHUTDOWN_HALT;
  }

  @Comment("Ê°ÜÊû∂ËøêË°åÁä∂ÊÄÅ")
  public static boolean isShutModeDrop() {
    return SHUTDOWN_DROP;
  }

  //= ==========================================================================
  //= Ê°ÜÊû∂Áõ∏ÂÖ≥

  @Comment("Ê°ÜÊû∂Áõ∏ÂÖ≥")
  public static Path getFolderRoot() {
    return FOLDER_ROOT;
  }

  @Comment("Ê°ÜÊû∂Áõ∏ÂÖ≥")
  public static Path getFolderConfig() {
    return FOLDER_CONFIG;
  }

  @Comment("Ê°ÜÊû∂Áõ∏ÂÖ≥")
  public static Path getFolderPlugin() {
    return FOLDER_PLUGIN;
  }

  @Comment("Ê°ÜÊû∂Áõ∏ÂÖ≥")
  public static Path getDependFolder() {
    return FOLDER_DEPEND;
  }

  @Comment("Ê°ÜÊû∂Áõ∏ÂÖ≥")
  public static Path getFolderDepend() {
    return FOLDER_DEPEND;
  }

  @Comment("Ê°ÜÊû∂Áõ∏ÂÖ≥")
  public static Path getFolderModule() {
    return FOLDER_MODULE;
  }

  @Comment("Ê°ÜÊû∂Áõ∏ÂÖ≥")
  public static Path getFolderLogger() {
    return FOLDER_LOGGER;
  }

  //= ==========================================================================
  //= Êèí‰ª∂Â≠êÁ≥ªÁªü

  @Comment("Ëé∑ÂèñÊ®°ÂùóÂÆû‰æã")
  public static <T extends EventHandlerRunner> T getRunner(Class<T> clazz) {
    return schema.getRunner(clazz);
  }

  //= ==========================================================================
  //= Á∫øÁ®ãÊ±†Â≠êÁ≥ªÁªü

  @Comment("Êèê‰∫§ÂºÇÊ≠•‰ªªÂä°")
  public static Future<?> submit(Runnable runnable) {
    return MONITOR_PROCESS.submit(runnable);
  }

  @Comment("Êèê‰∫§ÂºÇÊ≠•‰ªªÂä°")
  public static <T> Future<?> submit(Runnable runnable, T t) {
    return MONITOR_PROCESS.submit(runnable, t);
  }

  @Comment("Êèê‰∫§ÂºÇÊ≠•‰ªªÂä°")
  public static Future<?> submit(Callable<?> callable) {
    return MONITOR_PROCESS.submit(callable);
  }

  @Comment("Êèê‰∫§ÂÆöÊó∂‰ªªÂä°")
  public static ScheduledFuture<?> schedule(Runnable runnable, long time) {
    return SCHEDULE_SERVICE.schedule(runnable, time, TimeUnit.MILLISECONDS);
  }

  @Comment("Êèê‰∫§ÂÆöÊó∂‰ªªÂä°")
  public static ScheduledFuture<?> schedule(Callable<?> callable, long delay) {
    return SCHEDULE_SERVICE.schedule(callable, delay, TimeUnit.MILLISECONDS);
  }

  @Comment("Êèê‰∫§Á≠âÈó¥ÈöîÂÆöÊó∂‰ªªÂä°")
  public static ScheduledFuture<?> scheduleAtFixedRate(Runnable runnable, long initialDelay, long period) {
    return SCHEDULE_SERVICE.scheduleAtFixedRate(runnable, initialDelay, period, TimeUnit.MILLISECONDS);
  }

  @Comment("Êèê‰∫§Á≠âÂª∂ËøüÂÆöÊó∂‰ªªÂä°")
  public static ScheduledFuture<?> scheduleWithFixedDelay(Runnable runnable, long initialDelay, long delay) {
    return SCHEDULE_SERVICE.scheduleWithFixedDelay(runnable, initialDelay, delay, TimeUnit.MILLISECONDS);
  }

  @Comment("Êèê‰∫§ÂÆöÊó∂‰ªªÂä°")
  public static ScheduledFuture<?> schedule(Runnable runnable, long time, TimeUnit unit) {
    return SCHEDULE_SERVICE.schedule(runnable, time, unit);
  }

  @Comment("Êèê‰∫§ÂÆöÊó∂‰ªªÂä°")
  public static ScheduledFuture<?> schedule(Callable<?> callable, long delay, TimeUnit unit) {
    return SCHEDULE_SERVICE.schedule(callable, delay, unit);
  }

  @Comment("Êèê‰∫§Á≠âÈó¥ÈöîÂÆöÊó∂‰ªªÂä°")
  public static ScheduledFuture<?> scheduleAtFixedRate(Runnable runnable, long initialDelay, long period, TimeUnit unit) {
    return SCHEDULE_SERVICE.scheduleAtFixedRate(runnable, initialDelay, period, unit);
  }

  @Comment("Êèê‰∫§Á≠âÂª∂ËøüÂÆöÊó∂‰ªªÂä°")
  public static ScheduledFuture<?> scheduleWithFixedDelay(Runnable runnable, long initialDelay, long delay, TimeUnit unit) {
    return SCHEDULE_SERVICE.scheduleWithFixedDelay(runnable, initialDelay, delay, unit);
  }

  //= ==========================================================================
  //= ÊòµÁß∞Â≠êÁ≥ªÁªü

  @Comment("Ëé∑ÂèñÁî®Êà∑ÊòµÁß∞")
  public static String getNickName(long user) {
    return queryProfile(user).getNickname();
  }

  @Comment("Ëé∑ÂèñÁî®Êà∑Ê†ºÂºèÂåñÂêç")
  public static String getFormattedNickName(User user) {
    return user.getNick() + "(" + user.getId() + ")";
  }

  @Comment("Ëé∑ÂèñÁî®Êà∑Ê†ºÂºèÂåñÂêç")
  public static String getFormattedNickName(long user) {
    return getNickName(user) + "(" + user + ")";
  }

  @Comment("Ëé∑ÂèñÁî®Êà∑ÊòµÁß∞")
  public static String getUsersMappedNickName(User user) {
    return nickname.getUsersMappedNickName(user);
  }

  @Comment("Ëé∑ÂèñÁî®Êà∑ÊòµÁß∞")
  public static String getUsersMappedNickName(long userId) {
    return nickname.getUsersMappedNickName(userId);
  }

  @Comment("Ëé∑ÂèñÈ¢ÑËÆæÊòµÁß∞")
  public static String getMappedNickName(GroupMessageEvent event) {
    return nickname.getMemberMappedNickName(event.getSender());
  }

  @Comment("Ëé∑ÂèñÈ¢ÑËÆæÊòµÁß∞")
  public static String getMemberMappedNickName(Member member) {
    return nickname.getMemberMappedNickName(member);
  }

  @Comment("Ëé∑ÂèñÈ¢ÑËÆæÊòµÁß∞")
  public static String getMappedNickName(long groupId, long userId) {
    return nickname.getMemberMappedNickName(groupId, userId);
  }

  //= ==========================================================================

  @Comment("ÂèëÈÄÅÁßÅËÅäÊ∂àÊÅØ")
  public static void sendMessage(User user, Message message) {
    Objects.requireNonNull(user).sendMessage(message);
  }

  @Comment("ÂèëÈÄÅÁßÅËÅäÊ∂àÊÅØ")
  public static void sendMessage(User user, String message) {
    sendMessage(user, new PlainText(message));
  }

  @Comment("ÂèëÈÄÅÁßÅËÅäÊ∂àÊÅØ")
  public static void sendMessage(UserMessageEvent event, Message message) {
    sendMessage(event.getSender(), message);
  }

  @Comment("ÂèëÈÄÅÁßÅËÅäÊ∂àÊÅØ")
  public static void sendMessage(UserMessageEvent event, String message) {
    sendMessage(event, new PlainText(message));
  }

  @Comment("ÂèëÈÄÅÁßÅËÅäÊ∂àÊÅØ")
  public static void sendUserMessage(long id, Message message) {
    User user = getFriend(id);
    if (user == null) user = getStrangerOrFail(id);
    sendMessage(user, message);
  }

  @Comment("ÂèëÈÄÅÁßÅËÅäÊ∂àÊÅØ")
  public static void sendUserMessage(long id, String message) {
    sendUserMessage(id, new PlainText(message));
  }

  //= ==========================================================================

  @Comment("ÂèëÈÄÅÁæ§ÁªÑÊ∂àÊÅØ")
  public static void sendMessage(Group group, Message message) {
    Objects.requireNonNull(group).sendMessage(message);
  }

  @Comment("ÂèëÈÄÅÁæ§ÁªÑÊ∂àÊÅØ")
  public static void sendMessage(Group group, String message) {
    sendMessage(group, new PlainText(message));
  }

  @Comment("ÂèëÈÄÅÁæ§ÁªÑÊ∂àÊÅØ")
  public static void sendMessage(GroupMessageEvent event, Message message) {
    sendMessage(event.getGroup(), message);
  }

  @Comment("ÂèëÈÄÅÁæ§ÁªÑÊ∂àÊÅØ")
  public static void sendMessage(GroupMessageEvent event, String message) {
    sendMessage(event, new PlainText(message));
  }

  @Comment("ÂèëÈÄÅÁæ§ÁªÑÊ∂àÊÅØ")
  public static void sendGroupMessage(long group, Message message) {
    sendMessage(getGroupOrFail(group), message);
  }

  @Comment("ÂèëÈÄÅÁæ§ÁªÑÊ∂àÊÅØ")
  public static void sendGroupMessage(long group, String message) {
    sendGroupMessage(group, new PlainText(message));
  }

  //= ==========================================================================

  @Comment("ÂèëÈÄÅÁæ§ÁªÑÊ∂àÊÅØ")
  public static void sendAtMessage(Group group, Member member, Message message) {
    sendMessage(group, new At(member.getId()).plus(message));
  }

  @Comment("ÂèëÈÄÅÁæ§ÁªÑÊ∂àÊÅØ")
  public static void sendAtMessage(Group group, Member member, String message) {
    sendAtMessage(group, member, new PlainText(message));
  }

  @Comment("ÂèëÈÄÅÁæ§ÁªÑÊ∂àÊÅØ")
  public static void sendAtMessage(GroupMessageEvent event, Message message) {
    sendAtMessage(event.getGroup(), event.getSender(), message);
  }

  @Comment("ÂèëÈÄÅÁæ§ÁªÑÊ∂àÊÅØ")
  public static void sendAtMessage(GroupMessageEvent event, String message) {
    sendAtMessage(event, new PlainText(message));
  }

  @Comment("ÂèëÈÄÅÁæ§ÁªÑÊ∂àÊÅØ")
  public static void sendAtMessage(long group, long member, Message message) {
    Group groupOrFail = getGroupOrFail(group);
    Member memberOrFail = groupOrFail.getOrFail(member);
    sendAtMessage(groupOrFail, memberOrFail, message);
  }

  @Comment("ÂèëÈÄÅÁæ§ÁªÑÊ∂àÊÅØ")
  public static void sendAtMessage(long group, long member, String message) {
    Group groupOrFail = getGroupOrFail(group);
    Member memberOrFail = groupOrFail.getOrFail(member);
    sendAtMessage(groupOrFail, memberOrFail, new PlainText(message));
  }

  //= ==========================================================================
  //= Êú∫Âô®‰∫∫ÂäüËÉΩ

  @Comment("Ëé∑ÂèñMiraiÊú∫Âô®‰∫∫ÂÆû‰æã Âè™Êúâ--unsafeÊ®°Âºè‰∏ãÂèØ‰ª•‰ΩøÁî® Âπ∂‰∏îÂøÖÈ°ªÂú®ÂêØÂä®ÂÆåÊàêÂâçË∞ÉÁî®")
  public static Bot getBot() {
    if (kernelConfig.unsafe) {
      return bot;
    } else {
      logger.warn("Ëé∑ÂèñÊú∫Âô®‰∫∫ÂÆû‰æãÁ¶ÅÊ≠¢ Âè™ÊúâÂú®unsafeÊ®°Âºè‰∏ãÂèØÁî®");
      for (StackTraceElement stackTraceElement : Thread.currentThread().getStackTrace()) {
        System.out.println(stackTraceElement);
      }
      throw new CoreException("Get Mirai-BOT instance only allowed when --unsafe present! And only allowed before booted.");
    }
  }

  @Comment("Ê†ºÂºèÂåñÁæ§ÁªÑ‰ø°ÊÅØ")
  public static String getGroupInfo(Group group) {
    return group.getName() + "(" + group.getId() + ") " + group.getMembers().size() + " -> " + group.getOwner().getNameCard() + "(" + group.getOwner().getId() + ")";
  }

  @Comment("Ëé∑ÂèñBOTËá™Ë∫´QQÂè∑")
  public static long getBotID() {
    return bot.getId();
  }

  @Comment("ÂàóÂá∫ÊâÄÊúâÂ•ΩÂèã")
  public static ContactList<Friend> getFriends() {
    return bot.getFriends();
  }

  @Comment("ÂàóÂá∫ÊâÄÊúâÁæ§ÁªÑ")
  public static ContactList<Group> getGroups() {
    return bot.getGroups();
  }

  @Comment("Ê†πÊçÆIDËé∑ÂèñÈôåÁîü‰∫∫")
  public static Stranger getStranger(long id) {
    return bot.getStranger(id);
  }

  @Comment("Ê†πÊçÆIDËé∑ÂèñÈôåÁîü‰∫∫")
  public static Stranger getStrangerOrFail(long id) {
    return bot.getStrangerOrFail(id);
  }

  @Comment("Ê†πÊçÆIDËé∑ÂèñÂ•ΩÂèã")
  public static Friend getFriend(long id) {
    return bot.getFriend(id);
  }

  @Comment("Ê†πÊçÆIDËé∑ÂèñÂ•ΩÂèã")
  public static Friend getFriendOrFail(long id) {
    return bot.getFriendOrFail(id);
  }

  @Comment("Ê†πÊçÆIDËé∑ÂèñÁæ§ÁªÑ")
  public static Group getGroup(long id) {
    return bot.getGroup(id);
  }

  @Comment("Ê†πÊçÆIDËé∑ÂèñÁæ§ÁªÑ")
  public static Group getGroupOrFail(long id) {
    return bot.getGroupOrFail(id);
  }

  @Comment("Ê†πÊçÆIDËé∑ÂèñÊàêÂëò")
  public static NormalMember getMemberOrFail(long group, long member) {
    return getGroupOrFail(group).getOrFail(member);
  }

  @Comment("Ëé∑ÂèñÂõæÁâáÁöÑURL")
  public static String getImageURL(Image image) {
    return queryImageUrl(image);
  }

  @Comment("Ëé∑ÂèñÂõæÁâáÁöÑURL")
  public static String getImageURL(FlashImage flashImage) {
    return queryImageUrl(flashImage.getImage());
  }

  //= ==========================================================================
  //= Êù•Ëá™ IMirai.kt

  @Comment("ËΩ¨ÂèëMirai")
  public static List<ForwardMessage.Node> downloadForwardMessage(String resourceId) {
    return Mirai.getInstance().downloadForwardMessage(bot, resourceId);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static MessageChain downloadLongMessage(String resourceId) {
    return Mirai.getInstance().downloadLongMessage(bot, resourceId);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static List<OtherClientInfo> getOnlineOtherClientsList(boolean mayIncludeSelf) {
    return Mirai.getInstance().getOnlineOtherClientsList(bot, mayIncludeSelf);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static long getUin() {
    return Mirai.getInstance().getUin(bot);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static String queryImageUrl(Image image) {
    return Mirai.getInstance().queryImageUrl(bot, image);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static UserProfile queryProfile(long id) {
    return Mirai.getInstance().queryProfile(bot, id);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static void recallMessage(MessageSource messageSource) {
    Mirai.getInstance().recallMessage(bot, messageSource);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static void sendNudge(Nudge nudge, Contact contact) {
    Mirai.getInstance().sendNudge(bot, nudge, contact);
  }

  //= ========================================================================
  //= Êù•Ëá™ LowLevelApiAccessor.kt

  @Comment("ËΩ¨ÂèëMirai")
  public static void getGroupVoiceDownloadUrl(byte[] md5, long groupId, long dstUin) {
    Mirai.getInstance().getGroupVoiceDownloadUrl(bot, md5, groupId, dstUin);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static Sequence<Long> getRawGroupList() {
    return Mirai.getInstance().getRawGroupList(bot);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static Sequence<MemberInfo> getRawGroupMemberList(long groupUin, long groupCode, long ownerId) {
    return Mirai.getInstance().getRawGroupMemberList(bot, groupUin, groupCode, ownerId);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static void muteAnonymousMember(String anonymousId, String anonymousNick, long groupId, int seconds) {
    Mirai.getInstance().muteAnonymousMember(bot, anonymousId, anonymousNick, groupId, seconds);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static Friend newFriend(FriendInfo friendInfo) {
    return Mirai.getInstance().newFriend(bot, friendInfo);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static Stranger newStranger(StrangerInfo strangerInfo) {
    return Mirai.getInstance().newStranger(bot, strangerInfo);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static boolean recallFriendMessageRaw(long targetId, int[] messagesIds, int[] messageInternalIds, int time) {
    return Mirai.getInstance().recallFriendMessageRaw(bot, targetId, messagesIds, messageInternalIds, time);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static boolean recallGroupMessageRaw(long groupCode, int[] messagesIds, int[] messageInternalIds) {
    return Mirai.getInstance().recallGroupMessageRaw(bot, groupCode, messagesIds, messageInternalIds);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static boolean recallGroupTempMessageRaw(long groupUin, long targetId, int[] messagesIds, int[] messageInternalIds, int time) {
    return Mirai.getInstance().recallGroupTempMessageRaw(bot, groupUin, targetId, messagesIds, messageInternalIds, time);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static void refreshKeys() {
    Mirai.getInstance().refreshKeys(bot);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static void solveBotInvitedJoinGroupRequestEvent(long eventId, long invitorId, long groupId, boolean accept) {
    Mirai.getInstance().solveBotInvitedJoinGroupRequestEvent(bot, eventId, invitorId, groupId, accept);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static void solveMemberJoinRequestEvent(long eventId, long fromId, String fromNick, long groupId, boolean accept, boolean blackList, String message) {
    Mirai.getInstance().solveMemberJoinRequestEvent(bot, eventId, fromId, fromNick, groupId, accept, blackList, message);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static void solveNewFriendRequestEvent(long eventId, long fromId, String fromNick, boolean accept, boolean blackList) {
    Mirai.getInstance().solveNewFriendRequestEvent(bot, eventId, fromId, fromNick, accept, blackList);
  }

}
