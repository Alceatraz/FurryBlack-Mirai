/*
 * Copyright (C) 2021 Alceatraz @ BlackTechStudio
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms parse the BTS Anti-Commercial & GNU Affero General.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty parse
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * BTS Anti-Commercial & GNU Affero General Public License for more details.
 *
 * You should have received a copy parse the BTS Anti-Commercial & GNU Affero
 * General Public License along with this program in README or LICENSE.
 */

package studio.blacktech.furryblackplus;

import kotlin.sequences.Sequence;
import net.mamoe.mirai.Bot;
import net.mamoe.mirai.BotFactory;
import net.mamoe.mirai.Mirai;
import net.mamoe.mirai.auth.BotAuthorization;
import net.mamoe.mirai.contact.Contact;
import net.mamoe.mirai.contact.ContactList;
import net.mamoe.mirai.contact.Friend;
import net.mamoe.mirai.contact.Group;
import net.mamoe.mirai.contact.Member;
import net.mamoe.mirai.contact.NormalMember;
import net.mamoe.mirai.contact.OtherClientInfo;
import net.mamoe.mirai.contact.Stranger;
import net.mamoe.mirai.contact.User;
import net.mamoe.mirai.data.FriendInfo;
import net.mamoe.mirai.data.MemberInfo;
import net.mamoe.mirai.data.StrangerInfo;
import net.mamoe.mirai.data.UserProfile;
import net.mamoe.mirai.event.GlobalEventChannel;
import net.mamoe.mirai.event.Listener;
import net.mamoe.mirai.event.events.BotInvitedJoinGroupRequestEvent;
import net.mamoe.mirai.event.events.GroupMessageEvent;
import net.mamoe.mirai.event.events.MemberJoinEvent;
import net.mamoe.mirai.event.events.MemberLeaveEvent;
import net.mamoe.mirai.event.events.NewFriendRequestEvent;
import net.mamoe.mirai.event.events.UserMessageEvent;
import net.mamoe.mirai.message.action.Nudge;
import net.mamoe.mirai.message.data.At;
import net.mamoe.mirai.message.data.FlashImage;
import net.mamoe.mirai.message.data.ForwardMessage;
import net.mamoe.mirai.message.data.Image;
import net.mamoe.mirai.message.data.Message;
import net.mamoe.mirai.message.data.MessageChain;
import net.mamoe.mirai.message.data.MessageSource;
import net.mamoe.mirai.message.data.PlainText;
import net.mamoe.mirai.utils.BotConfiguration;
import org.jline.builtins.Completers.TreeCompleter;
import org.jline.reader.Candidate;
import org.jline.reader.Completer;
import org.jline.reader.LineReader;
import org.jline.reader.LineReaderBuilder;
import org.jline.reader.ParsedLine;
import org.jline.reader.UserInterruptException;
import org.jline.reader.impl.completer.AggregateCompleter;
import org.jline.reader.impl.completer.ArgumentCompleter;
import org.jline.reader.impl.completer.StringsCompleter;
import org.jline.widget.AutopairWidgets;
import studio.blacktech.furryblack.core.enhance.DigestTool;
import studio.blacktech.furryblack.core.enhance.TimeTool;
import studio.blacktech.furryblackplus.common.Comment;
import studio.blacktech.furryblackplus.core.common.enhance.FileEnhance;
import studio.blacktech.furryblackplus.core.common.enhance.LockEnhance.Latch;
import studio.blacktech.furryblackplus.core.common.enhance.StringEnhance.LineBuilder;
import studio.blacktech.furryblackplus.core.common.logger.LoggerXConfig;
import studio.blacktech.furryblackplus.core.common.logger.LoggerXFactory;
import studio.blacktech.furryblackplus.core.common.logger.base.LoggerX;
import studio.blacktech.furryblackplus.core.exception.CoreException;
import studio.blacktech.furryblackplus.core.exception.system.FirstBootException;
import studio.blacktech.furryblackplus.core.exception.system.InvalidConfigException;
import studio.blacktech.furryblackplus.core.exception.system.TerminalException;
import studio.blacktech.furryblackplus.core.handler.EventHandlerChecker;
import studio.blacktech.furryblackplus.core.handler.EventHandlerExecutor;
import studio.blacktech.furryblackplus.core.handler.EventHandlerFilter;
import studio.blacktech.furryblackplus.core.handler.EventHandlerMonitor;
import studio.blacktech.furryblackplus.core.handler.EventHandlerRunner;
import studio.blacktech.furryblackplus.core.handler.annotation.Checker;
import studio.blacktech.furryblackplus.core.handler.annotation.Executor;
import studio.blacktech.furryblackplus.core.handler.annotation.Filter;
import studio.blacktech.furryblackplus.core.handler.annotation.Monitor;
import studio.blacktech.furryblackplus.core.handler.annotation.Runner;
import studio.blacktech.furryblackplus.core.handler.common.Command;
import studio.blacktech.furryblackplus.core.schema.Plugin;
import studio.blacktech.furryblackplus.core.schema.Schema;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.Reader;
import java.lang.management.ManagementFactory;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Properties;
import java.util.TimeZone;
import java.util.concurrent.Callable;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;

import static org.jline.builtins.Completers.TreeCompleter.node;
import static studio.blacktech.furryblackplus.core.common.enhance.DataEnhance.parseInt;
import static studio.blacktech.furryblackplus.core.common.enhance.DataEnhance.parseLong;
import static studio.blacktech.furryblackplus.core.common.enhance.StringEnhance.toHumanBytes;
import static studio.blacktech.furryblackplus.core.common.logger.base.LoggerX.Color.BLUE;
import static studio.blacktech.furryblackplus.core.common.logger.base.LoggerX.Color.BRIGHT_BLACK;
import static studio.blacktech.furryblackplus.core.common.logger.base.LoggerX.Color.BRIGHT_BLUE;
import static studio.blacktech.furryblackplus.core.common.logger.base.LoggerX.Color.BRIGHT_CYAN;
import static studio.blacktech.furryblackplus.core.common.logger.base.LoggerX.Color.BRIGHT_GREEN;
import static studio.blacktech.furryblackplus.core.common.logger.base.LoggerX.Color.BRIGHT_MAGENTA;
import static studio.blacktech.furryblackplus.core.common.logger.base.LoggerX.Color.BRIGHT_RED;
import static studio.blacktech.furryblackplus.core.common.logger.base.LoggerX.Color.BRIGHT_WHITE;
import static studio.blacktech.furryblackplus.core.common.logger.base.LoggerX.Color.BRIGHT_YELLOW;
import static studio.blacktech.furryblackplus.core.common.logger.base.LoggerX.Color.CYAN;
import static studio.blacktech.furryblackplus.core.common.logger.base.LoggerX.Color.GRAY;
import static studio.blacktech.furryblackplus.core.common.logger.base.LoggerX.Color.GREEN;
import static studio.blacktech.furryblackplus.core.common.logger.base.LoggerX.Color.MAGENTA;
import static studio.blacktech.furryblackplus.core.common.logger.base.LoggerX.Color.RED;
import static studio.blacktech.furryblackplus.core.common.logger.base.LoggerX.Color.RESET;
import static studio.blacktech.furryblackplus.core.common.logger.base.LoggerX.Color.WHITE;
import static studio.blacktech.furryblackplus.core.common.logger.base.LoggerX.Color.YELLOW;

// üî´ üß¶ ‚ùå ‚úîÔ∏è ‚≠ï üöß üÄÑ

@Comment(
  value = "FurryBlack Plus Framework - based on Mirai",
  usage = {
    "ÁîµÂ≠êÁôΩÁÜä‰ºöÊ¢¶Âà∞‰ªøÁîüËÄÅÈªëÂêó",
    "Alceatraz Warprays @ BlackTechStudio",
    "‰∏™‰∫∫‰∏ªÈ°µ https://www.blacktech.studio",
    "È°πÁõÆÂú∞ÂùÄ https://github.com/Alceatraz/FurryBlack-Mirai",
    "Êèí‰ª∂Âú∞ÂùÄ https://github.com/Alceatraz/FurryBlack-Mirai-Extensions",
  },
  attention = {
    "!!!Êú¨È°πÁõÆÂπ∂Èùû‰ΩøÁî®Á∫ØAGPLv3ÂçèËÆÆÔºåËØ∑ËÆ§ÁúüÈòÖËØªLICENSE!!!"
  }
)
public final class FurryBlack {

  //= ==================================================================================================================
  //
  //  Â∏∏Èáè‰ø°ÊÅØ
  //
  //= ==================================================================================================================

  @Comment("Ê°ÜÊû∂ÁâàÊú¨") public static final String APP_VERSION = "3.0.0";

  private static final String[] ARGS_DEBUG = {"debug"};
  private static final String[] ARGS_UNSAFE = {"unsafe"};
  private static final String[] ARGS_UPGRADE = {"upgrade"};
  private static final String[] ARGS_NO_LOGIN = {"no", "login"};
  private static final String[] ARGS_NO_JLINE = {"no", "jline"};
  private static final String[] ARGS_NO_CONSOLE = {"no", "console"};
  private static final String[] ARGS_FORCE_EXIT = {"force", "exit"};
  private static final String[] ARGS_LOGGER_LEVEL = {"logger", "level"};
  private static final String[] ARGS_LOGGER_PROVIDER = {"logger", "provider"};

  private static final String[] CONF_DEVICE_TYPE = {"device", "type"};
  private static final String[] CONF_DEVICE_INFO = {"device", "info"};
  private static final String[] CONF_ACCOUNT_AUTH = {"account", "auth"};
  private static final String[] CONF_ACCOUNT_USERNAME = {"account", "username"};
  private static final String[] CONF_ACCOUNT_PASSWORD = {"account", "password"};
  private static final String[] CONF_COMMAND_REGEX = {"command", "prefix"};
  private static final String[] CONF_THREADS_MONITOR = {"threads", "monitor"};
  private static final String[] CONF_THREADS_SCHEDULE = {"threads", "schedule"};

  //= ==================================================================================================================
  //
  //  ÈùôÊÄÅ‰ø°ÊÅØ
  //
  //= ==================================================================================================================

  @Comment("Êç¢Ë°åÁ¨¶") public static final String CRLF = "\r\n";
  @Comment("Êç¢Ë°åÁ¨¶") public static final String LINE;

  @Comment("Á≥ªÁªüÊ†∏ÂøÉÊï∞Èáè") public static final int CPU_CORES;
  @Comment("Á≥ªÁªüÂêØÂä®Êó∂Èó¥") public static final long BOOT_TIME;

  @Comment("ÂéüÂßãÁ≥ªÁªüÊó∂Âå∫") public static final ZoneId SYSTEM_ZONEID;
  @Comment("ÂéüÂßãÁ≥ªÁªüÂÅèÂ∑Æ") public static final ZoneOffset SYSTEM_OFFSET;

  private static final String CONTENT_INFO;
  private static final String CONTENT_HELP;
  private static final String CONTENT_COLOR;

  private static final String DEFAULT_CONFIG;

  private static final String CONSOLE_PROMPT;

  static {

    //= ================================================================================================================
    //= Ë∑≥ËøáËØ≠Ë®ÄËÆæÁΩÆ

    // -D user.country=zh
    // -D user.language=CN
    if (System.getenv("FURRYBLACK_LOCALE_SKIP") == null) {
      System.err.println("Env FURRYBLACK_LOCALE_SKIP not set, Setting JVM local to Locale.SIMPLIFIED_CHINESE");
      Locale.setDefault(Locale.SIMPLIFIED_CHINESE);
    }

    //= ================================================================================================================
    //= Ë∑≥ËøáÊó∂Èó¥ËÆæÁΩÆ

    // -D user.timezone=Asia/Shanghai
    if (System.getenv("FURRYBLACK_TIMEZONE_SKIP") == null) {
      System.err.println("Env FURRYBLACK_TIMEZONE_SKIP not set, Setting JVM timezone to Asia/Shanghai");
      TimeZone.setDefault(TimeZone.getTimeZone("Asia/Shanghai"));
    }

    //= ================================================================================================================
    //= Á≥ªÁªü‰ø°ÊÅØ

    LINE = System.lineSeparator();

    BOOT_TIME = ManagementFactory.getRuntimeMXBean().getStartTime();
    CPU_CORES = Runtime.getRuntime().availableProcessors();

    SYSTEM_ZONEID = ZoneId.systemDefault();
    SYSTEM_OFFSET = ZoneOffset.systemDefault().getRules().getOffset(LocalDateTime.now());

    //= ================================================================================================================
    //= Ê°ÜÊû∂‰ø°ÊÅØ

    CONTENT_INFO =

      // @formatter:off

      YELLOW + "FurryBlackPlus Mirai - ver " + APP_VERSION + RESET + LINE + """
      A Mirai wrapper QQ-Bot framework make with love and \uD83E\uDDE6
      ÁîµÂ≠êÁôΩÁÜä‰ºöÊ¢¶Âà∞‰ªøÁîüËÄÅÈªëÂêó
      By - Alceatraz Warprays @ BlackTechStudio
      È°πÁõÆÂú∞ÂùÄ https://github.com/Alceatraz/FurryBlack-Mirai
      Êèí‰ª∂Âú∞ÂùÄ https://github.com/Alceatraz/FurryBlack-Mirai-Extensions
      ‰∏™‰∫∫‰∏ªÈ°µ https://www.blacktech.studio"""

     // @formatter:on

    ;

    CONTENT_HELP =

      // @formatter:off

      YELLOW + "FurryBlackPlus Mirai - ver " + APP_VERSION + RESET + LINE +
      BRIGHT_CYAN + "# FurryBlackPlus ÂêØÂä®ÂèÇÊï∞ ===========================" + RESET + LINE +
      "--debug       ‰ΩøÁî®DEBUGÊ®°ÂºèÂêØÂä®" + LINE +
      "--unsafe      ÂÖÅËÆ∏‰∏Ä‰∫õÂç±Èô©ÁöÑË∞ÉÁî®" + LINE +
      "--no-login    ‰ΩøÁî®Á¶ªÁ∫øÊ®°ÂºèÔºå‰ªÖÁî®‰∫éÂü∫Á°ÄË∞ÉËØïÔºåÂäüËÉΩÂü∫Êú¨ÈÉΩ‰∏çÂèØÁî®" + LINE +
      "--no-console  ‰∏ç‰ΩøÁî®ÊéßÂà∂Âè∞ÔºåÂîØ‰∏ÄÊ≠£Â∏∏ÂÖ≥Èó≠ÊñπÂºèÊòØ‰ΩøÁî®ËøõÁ®ã‰ø°Âè∑" + LINE +
      "--no-jline    ‰∏ç‰ΩøÁî®jlineÊéßÂà∂Âè∞Ôºå‰ΩøÁî®BufferedReader" + LINE +
      "--force-exit  ÂÖ≥Èó≠ÊµÅÁ®ãÊâßË°åÂêéÔºåÂº∫Âà∂ÁªìÊùüJVM(halt)" + LINE +

      BRIGHT_CYAN + "# FurryBlackPlus Á≥ªÁªüÂèÇÊï∞ ===========================" + RESET + LINE +
      "furryblack.logger.level Êó•ÂøóÁ≠âÁ∫ß" + LINE +

      BRIGHT_CYAN + "# FurryBlackPlus ÊéßÂà∂Âè∞  ===========================" + RESET + LINE +
      RED + "‚ö† ÊéßÂà∂Âè∞‰ªª‰ΩïÊìç‰ΩúÈÉΩÂ±û‰∫éÂ∫ïÂ±ÇÊìç‰ΩúÂèØ‰ª•Áõ¥Êé•ÂØπÊ°ÜÊû∂ËøõË°å‰∏çÂÆâÂÖ®ÂíåÈùûÊ≥ïÁöÑÊìç‰Ωú" + RESET + LINE +
      "ÂÆâÂÖ®ÔºöËÆæËÆ°Â¶ÇÊ≠§Ôºå‰∏ç‰ºöÂØºËá¥ÂºÇÂ∏∏ÊàñËÄÖ‰∏çÂèØÈ¢ÑÊµãÁöÑÁªìÊûú" + LINE +
      "È£éÈô©ÔºöÂäüËÉΩËÆæËÆ°‰∏äÊòØÂÆâÂÖ®Êìç‰ΩúÔºå‰ΩÜÊòØÂÖ∑‰ΩìË¢´Êìç‰ΩúÂØπË±°ÂèØËÉΩÂØºËá¥ÈîôËØØ" + LINE +
      "Âç±Èô©ÔºöÊ≤°ÊúâÂÆâÂÖ®ÊÄßÊ£ÄÊü•ÁöÑÊìç‰ΩúÔºåÂèØËÉΩ‰ºöËÆ©ÂäüËÉΩ‰∏•ÈáçÂºÇÂ∏∏ÂØºËá¥Ë¢´Ëø´ÈáçÂêØÊàñÊçüÂùèÊ®°ÂùóÁöÑÊï∞ÊçÆÂ≠òÊ°£" + LINE +
      "È´òÂç±ÔºöÂêéÊûúÂÆåÂÖ®Êú™Áü•ÁöÑÂç±Èô©Êìç‰ΩúÔºåÊàñËÄÖÊ≠£Â∏∏ÊµÅÁ®ã‰∏≠‰∏çÂ∫îËØ•Â¶ÇÊ≠§Êìç‰Ωú‰ΩÜÊòØÊéßÂà∂Âè∞‰ªçÁÑ∂ÂèØ‰ª•Âº∫Âà∂ÊâßË°å" + LINE +

      GREEN + "# Á≥ªÁªüÁÆ°ÁêÜ ==========================================" + RESET + LINE +
      "level (ÂÆâÂÖ®) ‰øÆÊîπÊéßÂà∂Âè∞Êó•ÂøóÊâìÂç∞Á≠âÁ∫ßÔºåÊó•Âøó‰∏çÂèóÂΩ±Âìç(ÂèØËÉΩÂØºËá¥ÊºèÊéâERR/WARN‰ø°ÊÅØ)" + LINE +
      "stat  (ÂÆâÂÖ®) Êü•ÁúãÊÄßËÉΩÁä∂ÊÄÅ" + LINE +
      "stop  (ÂÆâÂÖ®) Ê≠£Â∏∏ÈÄÄÂá∫ÔºåÂÆåÊï¥ÊâßË°åÂÖ≥Èó≠ÊµÅÁ®ãÔºåÁ≠âÂæÖÊ®°ÂùóÁªìÊùüÔºåÁ≠âÂæÖÁ∫øÁ®ãÊ±†ÁªìÊùüÔºåÁ≠âÂæÖÊâÄÊúâÁ∫øÁ®ã" + LINE +
      "drop  (È´òÂç±) Âº∫Âà∂ÈÄÄÂá∫Ôºå‰∏çÁ≠âÂæÖÊèí‰ª∂ÂÖ≥Èó≠ÂÆåÊàêÔºå‰∏çÁ≠âÂæÖÁ∫øÁ®ãÊ±†ÁªìÊùüÔºå‰∏îÊúÄÁªàÂº∫Âà∂ÁªìÊùüJVM(halt)" + LINE +
      "kill  (È´òÂç±) ÂëΩ‰ª§ÊâßË°åÂêéÁõ¥Êé•Âº∫Âà∂ÁªìÊùüJVM(halt)Ôºå‰∏ç‰ºöËøõË°å‰ªª‰ΩïÂÖ≥Èó≠Êìç‰Ωú" + LINE +

      GREEN + "# ÂäüËÉΩÁÆ°ÁêÜ ==========================================" + RESET + LINE +
      "enable  (ÂÆâÂÖ®) ÂêØÁî®Ê∂àÊÅØ‰∫ã‰ª∂Â§ÑÁêÜ Ê≠£Â∏∏ÂìçÂ∫îÊ∂àÊÅØ" + LINE +
      "disable (ÂÆâÂÖ®) ÂÅúÁî®Ê∂àÊÅØ‰∫ã‰ª∂Â§ÑÁêÜ Êó†ËßÜ‰ªª‰ΩïÊ∂àÊÅØ" + LINE +

      GREEN + "# Â•ΩÂèãÁõ∏ÂÖ≥ ==========================================" + RESET + LINE +
      "list users   (ÂÆâÂÖ®) ÂàóÂá∫Â•ΩÂèã" + LINE +
      "list group   (ÂÆâÂÖ®) ÂàóÂá∫Áæ§ÁªÑ" + LINE +
      "list <group> (ÂÆâÂÖ®) ÂàóÂá∫ÊàêÂëò" + LINE +

      GREEN + "# ÊòµÁß∞Áõ∏ÂÖ≥ ==========================================" + RESET + LINE +
      "nickname list (ÂÆâÂÖ®) ÂàóÂá∫ÊòµÁß∞" + LINE +
      "nickname clean (ÂÆâÂÖ®) Ê∏ÖÁ©∫ÊòµÁß∞" + LINE +
      "nickname append (ÂÆâÂÖ®) Âä†ËΩΩ‰∏îÂêàÂπ∂ÊòµÁß∞" + LINE +
      "nickname reload (ÂÆâÂÖ®) Ê∏ÖÁ©∫‰∏îÂä†ËΩΩÊòµÁß∞" + LINE +

      GREEN + "# ÂèëÈÄÅÊ∂àÊÅØ ==========================================" + RESET + LINE +
      "send users <users> <Ê∂àÊÅØ>  (ÂÆâÂÖ®) ÂêëÂ•ΩÂèãÂèëÈÄÅÊ∂àÊÅØ" + LINE +
      "send group <group> <Ê∂àÊÅØ>  (ÂÆâÂÖ®) ÂêëÁæ§ËÅäÂèëÈÄÅÊ∂àÊÅØ" + LINE +
      "send <group> <user> <Ê∂àÊÅØ> (ÂÆâÂÖ®) ÂêëÁæ§ËÅäÂèëÈÄÅATÊ∂àÊÅØ" + LINE +

      GREEN + "# Ê®°ÂûãÁÆ°ÁêÜ ==========================================" + RESET + LINE +
      "schema (ÂÆâÂÖ®) ËØ¶ÁªÜÊòæÁ§∫Êèí‰ª∂ÂíåÊ®°Âùó" + LINE +

      GREEN + "# Êèí‰ª∂ÁÆ°ÁêÜ ==========================================" + RESET + LINE +
      "plugin (ÂÆâÂÖ®) ÂàóÂá∫Êèí‰ª∂" + LINE +

      GREEN + "# Ê®°ÂùóÁÆ°ÁêÜ ==========================================" + RESET + LINE +
      "module (ÂÆâÂÖ®) ÂàóÂá∫Ê®°Âùó" + LINE +

      GREEN + "‚Äª RunnerÂèØËÉΩ‰ºöË¢´‰æùËµñÔºåÂ∫ïÂ±ÇÊìç‰ΩúÊ°ÜÊû∂‰∏çÊ£ÄÊü•‰æùËµñÔºåÊúâÂèØËÉΩÂØºËá¥ÂÖ≥ËÅîÊ®°ÂùóÂ¥©Ê∫É" + RESET + LINE +
      "module unload <ÂêçÁß∞> (È£éÈô©) Âç∏ËΩΩÊåáÂÆöÊ®°Âùó(ÊâßË°å shut + ‰ªéÂ§ÑÁêÜÈìæ‰∏≠ÁßªÈô§)" + LINE +
      "module reboot <ÂêçÁß∞> (È£éÈô©) ÈáçÂêØÊåáÂÆöÊ®°Âùó(ÊâßË°å shut + init + boot)" + LINE +
      "module shut   <ÂêçÁß∞> (È£éÈô©) ÂÖ≥Èó≠ÊåáÂÆöÊ®°Âùó(ÊâßË°å shut)" + LINE +
      "module init   <ÂêçÁß∞> (È£éÈô©) È¢ÑËΩΩÊåáÂÆöÊ®°Âùó(ÊâßË°å init)" + LINE +
      "module boot   <ÂêçÁß∞> (È£éÈô©) ÂêØÂä®ÊåáÂÆöÊ®°Âùó(ÊâßË°å boot)" + LINE +

      GREEN + "# Ë∞ÉËØïÂäüËÉΩ ==========================================" + RESET + LINE +
      "debug [enable|disable] (È£éÈô©) DEBUGÂºÄÂÖ≥ÔºåÊâìÂç∞DEBUGËæìÂá∫ÂíåÊéßÂà∂Êüê‰∫õÂäüËÉΩÔºåÊèí‰ª∂Â¶ÇÊûú‰∏çÈÅµÂÆàÊ†áÂáÜÂºÄÂèëÂèØËÉΩ‰ºöÂØºËá¥Â¥©Ê∫É"

      // @formatter:on

    ;

    CONTENT_COLOR =

      // @formatter:off

      RED            + "RED -------------- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
      GREEN          + "GREEN ------------ THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
      YELLOW         + "YELLOW ----------- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
      BLUE           + "BLUE ------------- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
      MAGENTA        + "MAGENTA ---------- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
      CYAN           + "CYAN ------------- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
      BRIGHT_RED     + "BRIGHT_RED ------- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
      BRIGHT_GREEN   + "BRIGHT_GREEN ----- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
      BRIGHT_YELLOW  + "BRIGHT_YELLOW ---- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
      BRIGHT_BLUE    + "BRIGHT_BLUE ------ THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
      BRIGHT_MAGENTA + "BRIGHT_MAGENTA --- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
      BRIGHT_CYAN    + "BRIGHT_CYAN ------ THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
      WHITE          + "WHITE ------------ THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
      GRAY           + "GRAY ------------- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
      BRIGHT_BLACK   + "BRIGHT_BLACK ----- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET + LINE +
      BRIGHT_WHITE   + "BRIGHT_WHITE ----- THE QUICK BROWN FOX JUMP OVER A LAZY DOG | the quick brown fox jump over a lazy dog" + RESET

      // @formatter:on

    ;

    DEFAULT_CONFIG =

      // @formatter:off

      """
      #===============================================================================
      # Ë¥¶Âè∑ÈÖçÁΩÆ
      #===============================================================================
      # ËÆ§ËØÅÊ®°Âºè PASSWD/QRCODE
      CONF_ACCOUNT_AUTH=PASSWD
      # Ë¥¶Âè∑
      CONF_ACCOUNT_USERNAME=0000
      # ÂØÜÁ†Å
      CONF_ACCOUNT_PASSWORD=0000
      #===============================================================================
      # ËÆæÂ§áËÆæÁΩÆ
      #===============================================================================
      # ËÆæÂ§áÁ±ªÂûã IPAD/MACOS/PAD/PHONE/WATCH
      CONF_DEVICE_TYPE=IPAD
      # ËÆæÂ§á‰ø°ÊÅØ ÈúÄË¶Å‰ΩøÁî®AokiÁîüÊàê
      CONF_DEVICE_INFO=device.json
      #===============================================================================
      # ËÆæÂ§áËÆæÁΩÆ
      #===============================================================================
      # ÂëΩ‰ª§ËØÜÂà´Ê≠£Âàô
      CONF_COMMAND_REGEX=/[a-zA-Z0-9]{2,16}
      # ÁõëÂê¨Âô®Á∫øÁ®ãÊ±†
      CONF_THREADS_MONITOR=0
      # ÂÆöÊó∂Âô®Á∫øÁ®ãÊ±†
      CONF_THREADS_SCHEDULE=0
      #===============================================================================
      """

      .replaceAll("CONF_ACCOUNT_AUTH",     String.join(".", CONF_ACCOUNT_AUTH))
      .replaceAll("CONF_ACCOUNT_USERNAME", String.join(".", CONF_ACCOUNT_USERNAME))
      .replaceAll("CONF_ACCOUNT_PASSWORD", String.join(".", CONF_ACCOUNT_PASSWORD))
      .replaceAll("CONF_DEVICE_TYPE",      String.join(".", CONF_DEVICE_TYPE))
      .replaceAll("CONF_DEVICE_INFO",      String.join(".", CONF_DEVICE_INFO))
      .replaceAll("CONF_COMMAND_REGEX",    String.join(".", CONF_COMMAND_REGEX))
      .replaceAll("CONF_THREADS_MONITOR",  String.join(".", CONF_THREADS_MONITOR))
      .replaceAll("CONF_THREADS_SCHEDULE", String.join(".", CONF_THREADS_SCHEDULE))

      // @formatter:on

    ;

    CONSOLE_PROMPT = "[console]$ ";

  }

  //= ==================================================================================================================
  //
  //  Ê°ÜÊû∂Â∏∏Èáè
  //
  //= ==================================================================================================================

  private static final Latch LATCH = new Latch();

  //= ==================================================================================================================
  //
  //  Ê°ÜÊû∂ÂèòÈáè
  //
  //= ==================================================================================================================

  private static String NAMESPACE; // ÂëΩÂêçÁ©∫Èó¥

  private static volatile boolean EVENT_ENABLE;

  private static volatile boolean SHUTDOWN_HALT;
  private static volatile boolean SHUTDOWN_DROP;

  private static volatile LoggerX.Level LEVEL;

  private static FurryBlackKernelConfig kernelConfig;
  private static FurryBlackSystemConfig systemConfig;

  private static LoggerX logger;
  private static Terminal terminal;

  private static Bot bot;
  private static Schema schema;
  private static Nickname nickname;

  private static Path FOLDER_ROOT;
  private static Path FOLDER_CONFIG;
  private static Path FOLDER_PLUGIN;
  private static Path FOLDER_DEPEND;
  private static Path FOLDER_MODULE;
  private static Path FOLDER_LOGGER;

  private static String MESSAGE_INFO;
  private static String MESSAGE_EULA;
  private static String MESSAGE_HELP;
  private static String MESSAGE_LIST_USERS;
  private static String MESSAGE_LIST_GROUP;

  private static ThreadPoolExecutor MONITOR_PROCESS;
  private static ScheduledThreadPoolExecutor SCHEDULE_SERVICE;

  public static void main(String[] args) throws InterruptedException {

    //= ================================================================================================================
    //=
    //=
    //= ‰∫§‰∫íÊ®°Âºè
    //=
    //=
    //= ================================================================================================================

    boolean dryRun = false;

    List<String> arguments = List.of(args);

    // ÊòæÁ§∫ ‰ø°ÊÅØ
    if (arguments.contains("--info")) {
      System.out.println(CONTENT_INFO);
      System.out.println();
      dryRun = true;
    }

    // ÊòæÁ§∫ Â∏ÆÂä©
    if (arguments.contains("--help")) {
      System.out.println(CONTENT_HELP);
      System.out.println();
      dryRun = true;
    }

    // ÊòæÁ§∫ È¢úËâ≤
    if (arguments.contains("--color")) {
      System.out.println(CONTENT_COLOR);
      System.out.println();
      dryRun = true;
    }

    if (dryRun) return;

    //= ================================================================================================================
    //=
    //=
    //= Ê≠£ÂºèÊ®°Âºè
    //=
    //=
    //= ================================================================================================================

    System.out.println("[FurryBlack][BOOT]FurryBlackMirai - " + APP_VERSION + " " + TimeTool.datetime(BOOT_TIME));

    //= ================================================================================================================
    //=
    //= ÂÜÖÊ†∏Á≥ªÁªü
    //=
    //= ================================================================================================================

    FurryBlackArgument argument = FurryBlackArgument.parse(args);

    //= ========================================================================
    //= ÂëΩÂêçÁ©∫Èó¥

    NAMESPACE = argument.getKernelParameter("namespace");

    if (NAMESPACE == null || NAMESPACE.isBlank()) {
      System.out.println("[FurryBlack][ARGS]ÈªòËÆ§ÂëΩÂêçÁ©∫Èó¥");
    } else {
      System.out.println("[FurryBlack][ARGS]ËÆæÁΩÆÂëΩÂêçÁ©∫Èó¥ " + NAMESPACE);
    }

    //= ========================================================================
    //= ÊâìÂç∞ÂèÇÊï∞

    System.out.println("[FurryBlack][ARGS] ÈÄâÈ°π -> " + argument.options.size());

    for (String it : argument.options) {
      System.out.println("[FurryBlack][ARGS]    " + it);
    }

    System.out.println("[FurryBlack][ARGS] ÂèÇÊï∞ -> " + argument.parameters.size());

    for (Map.Entry<String, String> entry : argument.parameters.entrySet()) {
      String k = entry.getKey();
      String v = entry.getValue();
      System.out.println("[FurryBlack][ARGS]    " + k + "=" + v);
    }

    //= ========================================================================
    //= ÂÜÖÊ†∏ÂèÇÊï∞

    kernelConfig = FurryBlackKernelConfig.getInstance(argument);

    if (kernelConfig.debug) {
      System.out.println("[FurryBlack][ARGS]Ë∞ÉËØïÂºÄÂÖ≥ - Ë∞ÉËØïÊ®°Âºè");
    } else {
      System.out.println("[FurryBlack][ARGS]Ë∞ÉËØïÂºÄÂÖ≥ - Áîü‰∫ßÊ®°Âºè");
    }

    if (kernelConfig.unsafe) {
      System.out.println("[FurryBlack][ARGS]ÂÆâÂÖ®Á≠ñÁï• - ÂÆΩÊùæÁ≠ñÁï•");
    } else {
      System.out.println("[FurryBlack][ARGS]ÂÆâÂÖ®Á≠ñÁï• - Ê†áÂáÜÁ≠ñÁï•");
    }

    if (kernelConfig.upgrade) {
      System.out.println("[FurryBlack][ARGS]ÂçèËÆÆË°•‰∏Å - ÂêØÁî®ÂçáÁ∫ß");
    }

    if (kernelConfig.noLogin) {
      System.out.println("[FurryBlack][ARGS]ÁôªÂΩïÊ®°Âºè - Ë∑≥ËøáÁôªÂΩï");
    } else {
      System.out.println("[FurryBlack][ARGS]ÁôªÂΩïÊ®°Âºè - ÁúüÂÆûÁôªÂΩï");
    }

    if (kernelConfig.noConsole) {
      System.out.println("[FurryBlack][ARGS]ÁªàÁ´ØÊ®°Âºè - ÂÖ≥Èó≠ÁªàÁ´Ø");
    } else {
      if (kernelConfig.noJline) {
        System.out.println("[FurryBlack][ARGS]ÁªàÁ´ØÊ®°Âºè - Á≤æÁÆÄÁªàÁ´Ø");
      } else {
        System.out.println("[FurryBlack][ARGS]ÁªàÁ´ØÊ®°Âºè - ÂÆåÊï¥ÁªàÁ´Ø");
      }
    }

    if (kernelConfig.forceExit) {
      System.out.println("[FurryBlack][ARGS]ÂÖ≥Èó≠Á≠ñÁï• - Âº∫Âà∂ÈÄÄÂá∫");
    } else {
      System.out.println("[FurryBlack][ARGS]ÂÖ≥Èó≠Á≠ñÁï• - Ê≠£Â∏∏ÈÄÄÂá∫");
    }

    //= ========================================================================
    //= Êó•ÂøóÁ≠âÁ∫ß

    if (kernelConfig.level != null) {

      LEVEL = LoggerX.Level.getByName(kernelConfig.level);

      if (LEVEL == null) {
        System.out.println("[FurryBlack][ARGS]Êó•ÂøóÁ∫ßÂà´ - ËæìÂÖ•ÂÄºÊó†Êïà -> " + kernelConfig.level + ", ÂèØÁî®Êó•ÂøóÁ∫ßÂà´‰∏∫:");
        System.out.println("[FurryBlack][ARGS] - MUTE");
        System.out.println("[FurryBlack][ARGS] - FATAL");
        System.out.println("[FurryBlack][ARGS] - ERROR");
        System.out.println("[FurryBlack][ARGS] - WARN");
        System.out.println("[FurryBlack][ARGS] - HINT");
        System.out.println("[FurryBlack][ARGS] - SEEK");
        System.out.println("[FurryBlack][ARGS] - INFO");
        System.out.println("[FurryBlack][ARGS] - DEBUG");
        System.out.println("[FurryBlack][ARGS] - VERBOSE");
        System.out.println("[FurryBlack][ARGS] - DEVELOP");
        System.out.println("[FurryBlack][ARGS] - EVERYTHING");
        throw new CoreException("[FurryBlack][FATAL] Logger level invalid -> " + kernelConfig.level);
      } else {
        System.out.println("[FurryBlack][ARGS]Êó•ÂøóÁ∫ßÂà´ - " + LEVEL.name());
      }

    }

    //= ========================================================================
    //= Êó•ÂøóÂêéÁ´Ø

    if (kernelConfig.provider != null) {
      boolean result = LoggerXFactory.setDefault(kernelConfig.provider);
      if (result) {
        System.out.println("[FurryBlack][ARGS]Êó•ÂøóÂêéÁ´Ø - " + LoggerXFactory.getDefault());
      } else {
        System.out.println("[FurryBlack][ARGS]Êó•ÂøóÂêéÁ´Ø - ÊåáÂÆöÂêéÁ´ØÂ∞öÊú™Ê≥®ÂÜå -> " + kernelConfig.provider + ", Â∑≤Ê≥®ÂÜåÊó•ÂøóÂêéÁ´Ø‰∏∫:");
        LoggerXFactory.getProviders().forEach((k, v) -> System.out.println("[FurryBlack][ARGS] - " + k + "/" + v));
        System.out.println("[FurryBlack][ARGS]Êó•ÂøóÂêéÁ´Ø - Â∞ùËØïÂä†ËΩΩÊó•ÂøóÂêéÁ´Ø -> " + kernelConfig.provider);
        Class<?> clazz;
        Class<? extends LoggerX> loggerClazz;
        try {
          clazz = Class.forName(kernelConfig.provider);
        } catch (Exception exception) {
          throw new CoreException("[FurryBlack][ARGS]Êó•ÂøóÂêéÁ´Ø - Â∞ùËØïÂä†ËΩΩÊó•ÂøóÂêéÁ´ØÂ§±Ë¥•, Âä†ËΩΩÁ±ªÂ§±Ë¥• -> " + kernelConfig.provider, exception);
        }
        if (LoggerX.class.isAssignableFrom(clazz)) {
          @SuppressWarnings("unchecked")
          Class<? extends LoggerX> tempForSuppress = (Class<? extends LoggerX>) clazz;
          loggerClazz = tempForSuppress;
        } else {
          throw new CoreException("[FurryBlack][ARGS]Êó•ÂøóÂêéÁ´Ø - Â∞ùËØïÂä†ËΩΩÊó•ÂøóÂêéÁ´ØÂ§±Ë¥•, ÊåáÂÆöÁöÑÁ±ªÊú™ÁªßÊâø LoggerX -> " + kernelConfig.provider);
        }
        if (!loggerClazz.isAnnotationPresent(LoggerXConfig.class)) {
          throw new CoreException("[FurryBlack][ARGS]Êó•ÂøóÂêéÁ´Ø - Â∞ùËØïÂä†ËΩΩÊó•ÂøóÂêéÁ´ØÂ§±Ë¥•, ÊåáÂÆöÁöÑÁ±ªÊú™Ê∑ªÂä† LoggerXConfig Ê≥®Ëß£ -> " + kernelConfig.provider);
        }
        String registerProvider = LoggerXFactory.registerProvider(loggerClazz);
        CoreException.check("Â∞ùËØïÂä†ËΩΩÊó•ÂøóÂêéÁ´ØÂ§±Ë¥•, Ê≥®ÂÜåÊó•ÂøóÂêéÁ´ØÂ§±Ë¥• -> ", registerProvider);
        LoggerXFactory.setDefault(loggerClazz);
        System.out.println("[FurryBlack][ARGS]Êó•ÂøóÂêéÁ´Ø - Âä†ËΩΩÊó•ÂøóÂêéÁ´ØÊàêÂäü -> " + LoggerXFactory.getDefault());
      }
    }

    System.out.println("[FurryBlack][INIT]ÂÜÖÊ†∏ÈÖçÁΩÆÂàùÂßãÂåñÂÆåÊàê");

    //= ================================================================================================================
    //= ÁªàÁ´ØÂ≠êÁ≥ªÁªü
    //= ================================================================================================================

    if (kernelConfig.noConsole) {
      terminal = new NoConsoleTerminal();
    } else {
      if (kernelConfig.noJline) {
        terminal = new StdinTerminal();
      } else {
        terminal = new JlineTerminal();
      }
    }

    FurryBlack.println("[FurryBlack][INIT]ÁªàÁ´ØÁ≥ªÁªüÂàùÂßãÂåñÂÆåÊàê");

    //= ================================================================================================================
    //= Êñá‰ª∂Â≠êÁ≥ªÁªü
    //= ================================================================================================================

    //= ========================================================================
    //= ÂàùÂßãÂåñÁõÆÂΩï

    FOLDER_ROOT = Paths.get(System.getProperty("user.dir"));

    FOLDER_CONFIG = FileEnhance.get(FOLDER_ROOT, "config");
    FOLDER_PLUGIN = FileEnhance.get(FOLDER_ROOT, "plugin");
    FOLDER_DEPEND = FileEnhance.get(FOLDER_ROOT, "depend");
    FOLDER_MODULE = FileEnhance.get(FOLDER_ROOT, "module");
    FOLDER_LOGGER = FileEnhance.get(FOLDER_ROOT, "logger");

    String ensureFolderConfig = FileEnhance.ensureFolderSafe(FOLDER_CONFIG);
    String ensureFolderPlugin = FileEnhance.ensureFolderSafe(FOLDER_PLUGIN);
    String ensureFolderDepend = FileEnhance.ensureFolderSafe(FOLDER_DEPEND);
    String ensureFolderModule = FileEnhance.ensureFolderSafe(FOLDER_MODULE);
    String ensureFolderLogger = FileEnhance.ensureFolderSafe(FOLDER_LOGGER);

    CoreException.check("ÂàùÂßãÂåñÈÖçÁΩÆÁõÆÂΩïÂ§±Ë¥• -> ", ensureFolderConfig);
    CoreException.check("ÂàùÂßãÂåñÊèí‰ª∂ÁõÆÂΩïÂ§±Ë¥• -> ", ensureFolderPlugin);
    CoreException.check("ÂàùÂßãÂåñ‰æùËµñÁõÆÂΩïÂ§±Ë¥• -> ", ensureFolderDepend);
    CoreException.check("ÂàùÂßãÂåñÊï∞ÊçÆÁõÆÂΩïÂ§±Ë¥• -> ", ensureFolderModule);
    CoreException.check("ÂàùÂßãÂåñÊó•ÂøóÁõÆÂΩïÂ§±Ë¥• -> ", ensureFolderLogger);

    FurryBlack.println("[FurryBlack][INIT]Â∫îÁî®Â∑•‰ΩúÁõÆÂΩï " + FOLDER_ROOT);
    FurryBlack.println("[FurryBlack][INIT]Êèí‰ª∂Êâ´ÊèèÁõÆÂΩï " + FOLDER_PLUGIN);
    FurryBlack.println("[FurryBlack][INIT]Ê®°Âùó‰æùËµñÁõÆÂΩï " + FOLDER_DEPEND);
    FurryBlack.println("[FurryBlack][INIT]Ê®°ÂùóÊï∞ÊçÆÁõÆÂΩï " + FOLDER_MODULE);
    FurryBlack.println("[FurryBlack][INIT]Ê†∏ÂøÉÊó•ÂøóÁõÆÂΩï " + FOLDER_LOGGER);

    FurryBlack.println("[FurryBlack][INIT]Êó•ÂøóÂêéÁ´Ø " + LoggerXFactory.getDefault());
    FurryBlack.println("[FurryBlack][INIT]Êó•ÂøóÁ∫ßÂà´ " + LoggerX.getLevel().name());

    //= ========================================================================
    //= ÂàùÂßãÂåñÊó•Âøó

    if (LoggerXFactory.needLoggerFile()) {

      String name = TimeTool.format("yyyy-MM-dd HH-mm-ss", BOOT_TIME) + ".txt";
      Path loggerFile = FileEnhance.get(FOLDER_LOGGER, name);
      CoreException.check("Êó•ÂøóÊñá‰ª∂ÂàùÂßãÂåñÂ§±Ë¥• -> ", FileEnhance.ensureFileSafe(loggerFile));

      try {
        LoggerXFactory.initLoggerFile(loggerFile.toFile());
      } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException exception) {
        throw new CoreException("Êó•ÂøóÂêéÁ´ØÂàùÂßãÂåñÂ§±Ë¥• -> " + loggerFile, exception);
      }

      FurryBlack.println("[FurryBlack][INIT]Êó•ÂøóÊñá‰ª∂ " + name);
    }

    logger = LoggerXFactory.newLogger(FurryBlack.class);

    FurryBlack.println("[FurryBlack][INIT]Êó•ÂøóÁ≥ªÁªüÂàùÂßãÂåñÂÆåÊàê");

    //= ========================================================================
    //= ÁªàÁ´ØÊé•ÁÆ°

    logger.hint("Êó•ÂøóÁ≥ªÁªüÊé•ÁÆ° " + terminal.getClass().getSimpleName() + " -> " + logger.getClass().getSimpleName());

    logger.info("Á≥ªÁªüÁä∂ÊÄÅ/Â∫îÁî®Â∑•‰ΩúÁõÆÂΩï " + FOLDER_ROOT);
    logger.info("Á≥ªÁªüÁä∂ÊÄÅ/Êèí‰ª∂Êâ´ÊèèÁõÆÂΩï " + FOLDER_PLUGIN);
    logger.info("Á≥ªÁªüÁä∂ÊÄÅ/Ê®°Âùó‰æùËµñÁõÆÂΩï " + FOLDER_DEPEND);
    logger.info("Á≥ªÁªüÁä∂ÊÄÅ/Ê®°ÂùóÊï∞ÊçÆÁõÆÂΩï " + FOLDER_MODULE);
    logger.info("Á≥ªÁªüÁä∂ÊÄÅ/Ê†∏ÂøÉÊó•ÂøóÁõÆÂΩï " + FOLDER_LOGGER);

    logger.info("ÂÜÖÊ†∏ÈÖçÁΩÆ/Êó•ÂøóÂêéÁ´Ø " + LoggerXFactory.getDefault());
    logger.info("ÂÜÖÊ†∏ÈÖçÁΩÆ/Êó•ÂøóÁ∫ßÂà´ " + LoggerX.getLevel().name());

    if (kernelConfig.debug) {
      logger.info("ÂÜÖÊ†∏ÈÖçÁΩÆ/Ë∞ÉËØïÂºÄÂÖ≥ - Ë∞ÉËØïÊ®°Âºè");
    } else {
      logger.info("ÂÜÖÊ†∏ÈÖçÁΩÆ/Ë∞ÉËØïÂºÄÂÖ≥ - Áîü‰∫ßÊ®°Âºè");
    }

    if (kernelConfig.unsafe) {
      logger.info("ÂÜÖÊ†∏ÈÖçÁΩÆ/ÂÆâÂÖ®Á≠ñÁï• - ÂÆΩÊùæÁ≠ñÁï•");
    } else {
      logger.info("ÂÜÖÊ†∏ÈÖçÁΩÆ/ÂÆâÂÖ®Á≠ñÁï• - Ê†áÂáÜÁ≠ñÁï•");
    }

    if (kernelConfig.upgrade) {
      logger.info("ÂÜÖÊ†∏ÈÖçÁΩÆ/ÂçèËÆÆË°•‰∏Å - ÂêØÁî®ÂçáÁ∫ß");
    }

    if (kernelConfig.noLogin) {
      logger.info("ÂÜÖÊ†∏ÈÖçÁΩÆ/ÁôªÂΩïÊ®°Âºè - Ë∑≥ËøáÁôªÂΩï");
    } else {
      logger.info("ÂÜÖÊ†∏ÈÖçÁΩÆ/ÁôªÂΩïÊ®°Âºè - ÁúüÂÆûÁôªÂΩï");
    }

    if (kernelConfig.noConsole) {
      logger.info("ÂÜÖÊ†∏ÈÖçÁΩÆ/ÁªàÁ´ØÊ®°Âºè - ÂÖ≥Èó≠ÁªàÁ´Ø");
    } else {
      if (kernelConfig.noJline) {
        logger.info("ÂÜÖÊ†∏ÈÖçÁΩÆ/ÁªàÁ´ØÊ®°Âºè - Á≤æÁÆÄÁªàÁ´Ø");
      } else {
        logger.info("ÂÜÖÊ†∏ÈÖçÁΩÆ/ÁªàÁ´ØÊ®°Âºè - ÂÆåÊï¥ÁªàÁ´Ø");
      }
    }

    if (kernelConfig.forceExit) {
      logger.info("ÂÜÖÊ†∏ÈÖçÁΩÆ/ÂÖ≥Èó≠Á≠ñÁï• - Âº∫Âà∂ÈÄÄÂá∫");
    } else {
      logger.info("ÂÜÖÊ†∏ÈÖçÁΩÆ/ÂÖ≥Èó≠Á≠ñÁï• - Ê≠£Â∏∏ÈÄÄÂá∫");
    }

    SHUTDOWN_HALT = kernelConfig.forceExit;

    //= ================================================================================================================
    //=
    //= Ê°ÜÊû∂Á≥ªÁªü
    //=
    //= ================================================================================================================

    logger.hint("ÂàùÂßãÂåñÁ≥ªÁªüÊ†∏ÂøÉ");

    //= ================================================================================================================
    //= Â∫îÁî®ÈÖçÁΩÆ
    //= ================================================================================================================

    //= ========================================================================
    //= Âä†ËΩΩÈÖçÁΩÆÊñá‰ª∂

    Path FILE_CONFIG = FileEnhance.get(FOLDER_CONFIG, "application.properties");

    logger.info("Ê£ÄÊü•ÈÖçÁΩÆÊñá‰ª∂");

    if (Files.exists(FILE_CONFIG)) {

      Properties properties = new Properties();

      logger.info("Âä†ËΩΩÈÖçÁΩÆÊñá‰ª∂");

      try (
        InputStream inputStream = Files.newInputStream(FILE_CONFIG);
        Reader reader = new InputStreamReader(inputStream)
      ) {
        properties.load(reader);
      } catch (IOException exception) {
        throw new CoreException("ËØªÂèñÈÖçÁΩÆÊñá‰ª∂Â§±Ë¥• -> " + FILE_CONFIG, exception);
      }

      logger.info("ÂêàÂπ∂ÈÖçÁΩÆÊñá‰ª∂");

      for (Map.Entry<Object, Object> entry : properties.entrySet()) {
        var k = entry.getKey();
        var v = entry.getValue();
        if (k == null || k.toString().isBlank()) {
          logger.warning("‰∏¢ÂºÉÊó†ÊïàÈÖçÁΩÆ " + k + "=" + v);
          continue;
        }
        if (v == null || k.toString().isBlank()) {
          logger.warning("‰∏¢ÂºÉÊó†ÊïàÈÖçÁΩÆ " + k + "=" + v);
          continue;
        }
        argument.properties.put(k, v);
      }

    } else {
      logger.info("Ë∑≥ËøáÈÖçÁΩÆÊñá‰ª∂");
    }

    //= ========================================================================
    //= Ê£ÄÊü•ÈÖçÁΩÆÈ°πÁõÆ

    logger.info("Ê£ÄÊü•ÈÖçÁΩÆÈ°πÁõÆ");

    try {

      systemConfig = FurryBlackSystemConfig.getInstance(argument);

    } catch (FirstBootException exception) {

      logger.fatal("ÂøÖË¶ÅÈÖçÁΩÆÈ°πÁõÆÁº∫Â§±, ÂÜôÂÖ•ÈªòËÆ§ÈÖçÁΩÆÊñá‰ª∂ -> " + FILE_CONFIG);

      try {
        Files.writeString(FILE_CONFIG, DEFAULT_CONFIG);
      } catch (IOException ioException) {
        logger.fatal("ÂÜôÂÖ•ÈªòËÆ§ÈÖçÁΩÆÊñá‰ª∂Â§±Ë¥•", ioException);
        CoreException CoreException = new CoreException(ioException);
        CoreException.addSuppressed(exception);
        throw CoreException;

      }

      throw exception;

    }

    //= ================================================================================================================
    //= Ê®°ÊùøÊ∂àÊÅØÂ≠êÁ≥ªÁªü
    //= ================================================================================================================

    logger.hint("Âä†ËΩΩÂÜÖÁΩÆÊ∂àÊÅØ");

    {

      Path FILE_EULA = FileEnhance.get(FOLDER_CONFIG, "message_eula.txt");
      Path FILE_INFO = FileEnhance.get(FOLDER_CONFIG, "message_info.txt");
      Path FILE_HELP = FileEnhance.get(FOLDER_CONFIG, "message_help.txt");

      MESSAGE_EULA = FileEnhance.read(FILE_EULA).replace("\\$VERSION", APP_VERSION);
      MESSAGE_INFO = FileEnhance.read(FILE_INFO).replace("\\$VERSION", APP_VERSION);
      MESSAGE_HELP = FileEnhance.read(FILE_HELP).replace("\\$VERSION", APP_VERSION);

      String SHA256_EULA = DigestTool.sha256(MESSAGE_EULA);
      String SHA256_INFO = DigestTool.sha256(MESSAGE_INFO);
      String SHA256_HELP = DigestTool.sha256(MESSAGE_INFO);

      logger.info("SHA-256 EULA -> " + SHA256_EULA);
      logger.info("SHA-256 INFO -> " + SHA256_INFO);
      logger.info("SHA-256 HELP -> " + SHA256_HELP);

      MESSAGE_EULA = MESSAGE_EULA + "\r\nSHA-256: " + SHA256_EULA;
      MESSAGE_INFO = MESSAGE_INFO + "\r\nSHA-256: " + SHA256_INFO;
      MESSAGE_HELP = MESSAGE_HELP + "\r\nSHA-256: " + SHA256_HELP;

    }

    //= ================================================================================================================
    //= ÊòµÁß∞Â≠êÁ≥ªÁªü
    //= ================================================================================================================

    nickname = Nickname.getInstance();

    logger.hint("Âä†ËΩΩÂ∏∏Áî®ÊòµÁß∞");

    nickname.cleanNickname();
    nickname.appendNickname();

    //= ================================================================================================================
    //= Êú∫Âô®‰∫∫Â≠êÁ≥ªÁªü
    //= ================================================================================================================

    logger.hint("ÂàùÂßãÂåñÊú∫Âô®‰∫∫");

    //= ========================================================================
    //= ÂçáÁ∫ßÂÆ¢Êà∑Á´ØÂçèËÆÆ

    if (kernelConfig.upgrade) {

      logger.info("ÂçáÁ∫ßÂÆ¢Êà∑Á´ØÂçèËÆÆ");

      Class<?> clazz;
      try {
        clazz = Class.forName("xyz.cssxsh.mirai.tool.FixProtocolVersion");
      } catch (ClassNotFoundException exception) {
        throw new CoreException("[UPGRADE/PROTOCOL] Load class failure", exception);
      }

      Method methodUpdate;
      try {
        methodUpdate = clazz.getMethod("update");
      } catch (NoSuchMethodException exception) {
        throw new CoreException("[UPGRADE/PROTOCOL] Load method failure", exception);
      }

      try {
        methodUpdate.invoke(null);
      } catch (IllegalAccessException | InvocationTargetException exception) {
        throw new CoreException("[UPGRADE/PROTOCOL] Invoke method failure", exception);
      }

      Method methodInfo;
      try {
        methodInfo = clazz.getMethod("info");
      } catch (NoSuchMethodException exception) {
        throw new CoreException("[UPGRADE/PROTOCOL] Load method failure", exception);
      }

      Object invoke;
      try {
        invoke = methodInfo.invoke(null);
      } catch (IllegalAccessException | InvocationTargetException | ClassCastException exception) {
        throw new CoreException("[UPGRADE/PROTOCOL] Invoke method failure", exception);
      }

      try {
        if (invoke instanceof Map<?, ?> map) {
          @SuppressWarnings("unchecked")
          Map<BotConfiguration.MiraiProtocol, String> info = (Map<BotConfiguration.MiraiProtocol, String>) map;
          info.forEach((k, v) -> logger.info(v + " -> " + k.name()));
        }
      } catch (Exception exception) {
        throw new CoreException("[UPGRADE/PROTOCOL] Invoke method failure", exception);
      }
    }

    //= ========================================================================
    //= Âä†ËΩΩÂÆ¢Êà∑Á´ØÈÖçÁΩÆ

    logger.info("Âä†ËΩΩÂÆ¢Êà∑Á´ØÈÖçÁΩÆ");

    BotConfiguration botConfiguration = new BotConfiguration();

    botConfiguration.setLoginCacheEnabled(true);
    botConfiguration.enableContactCache();
    botConfiguration.setCacheDir(FileEnhance.get(FOLDER_CONFIG, "cache").toFile());
    botConfiguration.setProtocol(systemConfig.deviceType.toMiraiProtocol());
    botConfiguration.loadDeviceInfoJson(systemConfig.deviceInfo);
    botConfiguration.setBotLoggerSupplier(i -> LoggerXFactory.newLogger("MiraiBot"));
    botConfiguration.setNetworkLoggerSupplier(i -> LoggerXFactory.newLogger("MiraiNet"));

    //= ========================================================================
    //= Âä†ËΩΩÂÆ¢Êà∑Á´ØËÆ§ËØÅ

    logger.info("Âä†ËΩΩÂÆ¢Êà∑Á´ØËÆ§ËØÅ");

    BotAuthorization authorization = switch (systemConfig.authMod) {
      case QRCODE -> BotAuthorization.byQRCode();
      case PASSWD -> BotAuthorization.byPassword(systemConfig.password);
    };

    //= ========================================================================
    //= ÂàõÂª∫Êú∫Âô®‰∫∫ÂÆû‰æã

    logger.info("ÂàõÂª∫Êú∫Âô®‰∫∫ÂÆû‰æã");

    bot = BotFactory.INSTANCE.newBot(systemConfig.username, authorization, botConfiguration);

    //= ========================================================================
    //= ËÆ¢ÈòÖÂÆ¢Êà∑Á´Ø‰∫ã‰ª∂

    logger.info("ËÆ¢ÈòÖÂÆ¢Êà∑Á´Ø‰∫ã‰ª∂");

    Listener<UserMessageEvent> userMessageEventListener = GlobalEventChannel.INSTANCE.subscribeAlways(UserMessageEvent.class, FurryBlack::handleUsersMessage);
    Listener<GroupMessageEvent> groupMessageEventListener = GlobalEventChannel.INSTANCE.subscribeAlways(GroupMessageEvent.class, FurryBlack::handleGroupMessage);

    Listener<NewFriendRequestEvent> newFriendRequestEventListener = GlobalEventChannel.INSTANCE.subscribeAlways(NewFriendRequestEvent.class, event -> {
      logger.hint("BOTË¢´Ê∑ªÂä†Â•ΩÂèã " + event.getFromNick() + "(" + event.getFromId() + ")");
      event.accept();
    });

    Listener<BotInvitedJoinGroupRequestEvent> botInvitedJoinGroupRequestEventListener = GlobalEventChannel.INSTANCE.subscribeAlways(BotInvitedJoinGroupRequestEvent.class, event -> {
      logger.hint("BOTË¢´ÈÇÄËØ∑ÂÖ•Áæ§ " + event.getGroupName() + "(" + event.getGroupId() + ") ÈÇÄËØ∑‰∫∫ " + event.getInvitorNick() + "(" + event.getInvitorId() + ")");
      event.accept();
    });

    Listener<MemberJoinEvent> memberJoinEventListener = GlobalEventChannel.INSTANCE.subscribeAlways(MemberJoinEvent.class, event -> {
      String user = event.getUser().getNick() + "(" + event.getUser().getId() + ")";
      if (event instanceof MemberJoinEvent.Active) {
        logger.hint("Áî®Êà∑Áî≥ËØ∑Âä†Áæ§ " + user + " ‚Üí " + event.getGroup().getName() + "(" + event.getGroupId() + ")");
      } else if (event instanceof MemberJoinEvent.Invite) {
        logger.hint("Áî®Êà∑ÂèóÈÇÄËøõÁæ§ " + user + " ‚Üí " + event.getGroup().getName() + "(" + event.getGroupId() + ")");
      }
    });

    Listener<MemberLeaveEvent> memberLeaveEventListener = GlobalEventChannel.INSTANCE.subscribeAlways(MemberLeaveEvent.class, event -> {
      String user = event.getUser().getNick() + "(" + event.getUser().getId() + ")";
      if (event instanceof MemberLeaveEvent.Quit) {
        logger.hint("Áî®Êà∑‰∏ªÂä®ÈÄÄÁæ§ " + user + " ‚Üí " + event.getGroup().getName() + "(" + event.getGroupId() + ")");
      } else if (event instanceof MemberLeaveEvent.Kick) {
        logger.hint("Áî®Êà∑Ë¢´Ë∏¢Âá∫Áæ§ " + user + " ‚Üí " + event.getGroup().getName() + "(" + event.getGroupId() + ")");
      }
    });

    //= ================================================================================================================
    //= Êèí‰ª∂Â≠êÁ≥ªÁªü
    //= ================================================================================================================

    schema = new Schema(FOLDER_PLUGIN);

    //= ========================================================================
    // Êâ´ÊèèÊèí‰ª∂

    schema.scanPlugin();

    //= ========================================================================
    // Êâ´ÊèèÊ®°Âùó

    schema.scanModule();

    //= ========================================================================
    // Ê≥®ÂÜåÊ®°Âùó

    schema.loadModule();

    //= ========================================================================
    // ÂàõÂª∫Ê®°Âùó

    schema.makeModule();

    //= ========================================================================
    // ÊâßË°åÂàùÂßãÂåñÊñπÊ≥ï

    schema.initModule();

    //= ================================================================================================================
    //= Êú∫Âô®‰∫∫Â≠êÁ≥ªÁªü
    //= ================================================================================================================

    //= ========================================================================
    //= ÁôªÂΩïÊú∫Âô®‰∫∫

    if (kernelConfig.noLogin) {
      logger.warning("ÊåáÂÆö‰∫Ü--no-loginÂèÇÊï∞ Ë∑≥ËøáÁôªÂΩï");
    } else {
      logger.hint("ÁôªÂΩïÊú∫Âô®‰∫∫");
      bot.login();
    }

    //= ================================================================================================================
    //= Êèí‰ª∂Â≠êÁ≥ªÁªü
    //= ================================================================================================================

    //= ========================================================================
    //= ÂêØÂä®Á∫øÁ®ãÊ±†

    logger.seek("ÂêØÂä®Á∫øÁ®ãÊ±†");

    logger.info("ÂêØÂä®ÁõëÂê¨Âô®Á∫øÁ®ãÊ±†");

    MONITOR_PROCESS = new ThreadPoolExecutor(
      systemConfig.monitorThreads,
      systemConfig.monitorThreads,
      0L,
      TimeUnit.MILLISECONDS,
      new LinkedBlockingQueue<>()
    );

    logger.info("ÂêØÂä®ÂÆöÊó∂Âô®Á∫øÁ®ãÊ±†");

    SCHEDULE_SERVICE = new ScheduledThreadPoolExecutor(
      systemConfig.scheduleThreads,
      Executors.defaultThreadFactory(),
      (runnable, executor) -> {
        throw new CoreException("Ê∑ªÂä†ËÆ°Âàí‰ªªÂä°Âà∞Á∫øÁ®ãÊ±†Â§±Ë¥•  " + runnable.toString() + " -> " + executor.toString());
      }
    );

    //= ========================================================================
    //= ÂêØÂä®Ê®°Âùó

    schema.bootModule();

    //= ========================================================================
    //= Ê≥®ÂÜåÈí©Â≠ê

    Thread currentThread = Thread.currentThread();

    Runtime.getRuntime().addShutdownHook(new Thread(() -> {
      LATCH.signal();
      try {
        currentThread.join();
      } catch (InterruptedException exception) {
        FurryBlack.println("[FurryBlack][EXIT]FATAL -> Shutdown hook interrupted, Shutdown process not finished.");
        exception.printStackTrace();
      }
      FurryBlack.println("[FurryBlack][EXIT]FurryBlackPlus normally closed, Bye.");
      if (isShutdownHalt()) {
        FurryBlack.println("[FurryBlack][EXIT]FurryBlackPlus normally close with halt, Execute halt now.");
        Runtime.getRuntime().halt(1);
      }
    }));

    //= ================================================================================================================
    //= Êú∫Âô®‰∫∫Â≠êÁ≥ªÁªü
    //= ================================================================================================================

    //= ========================================================================
    //= ÂàóÂá∫ÊâÄÊúâÂ•ΩÂèãÂíåÁæ§ÁªÑ

    if (!kernelConfig.noLogin) {

      logger.seek("Êú∫Âô®‰∫∫Ë¥¶Âè∑ " + bot.getId());
      logger.seek("Êú∫Âô®‰∫∫ÊòµÁß∞ " + bot.getNick());
      logger.seek("Êú∫Âô®‰∫∫Â§¥ÂÉè " + bot.getAvatarUrl());

      logger.hint("ÊâÄÊúâÂ•ΩÂèã");
      bot.getFriends().forEach(item -> logger.info(FurryBlack.getFormattedNickName(item)));

      logger.hint("ÊâÄÊúâÁæ§ÁªÑ");
      bot.getGroups().forEach(item -> logger.info(FurryBlack.getGroupInfo(item)));

    }

    //= ================================================================================================================
    //= Êèí‰ª∂Â≠êÁ≥ªÁªü
    //= ================================================================================================================

    //= ========================================================================
    //= ÁîüÊàêÊ®°ÊùøÊ∂àÊÅØ

    logger.hint("ÁîüÊàêÊ®°ÊùøÊ∂àÊÅØ");

    logger.info("ÁªÑË£ÖÁî®Êà∑listÊ∂àÊÅØ");
    MESSAGE_LIST_USERS = schema.generateUsersExecutorList();
    logger.info("ÁªÑË£ÖÁæ§ÁªÑlistÊ∂àÊÅØ");
    MESSAGE_LIST_GROUP = schema.generateGroupExecutorList();

    //= ================================================================================================================
    //= ÂêØÂä®ÂÆåÊàê
    //= ================================================================================================================

    logger.hint("Á≥ªÁªüÂêØÂä®ÂÆåÊàê ËÄóÊó∂" + TimeTool.duration(System.currentTimeMillis() - BOOT_TIME));

    //= ========================================================================
    //= ÂêØÂä®ÂÆåÊàê ‰øÆÊîπÊó•ÂøóÁïåÂà´Âà∞ËÆæÂÆöÂÄº

    if (!isDebug() && LEVEL != null) {
      LoggerX.setLevel(LEVEL);
    }

    //= ========================================================================
    //= ÂêØÂä®ÁªàÁ´ØËæìÂÖ•ÂäüËÉΩ

    Thread consoleThread = new Thread(FurryBlack::console);
    consoleThread.setName("furryblack-terminal");
    consoleThread.setDaemon(true);
    consoleThread.start();

    terminal.updateCompleter();

    //= ========================================================================
    //= ÂêØÂä®‰∫ã‰ª∂ÂìçÂ∫î

    EVENT_ENABLE = true;

    //= ========================================================================
    //= Ê≠£Â∏∏Â∑•‰Ωú

    LATCH.await();

    //= ================================================================================================================
    //= ================================================================================================================
    //= ================================================================================================================
    //= ================================================================================================================
    //= ================================================================================================================
    //= ================================================================================================================
    //= ================================================================================================================
    //= ================================================================================================================

    //= ========================================================================
    //= ÂÖ≥Èó≠‰∫ã‰ª∂ÂìçÂ∫î

    EVENT_ENABLE = false;

    //= ========================================================================
    //= ÂºÄÂßãÂÖ≥Èó≠ ‰øÆÊîπÊó•ÂøóÁïåÂà´Âà∞ËÆæÂÆöÂÄº

    LoggerX.setLevel(LoggerX.Level.VERBOSE);

    //= ========================================================================
    //= ÁâπÊÆäÂÖ≥Èó≠Ê®°Âºè

    if (isShutModeDrop()) {
      System.out.println("[FurryBlack][DROP]Shutdown mode drop, Invoke JVM halt now, Hope nothing broken.");
      Runtime.getRuntime().halt(1);
    }

    //= ================================================================================================================
    //= Êú∫Âô®‰∫∫Â≠êÁ≥ªÁªü
    //= ================================================================================================================

    //= ========================================================================
    //= ÂèñÊ∂àÊ∂àÊÅØËÆ¢ÈòÖ

    logger.hint("ÁªìÊùüÁõëÂê¨ÈÄöÈÅì");

    logger.info("ÁªìÊùüÁßÅËÅäÁõëÂê¨ÈÄöÈÅì");
    userMessageEventListener.complete();

    logger.info("ÁªìÊùüÁæ§ËÅäÁõëÂê¨ÈÄöÈÅì");
    groupMessageEventListener.complete();

    logger.info("ÁªìÊùüÊàêÂëòËøõÁæ§ÁõëÂê¨ÈÄöÈÅì");
    memberJoinEventListener.complete();

    logger.info("ÁªìÊùüÊàêÂëòÁ¶ªÁæ§ÁõëÂê¨ÈÄöÈÅì");
    memberLeaveEventListener.complete();

    logger.info("ÁªìÊùüÂ•ΩÂèãÊ∑ªÂä†ÁõëÂê¨ÈÄöÈÅì");
    newFriendRequestEventListener.complete();

    logger.info("ÁªìÊùüÈÇÄËØ∑Âä†Áæ§ÁõëÂê¨ÈÄöÈÅì");
    botInvitedJoinGroupRequestEventListener.complete();

    //= ================================================================================================================
    //= Êèí‰ª∂Â≠êÁ≥ªÁªü
    //= ================================================================================================================

    //= ========================================================================
    //= ÂÖ≥Èó≠Ê®°Âùó

    try {
      schema.shutModule();
    } catch (Exception exception) {
      logger.error("ÂÖ≥Èó≠Êèí‰ª∂Ê®°ÂûãÂèëÁîüÂºÇÂ∏∏", exception);
    }

    //= ========================================================================
    //= ÂÖ≥Èó≠Á∫øÁ®ãÊ±†

    logger.hint("ÂÖ≥Èó≠Á∫øÁ®ãÊ±†");

    CompletableFuture<Void> monitorShutdown = CompletableFuture.runAsync(() -> {
      if (FurryBlack.isShutModeDrop()) {
        logger.warning("‰∏¢ÂºÉÁõëÂê¨‰ªªÂä°Á∫øÁ®ãÊ±†");
        MONITOR_PROCESS.shutdownNow();
      } else {
        logger.info("ÂÖ≥Èó≠ÁõëÂê¨‰ªªÂä°Á∫øÁ®ãÊ±†");
        MONITOR_PROCESS.shutdown();
        try {
          boolean termination = MONITOR_PROCESS.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
          if (!termination) logger.warning("ÁõëÂê¨‰ªªÂä°Á∫øÁ®ãÊ±†ÂÖ≥Èó≠Ë∂ÖÊó∂");
        } catch (InterruptedException exception) {
          logger.error("Á≠âÂæÖÂÖ≥Èó≠ÁõëÂê¨‰ªªÂä°Á∫øÁ®ãÊ±†Ë¢´‰∏≠Êñ≠", exception);
        }
        logger.info("ÁõëÂê¨‰ªªÂä°Á∫øÁ®ãÊ±†ÂÖ≥Èó≠");
      }
    });

    CompletableFuture<Void> scheduleShutdown = CompletableFuture.runAsync(() -> {
      if (FurryBlack.isShutModeDrop()) {
        logger.warning("‰∏¢ÂºÉÂÆöÊó∂‰ªªÂä°Á∫øÁ®ãÊ±†");
        SCHEDULE_SERVICE.shutdownNow();
      } else {
        logger.info("ÂÖ≥Èó≠ÂÆöÊó∂‰ªªÂä°Á∫øÁ®ãÊ±†");
        SCHEDULE_SERVICE.shutdown();
        try {
          boolean termination = SCHEDULE_SERVICE.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
          if (!termination) logger.warning("ÂÆöÊó∂‰ªªÂä°Á∫øÁ®ãÊ±†ÂÖ≥Èó≠Ë∂ÖÊó∂");
        } catch (InterruptedException exception) {
          logger.error("Á≠âÂæÖÂÖ≥Èó≠ÂÆöÊó∂‰ªªÂä°Á∫øÁ®ãÊ±†Ë¢´‰∏≠Êñ≠", exception);
        }
        logger.info("ÂÆöÊó∂‰ªªÂä°Á∫øÁ®ãÊ±†ÂÖ≥Èó≠");
      }
    });

    try {
      CompletableFuture.allOf(monitorShutdown, scheduleShutdown).get();
    } catch (ExecutionException exception) {
      logger.error("Á≠âÂæÖÂÖ≥Èó≠Á∫øÁ®ãÊ±†Ë¢´‰∏≠Êñ≠", exception);
    }

    //= ================================================================================================================
    //= Êú∫Âô®‰∫∫Â≠êÁ≥ªÁªü
    //= ================================================================================================================

    logger.hint("ÂÖ≥Èó≠Êú∫Âô®‰∫∫");

    //= ========================================================================
    //= ÂÖ≥Èó≠Êú∫Âô®‰∫∫

    logger.info("ÈÄöÁü•Êú∫Âô®‰∫∫ÂÖ≥Èó≠");

    if (kernelConfig.noLogin) {
      logger.warning("Ë∞ÉËØïÊ®°Âºè ‰∏çÈúÄË¶ÅÂÖ≥Èó≠Êú∫Âô®‰∫∫");
    } else {
      if (FurryBlack.isShutModeDrop()) {
        bot.close(null);
      } else {
        logger.info("Êú∫Âô®‰∫∫ÂÖ≥Èó≠‰∏≠");
        bot.closeAndJoin(null);
      }
    }

    logger.info("Êú∫Âô®‰∫∫Â∑≤ÂÖ≥Èó≠");

  }

  //= ==================================================================================================================
  //=
  //=  ÁõëÂê¨Âô®
  //=
  //= ==================================================================================================================

  //= ==========================================================================
  //= Áî®Êà∑Ê∂àÊÅØ

  private static void handleUsersMessage(UserMessageEvent event) {

    if (!EVENT_ENABLE) return;

    try {

      for (EventHandlerFilter eventHandlerFilter : schema.getFilterUsersChain()) {
        if (eventHandlerFilter.handleUsersMessageWrapper(event)) return;
      }

      MONITOR_PROCESS.submit(() -> {
        for (EventHandlerMonitor item : schema.getMonitorUsersChain()) {
          item.handleUsersMessageWrapper(event);
        }
      });

      String content = event.getMessage().contentToString();

      if (systemConfig.commandRegex.matcher(content).find()) {

        Command command = new Command(content.substring(1));

        String commandName = command.getCommandName();

        switch (commandName) {

          case "help" -> {
            if (command.hasCommandBody()) {
              String segment = command.getParameterSegment(0);
              EventHandlerExecutor executor = schema.getExecutorUsersPool().get(segment);
              if (executor == null) {
                FurryBlack.sendMessage(event, "Ê≤°ÊúâÊ≠§ÂëΩ‰ª§");
              } else {
                FurryBlack.sendMessage(event, executor.getHelp());
              }
            } else {
              FurryBlack.sendMessage(event, MESSAGE_HELP);
            }
          }

          case "list" -> FurryBlack.sendMessage(event, MESSAGE_LIST_USERS);
          case "info" -> FurryBlack.sendMessage(event, MESSAGE_INFO);
          case "eula" -> FurryBlack.sendMessage(event, MESSAGE_EULA);

          default -> {
            EventHandlerExecutor executor = schema.getExecutorUsersPool().get(commandName);
            if (executor == null) {
              FurryBlack.sendMessage(event, "Ê≤°ÊúâÊ≠§ÂëΩ‰ª§");
              return;
            }
            for (EventHandlerChecker checker : schema.getGlobalCheckerUsersPool()) {
              if (checker.handleUsersMessageWrapper(event, command)) return;
            }
            List<EventHandlerChecker> commandCheckerUsersPool = schema.getCommandCheckerUsersPool(commandName);
            if (commandCheckerUsersPool != null) {
              for (EventHandlerChecker checker : commandCheckerUsersPool) {
                if (checker.handleUsersMessageWrapper(event, command)) return;
              }
            }
            executor.handleUsersMessageWrapper(event, command);
          }
        }
      }

    } catch (Exception exception) {
      logger.warning("Â§ÑÁêÜÁßÅËÅäÊ∂àÊÅØÂºÇÂ∏∏", exception);
    }
  }

  //= ==========================================================================
  //= Áæ§ÁªÑÊ∂àÊÅØ

  public static void handleGroupMessage(GroupMessageEvent event) {

    if (!EVENT_ENABLE) return;

    try {

      for (EventHandlerFilter eventHandlerFilter : schema.getFilterGroupChain()) {
        if (eventHandlerFilter.handleGroupMessageWrapper(event)) return;
      }

      MONITOR_PROCESS.submit(() -> {
        for (EventHandlerMonitor item : schema.getMonitorGroupChain()) {
          item.handleGroupMessageWrapper(event);
        }
      });

      String content = event.getMessage().contentToString();

      if (systemConfig.commandRegex.matcher(content).find()) {

        Command command = new Command(content.substring(1));

        String commandName = command.getCommandName();

        switch (commandName) {

          case "help" -> {
            if (command.hasCommandBody()) {
              String segment = command.getParameterSegment(0);
              EventHandlerExecutor executor = schema.getExecutorGroupPool().get(segment);
              if (executor == null) {
                FurryBlack.sendMessage(event, "Ê≤°ÊúâÊ≠§ÂëΩ‰ª§");
              } else {
                try {
                  FurryBlack.sendMessage(event, executor.getHelp());
                } catch (Exception exception) {
                  FurryBlack.sendMessage(event, "Â∏ÆÂä©‰ø°ÊÅØÂèëÈÄÅËá≥ÁßÅËÅäÂ§±Ë¥• ËØ∑ÂÖÅËÆ∏‰∏¥Êó∂‰ºöËØùÊùÉÈôê");
                }
              }
            } else {
              try {
                event.getSender().sendMessage(MESSAGE_HELP);
              } catch (Exception exception) {
                FurryBlack.sendMessage(event, "Â∏ÆÂä©‰ø°ÊÅØÂèëÈÄÅËá≥ÁßÅËÅäÂ§±Ë¥• ËØ∑ÂÖÅËÆ∏‰∏¥Êó∂‰ºöËØùÊùÉÈôê");
              }
            }
          }

          case "list" -> {
            try {
              event.getSender().sendMessage(MESSAGE_LIST_GROUP);
            } catch (Exception exception) {
              FurryBlack.sendMessage(event, "ÂèØÁî®ÂëΩ‰ª§ÂèëÈÄÅËá≥ÁßÅËÅäÂ§±Ë¥• ËØ∑ÂÖÅËÆ∏‰∏¥Êó∂‰ºöËØùÊùÉÈôê");
            }
          }

          case "info" -> {
            try {
              event.getSender().sendMessage(MESSAGE_INFO);
            } catch (Exception exception) {
              FurryBlack.sendMessage(event, "ÂÖ≥‰∫éÂèëÈÄÅËá≥ÁßÅËÅäÂ§±Ë¥• ËØ∑ÂÖÅËÆ∏‰∏¥Êó∂‰ºöËØùÊùÉÈôê");
            }
          }

          case "eula" -> {
            try {
              event.getSender().sendMessage(MESSAGE_EULA);
            } catch (Exception exception) {
              FurryBlack.sendMessage(event, "EULAÂèëÈÄÅËá≥ÁßÅËÅäÂ§±Ë¥• ËØ∑ÂÖÅËÆ∏‰∏¥Êó∂‰ºöËØùÊùÉÈôê");
            }
          }

          default -> {
            EventHandlerExecutor executor = schema.getExecutorGroupPool().get(commandName);
            if (executor == null) {
              return;
            }
            for (EventHandlerChecker checker : schema.getGlobalCheckerGroupPool()) {
              if (checker.handleGroupMessageWrapper(event, command)) return;
            }
            List<EventHandlerChecker> commandCheckerGroupPool = schema.getCommandCheckerGroupPool(commandName);
            if (commandCheckerGroupPool != null) {
              for (EventHandlerChecker checker : commandCheckerGroupPool) {
                if (checker.handleGroupMessageWrapper(event, command)) return;
              }
            }
            executor.handleGroupMessageWrapper(event, command);
          }
        }
      }

    } catch (Exception exception) {
      logger.warning("Â§ÑÁêÜÁæ§ËÅäÊ∂àÊÅØÂºÇÂ∏∏", exception);
    }

  }

  //= ==================================================================================================================
  //
  //
  //  ÊòµÁß∞Á≥ªÁªü
  //
  //
  //= ==================================================================================================================

  private static class Nickname {

    private static final LoggerX logger = LoggerXFactory.newLogger(Nickname.class);

    private final Map<Long, String> global;
    private final Map<Long, Map<Long, String>> groups;

    public static Nickname getInstance() {
      return new Nickname();
    }

    private Nickname() {
      global = new ConcurrentHashMap<>();
      groups = new ConcurrentHashMap<>();
    }

    private void cleanNickname() {
      global.clear();
      groups.clear();
    }

    private void appendNickname() {
      Path path = FileEnhance.get(FOLDER_CONFIG, "nickname.txt");
      List<String> nicknames;
      try {
        nicknames = Files.readAllLines(path, StandardCharsets.UTF_8);
      } catch (IOException exception) {
        throw new CoreException("ËØªÂèñÊòµÁß∞ÈÖçÁΩÆÊñá‰ª∂Â§±Ë¥• -> " + path, exception);
      }
      for (String line : nicknames) {
        String temp = line.trim();
        int indexOfDot = temp.indexOf(".");
        int indexOfColon = temp.indexOf(":");
        if (indexOfDot < 0) {
          logger.warning("ÈÖçÁΩÆÊó†Êïà " + line);
          continue;
        } if (indexOfColon < 0) {
          logger.warning("ÈÖçÁΩÆÊó†Êïà " + line);
          continue;
        }
        String group = line.substring(0, indexOfDot);
        String user = line.substring(indexOfDot + 1, indexOfColon);
        String nickname = line.substring(indexOfColon + 1);
        long userId = Long.parseLong(user);
        if ("*".equals(group)) {
          global.put(userId, nickname);
          logger.seek("ÂÖ®Â±Ä " + userId + " -> " + nickname);
        } else {
          long groupId = Long.parseLong(group);
          Map<Long, String> groupNicks = groups.computeIfAbsent(groupId, k -> new ConcurrentHashMap<>());
          groupNicks.put(userId, nickname);
          logger.seek("Áæ§ÂÜÖ " + groupId + "." + userId + " -> " + nickname);
        }
      }
    }

    private Map<Long, String> getNicknameGlobal() {
      return global;
    }

    private Map<Long, Map<Long, String>> getNicknameGroups() {
      return groups;
    }

    private String getUsersMappedNickName(User user) {
      return global.getOrDefault(user.getId(), user.getNick());
    }

    private String getUsersMappedNickName(long userId) {
      return global.getOrDefault(userId, Mirai.getInstance().queryProfile(bot, userId).getNickname());
    }

    private String getMemberMappedNickName(Member member) {
      Map<Long, String> groupMap = groups.get(member.getGroup().getId());
      if (groupMap != null) {
        String nickName = groupMap.get(member.getId());
        if (nickName != null) return nickName;
      }
      String nickName = global.get(member.getId());
      if (nickName != null) return nickName;
      String nameCard = member.getNameCard();
      if (nameCard.isBlank()) {
        return member.getNick();
      } else {
        return nameCard;
      }
    }

    private String getMemberMappedNickName(long groupId, long userId) {
      Map<Long, String> groupMap = groups.get(groupId);
      if (groupMap != null) {
        String nickName = groupMap.get(userId);
        if (nickName != null) return nickName;
      }
      String nickName = global.get(userId);
      if (nickName != null) return nickName;
      Member member = bot.getGroupOrFail(groupId).getOrFail(userId);
      String nameCard = member.getNameCard();
      if (nameCard.isBlank()) {
        return member.getNick();
      } else {
        return nameCard;
      }
    }

  }

  //= ==================================================================================================================
  //
  //
  //  ÁªàÁ´ØÁ≥ªÁªü
  //
  //
  //= ==================================================================================================================

  //= ==========================================================================
  //= ÊéßÂà∂Âè∞ÁªàÁ´Ø

  private abstract static sealed class Terminal permits JlineTerminal, NoConsoleTerminal, StdinTerminal {

    String readLine() {
      return readLineImpl();
    }

    void print(String message) {
      printImpl(message);
    }

    void println(String message) {
      printLineImpl(message);
    }

    void updateCompleter() {
      updateCompleterImpl();
    }

    protected abstract String readLineImpl();

    protected abstract void printImpl(String message);

    protected abstract void printLineImpl(String message);

    protected abstract void updateCompleterImpl();

  }

  //= ==========================================================================
  //= NoConsoleTerminal

  private static final class NoConsoleTerminal extends FurryBlack.Terminal {

    private final OutputStreamWriter writer;

    public NoConsoleTerminal() {
      writer = new OutputStreamWriter(System.out, StandardCharsets.UTF_8);
    }

    @Override
    protected String readLineImpl() {
      try {
        Thread.sleep(Long.MAX_VALUE);
      } catch (InterruptedException exception) {
        throw new TerminalException(exception);
      }
      return null;
    }

    @Override
    protected synchronized void printImpl(String message) {
      try {
        writer.write(message);
        writer.flush();
      } catch (IOException exception) {
        exception.printStackTrace();
      }
    }

    @Override
    protected void printLineImpl(String message) {
      printImpl(message + LINE);
    }

    @Override
    protected void updateCompleterImpl() {

    }
  }

  //= ==========================================================================
  //= StdinTerminal

  private static final class StdinTerminal extends FurryBlack.Terminal {

    private final BufferedReader reader;
    private final OutputStreamWriter writer;

    public StdinTerminal() {
      InputStreamReader inputStreamReader = new InputStreamReader(System.in, StandardCharsets.UTF_8);
      reader = new BufferedReader(inputStreamReader);
      writer = new OutputStreamWriter(System.out, StandardCharsets.UTF_8);
    }

    @Override
    protected String readLineImpl() {
      printImpl(FurryBlack.CONSOLE_PROMPT);
      try {
        return reader.readLine();
      } catch (IOException exception) {
        throw new TerminalException(exception);
      }
    }

    @Override
    protected synchronized void printImpl(String message) {
      try {
        writer.write(message);
        writer.flush();
      } catch (IOException exception) {
        exception.printStackTrace();
      }
    }

    @Override
    protected void printLineImpl(String message) {
      printImpl(message + LINE);
    }

    @Override
    protected void updateCompleterImpl() {

    }
  }

  //= ==========================================================================
  //= JlineTerminal

  private static final class JlineTerminal extends FurryBlack.Terminal {

    private final LineReader reader;
    private final CompleterDelegate completerDelegate;

    public JlineTerminal() {
      if (kernelConfig.noJline) {
        completerDelegate = null;
        reader = null;
      } else {
        completerDelegate = new CompleterDelegate();
        reader = LineReaderBuilder.builder().completer(completerDelegate).build();
        AutopairWidgets autopairWidgets = new AutopairWidgets(reader);
        autopairWidgets.enable();
      }
    }

    @Override
    protected String readLineImpl() {
      return reader.readLine(FurryBlack.CONSOLE_PROMPT);
    }

    @Override
    protected synchronized void printImpl(String message) {
      reader.printAbove(message);
    }

    @Override
    protected void printLineImpl(String message) {
      printImpl(message + LINE);
    }

    @Override
    protected void updateCompleterImpl() {
      completerDelegate.update();
    }

    public static class CompleterDelegate implements Completer {

      private Completer completer;

      public CompleterDelegate() {
        completer = buildCompleter();
      }

      @Override
      public void complete(LineReader reader, ParsedLine line, List<Candidate> candidates) {
        completer.complete(reader, line, candidates);
      }

      public void update() {
        completer = buildCompleter("", "");
      }

      private AggregateCompleter buildCompleter(String... modules) {
        return new AggregateCompleter(
          new ArgumentCompleter(new StringsCompleter("help", "kill", "drop", "stop", "gc", "stack", "enable", "disable", "schema", "color")),
          new ArgumentCompleter(new StringsCompleter("list", "send"), new StringsCompleter("users", "group")),
          new TreeCompleter(node("level", node("MUTE", "FATAL", "ERROR", "WARN", "HINT", "SEEK", "INFO", "DEBUG", "VERBOSE", "DEVELOP", "EVERYTHING"))),
          new TreeCompleter(node("nickname", node("list", "clean", "reload", "append", "export"))),
          new TreeCompleter(node("debug", node("enable", "disable"))),
          new TreeCompleter(node("plugin")),
          new TreeCompleter(node("module", node("initModule", "bootModule", "shut", "reboot", "unload", node(new StringsCompleter(modules)))))
        );
      }

    }

  }

  //= ==================================================================================================================
  //
  //
  //  ÊéßÂà∂Âè∞Á≥ªÁªü
  //
  //
  //= ==================================================================================================================

  private static void console() {

    console:
    while (true) {

      try {

        String temp = terminal.readLine();
        if (temp == null || temp.isBlank()) continue;

        Command command = new Command(temp.trim());

        switch (command.getCommandName()) {

          //= ==========================================================================================================

          case "?":
          case "help":
            FurryBlack.println(CONTENT_HELP);
            break;

          //= ==========================================================================================================

          case "info":
            FurryBlack.println(CONTENT_INFO);
            break;

          //= ==========================================================================================================

          case "halt":
            if (command.getParameterLength() == 1) {
              SHUTDOWN_HALT = Boolean.parseBoolean(command.getParameterSegment(0));
              if (SHUTDOWN_HALT) {
                FurryBlack.println("ÂêØÂä®Âº∫Âà∂ÈÄÄÂá∫");
              } else {
                FurryBlack.println("ÂÖ≥Èó≠Âº∫Âà∂ÈÄÄÂá∫");
              }
            } else {
              FurryBlack.println("Usage: halt enable/disable");
            }
            break;

          //= ==========================================================================================================

          case "drop":
            SHUTDOWN_DROP = true;

          case "stop":
          case "quit":
          case "exit":
            Runtime.getRuntime().exit(0);
            break console;

          //= ==========================================================================================================

          case "kill":
            System.out.println("[FurryBlack][KILL]Invoke JVM halt now, Good luck.");
            Runtime.getRuntime().halt(1);
            break console;

          //= ==========================================================================================================

          case "enable":
            EVENT_ENABLE = true;
            FurryBlack.println("ÂêØÂä®‰∫ã‰ª∂ÂìçÂ∫î");
            break;

          //= ==========================================================================================================

          case "disable":
            EVENT_ENABLE = false;
            FurryBlack.println("ÂÖ≥Èó≠‰∫ã‰ª∂ÂìçÂ∫î");
            break;

          //= ==========================================================================================================

          case "gc":
          case "stat":
          case "stats":
          case "status":
            long totalMemory = Runtime.getRuntime().totalMemory();
            long freeMemory = Runtime.getRuntime().freeMemory();
            long maxMemory = Runtime.getRuntime().maxMemory();
            long useMemory = totalMemory - freeMemory;

            String totalMemoryH = toHumanBytes(totalMemory);
            String freeMemoryH = toHumanBytes(freeMemory);
            String maxMemoryH = toHumanBytes(maxMemory);
            String useMemoryH = toHumanBytes(useMemory);

            // @formatter:off

            FurryBlack.println(

              "ÂëΩÂêçÁ©∫Èó¥: " + NAMESPACE + LINE +
              "Ë∞ÉËØïÂºÄÂÖ≥: " + (kernelConfig.debug ? "Ë∞ÉËØïÊ®°Âºè" : "Áîü‰∫ßÊ®°Âºè") + LINE +
              "ÂÆâÂÖ®Á≠ñÁï•: " + (kernelConfig.unsafe ? "ÂÆΩÊùæÁ≠ñÁï•" : "Ê†áÂáÜÁ≠ñÁï•") + LINE +
              "ÂçèËÆÆË°•‰∏Å: " + (kernelConfig.upgrade ? "ÂêØÁî®ÂçáÁ∫ß" : "ÂéüÁîüÊ®°Âºè") + LINE +
              "ÁªàÁ´ØÊ®°Âºè: " + (kernelConfig.noJline ? "Á≤æÁÆÄÁªàÁ´Ø" : "ÂÆåÊï¥ÁªàÁ´Ø") + LINE +
              "ÁôªÂΩïÊ®°Âºè: " + (kernelConfig.noLogin ? "Ë∑≥ËøáÁôªÂΩï" : "ÁúüÂÆûÁôªÂΩï") + LINE +
              "ÂÖ≥Èó≠Á≠ñÁï•: " + (SHUTDOWN_HALT ? "Âº∫Âà∂ÈÄÄÂá∫" : "Ê≠£Â∏∏ÈÄÄÂá∫") + LINE +
              "Ê∂àÊÅØ‰∫ã‰ª∂: " + (EVENT_ENABLE ? "Ê≠£Â∏∏ÁõëÂê¨" : "ÂøΩÁï•Ê∂àÊÅØ") + LINE +
              "Ê†∏ÂøÉÊï∞Èáè: " + Runtime.getRuntime().availableProcessors() + LINE +
              "ÊúÄÂ§ßÂÜÖÂ≠ò: " + maxMemoryH + "/" + maxMemory + LINE +
              "Â∑≤Áî®ÂÜÖÂ≠ò: " + useMemoryH + "/" + useMemory + LINE +
              "Á©∫Èó≤ÂÜÖÂ≠ò: " + freeMemoryH + "/" + freeMemory + LINE +
              "ÂàÜÈÖçÂÜÖÂ≠ò: " + totalMemoryH + "/" + totalMemory + LINE +
              "ËøêË°åÊó∂Èó¥: " + TimeTool.duration(System.currentTimeMillis() - BOOT_TIME)

            );

            // @formatter:on

            break;

          //= ==========================================================================================================

          case "stack":

            Map<Thread, StackTraceElement[]> stackTraces = Thread.getAllStackTraces();

            ArrayList<Map.Entry<Thread, StackTraceElement[]>> entries = new ArrayList<>(stackTraces.entrySet());

            entries.sort((o1, o2) -> {
              if (o1 == o2) return 0;
              Thread o1Key = o1.getKey();
              Thread o2Key = o2.getKey();
              return (int) (o1Key.getId() - o2Key.getId());
            });

            for (Map.Entry<Thread, StackTraceElement[]> entry : entries) {
              var k = entry.getKey();
              var v = entry.getValue();
              StringBuilder builder = new StringBuilder();
              if (k.isDaemon()) {
                builder.append("Daemon-");
              } else {
                builder.append("Thread-");
              }
              builder.append(k.getId()).append(" ").append(k.getState());
              builder.append(" (").append(k.getName());
              builder.append(") ").append(k.getPriority());
              builder.append(" [").append(k.getThreadGroup().getName());
              builder.append("]");
              builder.append(LINE);
              for (StackTraceElement element : v) {
                String format = String.format("    %s:%s(%s)", element.getClassName(), element.getMethodName(), element.getLineNumber());
                builder.append(format).append(LINE);
              }
              FurryBlack.println(builder);

            }
            break;

          //= ==========================================================================================================

          case "debug":
            if (command.getParameterLength() == 1) {
              switch (command.getParameterSegment(0)) {
                case "enable" -> {
                  kernelConfig.debug = true;
                  FurryBlack.println("DEBUGÊ®°ÂºèÂêØÂä®");
                }
                case "disable" -> {
                  kernelConfig.debug = false;
                  FurryBlack.println("DEBUGÊ®°ÂºèÂÖ≥Èó≠");
                }
              }
            } else {
              FurryBlack.println(kernelConfig.debug ? "DEBUGÂ∑≤ÂºÄÂêØ" : "DEBUGÂ∑≤ÂÖ≥Èó≠");
            }
            break;

          //= ==========================================================================================================

          case "color":
            FurryBlack.println(CONTENT_COLOR);
            break;

          //= ==========================================================================================================

          case "level":
            if (command.hasCommandBody()) {
              String level = command.getParameterSegment(0);
              if (LoggerX.setLevel(level)) {
                logger.bypass("Êó•ÂøóÁ∫ßÂà´Ë∞ÉÊï¥‰∏∫ " + level);
              } else {
                logger.bypass("‰øÆÊîπÊó•ÂøóÁ∫ßÂà´Â§±Ë¥•Ôºö‰∏çÂ≠òÂú®Ê≠§Á∫ßÂà´ÔºåÂèØÁî®ÂÄº‰∏∫ MUTE FATAL ERROR WARN HINT SEEK INFO DEBUG VERBOSE DEVELOP EVERYTHING");
              }
            } else {
              logger.bypass("ÂèØÁî®ÂÄº‰∏∫ MUTE ERROR WARN HINT SEEK INFO DEBUG VERBOSE EVERYTHING");
              logger.fatal("The quick brown fox jump over a lazy dog");
              logger.error("The quick brown fox jump over a lazy dog");
              logger.warning("The quick brown fox jump over a lazy dog");
              logger.hint("The quick brown fox jump over a lazy dog");
              logger.seek("The quick brown fox jump over a lazy dog");
              logger.info("The quick brown fox jump over a lazy dog");
              logger.debug("The quick brown fox jump over a lazy dog");
              logger.verbose("The quick brown fox jump over a lazy dog");
              logger.develop("The quick brown fox jump over a lazy dog");
            }
            break;

          //= ==========================================================================================================

          case "schema":
            FurryBlack.println(schema.verboseStatus());
            break;

          //= ==========================================================================================================

          case "plugin":

            for (Map.Entry<String, Plugin> pluginEntry : schema.getAllPlugin()) {

              var pluginName = pluginEntry.getKey();
              var pluginItem = pluginEntry.getValue();

              FurryBlack.println(BRIGHT_CYAN + pluginName + " " + pluginItem.getModules().size() + RESET);

              Map<Runner, Class<? extends EventHandlerRunner>> runnerClassMap = pluginItem.getRunnerClassMap();
              FurryBlack.println(GREEN + ">> ÂÆöÊó∂Âô® " + runnerClassMap.size() + RESET);
              for (Map.Entry<Runner, Class<? extends EventHandlerRunner>> classEntry : runnerClassMap.entrySet()) {
                var moduleName = classEntry.getKey();
                var moduleItem = classEntry.getValue();
                FurryBlack.println(moduleName.value() + '[' + moduleName.priority() + "] -> " + moduleItem.getName());
              }

              Map<Filter, Class<? extends EventHandlerFilter>> filterClassMap = pluginItem.getFilterClassMap();
              FurryBlack.println(GREEN + ">> ËøáÊª§Âô® " + filterClassMap.size() + RESET);
              for (Map.Entry<Filter, Class<? extends EventHandlerFilter>> classEntry : filterClassMap.entrySet()) {
                var moduleName = classEntry.getKey();
                var moduleItem = classEntry.getValue();
                FurryBlack.println(moduleName.value() + '[' + moduleName.priority() + "] -> " + moduleItem.getName());
              }

              Map<Monitor, Class<? extends EventHandlerMonitor>> monitorClassMap = pluginItem.getMonitorClassMap();
              FurryBlack.println(GREEN + ">> ÁõëÂê¨Âô® " + monitorClassMap.size() + RESET);
              for (Map.Entry<Monitor, Class<? extends EventHandlerMonitor>> classEntry : monitorClassMap.entrySet()) {
                var moduleName = classEntry.getKey();
                var moduleItem = classEntry.getValue();
                FurryBlack.println(moduleName.value() + '[' + moduleName.priority() + "] -> " + moduleItem.getName());
              }

              Map<Checker, Class<? extends EventHandlerChecker>> checkerClassMap = pluginItem.getCheckerClassMap();
              FurryBlack.println(GREEN + ">> Ê£ÄÊü•Âô® " + checkerClassMap.size() + RESET);
              for (Map.Entry<Checker, Class<? extends EventHandlerChecker>> classEntry : checkerClassMap.entrySet()) {
                var moduleName = classEntry.getKey();
                var moduleItem = classEntry.getValue();
                FurryBlack.println(moduleName.value() + '[' + moduleName.priority() + "](" + moduleName.command() + ") -> " + moduleItem.getName());
              }

              Map<Executor, Class<? extends EventHandlerExecutor>> executorClassMap = pluginItem.getExecutorClassMap();
              FurryBlack.println(GREEN + ">> ÊâßË°åÂô® " + executorClassMap.size() + RESET);
              for (Map.Entry<Executor, Class<? extends EventHandlerExecutor>> classEntry : executorClassMap.entrySet()) {
                var moduleName = classEntry.getKey();
                var moduleItem = classEntry.getValue();
                FurryBlack.println(moduleName.value() + '(' + moduleName.command() + ") -> " + moduleItem.getName());
              }
            }

            MESSAGE_LIST_USERS = schema.generateUsersExecutorList();
            MESSAGE_LIST_GROUP = schema.generateGroupExecutorList();

            break;

          //= ==================================================================================================================

          case "module":

            switch (command.getParameterLength()) {

              case 2 -> {

                switch (command.getParameterSegment(0)) {
                  // module shut <plugin>
                  case "shut" -> schema.shutModule(command.getParameterSegment(1));

                  // module initModule <plugin>
                  case "initModule" -> schema.initModule(command.getParameterSegment(1));

                  // module bootModule <plugin>
                  case "bootModule" -> schema.bootModule(command.getParameterSegment(1));

                  // module reboot <plugin>
                  case "reboot" -> schema.rebootModule(command.getParameterSegment(1));

                  // module unload <plugin>
                  case "unload" -> {
                    schema.unloadModule(command.getParameterSegment(1));
                    terminal.updateCompleter();
                  }

                }
              }

              case 0 -> {

                LineBuilder builder = new LineBuilder();

                Map<Runner, Boolean> listRunner = schema.listRunner();
                builder.append(BRIGHT_CYAN + ">> ÂÆöÊó∂Âô® " + listRunner.size() + RESET);
                for (Map.Entry<Runner, Boolean> entry : listRunner.entrySet()) {
                  builder.append((entry.getValue() ? "ÂºÄ " : "ÂÖ≥ ") + entry.getKey().value());
                }

                Map<Filter, Boolean> listFilter = schema.listFilter();
                builder.append(BRIGHT_CYAN + ">> ËøáÊª§Âô® " + listFilter.size() + RESET);
                for (Map.Entry<Filter, Boolean> entry : listFilter.entrySet()) {
                  builder.append((entry.getValue() ? "ÂºÄ " : "ÂÖ≥ ") + entry.getKey().value() + "{" + (entry.getKey().users() ? "U" : "") + (entry.getKey().group() ? "G" : "") + "}");
                }

                Map<Monitor, Boolean> listMonitor = schema.listMonitor();
                builder.append(BRIGHT_CYAN + ">> ÁõëÂê¨Âô® " + listMonitor.size() + RESET);
                for (Map.Entry<Monitor, Boolean> entry : listMonitor.entrySet()) {
                  builder.append((entry.getValue() ? "ÂºÄ " : "ÂÖ≥ ") + entry.getKey().value() + "{" + (entry.getKey().users() ? "U" : "") + (entry.getKey().group() ? "G" : "") + "}");
                }

                Map<Checker, Boolean> listChecker = schema.listChecker();
                builder.append(BRIGHT_CYAN + ">> Ê£ÄÊü•Âô® " + listChecker.size() + RESET);
                for (Map.Entry<Checker, Boolean> entry : listChecker.entrySet()) {
                  builder.append((entry.getValue() ? "ÂºÄ " : "ÂÖ≥ ") + entry.getKey().value() + "[" + entry.getKey().command() + "]" + "{" + (entry.getKey().users() ? "U" : "") + (entry.getKey().group() ? "G" : "") + "}");
                }

                Map<Executor, Boolean> listExecutor = schema.listExecutor();
                builder.append(BRIGHT_CYAN + ">> ÊâßË°åÂô® " + listExecutor.size() + RESET);
                for (Map.Entry<Executor, Boolean> entry : listExecutor.entrySet()) {
                  builder.append((entry.getValue() ? "ÂºÄ " : "ÂÖ≥ ") + entry.getKey().value() + "[" + entry.getKey().command() + "]{" + (entry.getKey().users() ? "U" : "") + (entry.getKey().group() ? "G" : "") + "}");
                }

                List<Checker> globalUsersChecker = schema.listGlobalUsersChecker();
                builder.append(BRIGHT_CYAN + ">> ÂÖ®Â±ÄÁßÅËÅäÊ£ÄÊü•Âô® " + globalUsersChecker.size() + RESET);
                for (Checker annotation : globalUsersChecker) {
                  builder.append(annotation.value());
                }

                List<Checker> globalGroupChecker = schema.listGlobalGroupChecker();
                builder.append(BRIGHT_CYAN + ">> ÂÖ®Â±ÄÁæ§ËÅäÊ£ÄÊü•Âô® " + globalGroupChecker.size() + RESET);
                for (Checker annotation : globalGroupChecker) {
                  builder.append("  " + annotation.value());
                }

                Map<String, List<Checker>> listCommandUsersChecker = schema.listCommandsUsersChecker();
                builder.append(BRIGHT_CYAN + ">> ÊúâÈôêÁßÅËÅäÊ£ÄÊü•Âô® " + listCommandUsersChecker.size() + RESET);
                for (Map.Entry<String, List<Checker>> entry : listCommandUsersChecker.entrySet()) {
                  builder.append(entry.getKey() + " " + entry.getValue().size());
                  for (Checker item : entry.getValue()) {
                    builder.append("  " + item.value());
                  }
                }

                Map<String, List<Checker>> listCommandGroupChecker = schema.listCommandsGroupChecker();
                builder.append(BRIGHT_CYAN + ">> ÊúâÈôêÁæ§ËÅäÊ£ÄÊü•Âô® " + listCommandGroupChecker.size() + RESET);
                for (Map.Entry<String, List<Checker>> entry : listCommandGroupChecker.entrySet()) {
                  builder.append(entry.getKey() + " " + entry.getValue().size());
                  for (Checker item : entry.getValue()) {
                    builder.append("  " + item.value());
                  }
                }

                builder.append(BRIGHT_CYAN + ">> ÁßÅËÅäÂëΩ‰ª§ÂàóË°®" + RESET);
                builder.append(MESSAGE_LIST_USERS);
                builder.append(BRIGHT_CYAN + ">> Áæ§ËÅäÂëΩ‰ª§ÂàóË°®" + RESET);
                builder.append(MESSAGE_LIST_GROUP);

                FurryBlack.println(builder);

              }
            }

            MESSAGE_LIST_USERS = schema.generateUsersExecutorList();
            MESSAGE_LIST_GROUP = schema.generateGroupExecutorList();

            break;

          //= ==================================================================================================================

          case "nickname":

            if (!command.hasCommandBody()) break;

            switch (command.getParameterSegment(0)) {

              case "list" -> {
                FurryBlack.println(BRIGHT_CYAN + "ÂÖ®Â±ÄÊòµÁß∞" + RESET);
                for (Map.Entry<Long, String> entry : nickname.getNicknameGlobal().entrySet()) {
                  FurryBlack.println(entry.getKey() + ":" + entry.getValue());
                }
                FurryBlack.println(BRIGHT_CYAN + "Áæ§ÂÜÖÊòµÁß∞" + RESET);
                for (Map.Entry<Long, Map<Long, String>> groupsEntry : nickname.getNicknameGroups().entrySet()) {
                  FurryBlack.println("> " + groupsEntry.getKey());
                  for (Map.Entry<Long, String> nicknameEntry : groupsEntry.getValue().entrySet()) {
                    FurryBlack.println(nicknameEntry.getKey() + ":" + nicknameEntry.getValue());
                  }
                }
              }

              case "clean" -> {
                nickname.cleanNickname();
                FurryBlack.println("ÊòµÁß∞Â∑≤Ê∏ÖÁ©∫");
              }

              case "append" -> {
                nickname.appendNickname();
                FurryBlack.println("ÊòµÁß∞Â∑≤Áª≠Âä†");
              }

              case "reload" -> {
                nickname.cleanNickname();
                nickname.appendNickname();
                FurryBlack.println("ÊòµÁß∞Â∑≤ÈáçËΩΩ");
              }

              case "export" -> {
                Path path = FileEnhance.get(FOLDER_CONFIG, "export-" + TimeTool.format("yyyy-MM-dd HH-mm-ss") + ".txt");
                LineBuilder builder = new LineBuilder();
                ContactList<Friend> friends = getFriends();
                builder.append("# Â•ΩÂèã ", friends.size());
                for (Friend friend : friends) {
                  builder.append("*.", friend.getId(), ":", friend.getNick());
                }
                ContactList<Group> groups = getGroups();
                builder.append("# Áæ§ÁªÑ ", groups.size());
                for (Group group : groups) {
                  long groupId = group.getId();
                  builder.append("# ", group.getName(), " ", group.getOwner().getId());
                  for (NormalMember member : group.getMembers()) {
                    String nameCard = member.getNameCard();
                    if (nameCard.isEmpty()) {
                      builder.append(groupId, ".", member.getId(), ":", member.getNick());
                    } else {
                      builder.append(groupId, ".", member.getId(), ":", member.getNick(), "[", nameCard, "]");
                    }
                  }
                }
                Files.writeString(path, builder.toString());
                FurryBlack.println("ÊòµÁß∞Â∑≤ÂØºÂá∫ -> " + path);
              }
            }
            break;

          //= ==================================================================================================================

          case "list":

            if (!command.hasCommandBody()) break;

            switch (command.getParameterSegment(0)) {

              case "u", "usr", "user", "users", "f", "fri", "friend", "friends" -> {
                List<Friend> friends = FurryBlack.getFriends().stream().filter(item -> item.getId() != getBotID()).toList();
                if (friends.size() == 0) {
                  FurryBlack.println("‰Ω†Ê≤°ÊúâÊúãÂèã");
                  break;
                }
                friends.stream()
                  .map(FurryBlack::getFormattedNickName)
                  .forEach(FurryBlack::println);
              }

              case "g", "grp", "group", "groups" -> {
                ContactList<Group> groups = FurryBlack.getGroups();
                if (groups.size() == 0) {
                  FurryBlack.println("‰Ω†Ê≤°ÊúâÁæ§ÁªÑ");
                  break;
                }
                groups.stream()
                  .map(item -> item.getName() + "(" + item.getId() + ") " + item.getMembers().size() + "‰∫∫")
                  .forEach(FurryBlack::println);
              }

              default -> {
                long group;
                try {
                  group = Long.parseLong(command.getParameterSegment(0));
                } catch (Exception exception) {
                  FurryBlack.println("ÂëΩ‰ª§ÂèëÁîüÂºÇÂ∏∏ ÁúÅÁï•groupÈúÄË¶ÅÊåáÂÆöÁæ§Âè∑");
                  break;
                }
                FurryBlack.getGroup(group).getMembers().stream()
                  .sorted((_$1, _$2) -> _$2.getPermission().getLevel() - _$1.getPermission().getLevel())
                  .forEach(item -> {
                    StringBuilder builder = new StringBuilder();
                    builder.append(item.getNameCard());
                    builder.append(" - ");
                    builder.append(FurryBlack.getFormattedNickName(item));
                    switch (item.getPermission().getLevel()) {
                      case 2 -> builder.append(" Áæ§‰∏ª");
                      case 1 -> builder.append(" ÁÆ°ÁêÜ");
                    }
                    FurryBlack.println(builder);
                  });
              }
            }
            break;

          //= ==================================================================================================================

          case "send":

            if (!command.hasCommandBody()) break;

            switch (command.getParameterSegment(0)) {

              case "u":
              case "usr":
              case "user":
              case "users":
              case "f":
              case "fri":
              case "friend":
              case "friends":
                long user = Long.parseLong(command.getParameterSegment(1));
                FurryBlack.sendUserMessage(user, command.join(2));
                break;

              case "g":
              case "grp":
              case "group":
              case "groups":
                long group = Long.parseLong(command.getParameterSegment(1));
                FurryBlack.sendGroupMessage(group, command.join(2));
                break;

              default:
                group = Long.parseLong(command.getParameterSegment(0));
                user = Long.parseLong(command.getParameterSegment(1));
                FurryBlack.sendAtMessage(group, user, command.join(2));
            }
            break;

        }

      } catch (UserInterruptException exception) {
        return;
      } catch (Exception exception) {
        logger.error("ÂëΩ‰ª§ÂØºËá¥‰∫ÜÂºÇÂ∏∏", exception);
      }
    }

  }

  //= ==================================================================================================================
  //
  //
  //  ÂÖ¨ÂÖ±API
  //
  //
  //= ==================================================================================================================

  //= ==========================================================================
  //= ÊâìÂç∞Ê∂àÊÅØ

  @Comment("Âú®ÁªàÁ´ØÊâìÂç∞Ê∂àÊÅØ")
  public static void terminalPrint(Object message) {
    if (message == null) return;
    terminal.print(message.toString());
  }

  @Comment("Âú®ÁªàÁ´ØÊâìÂç∞Ê∂àÊÅØ")
  public static void println(Object message) {
    if (message == null) return;
    terminal.println(message.toString());
  }

  //= ==========================================================================
  //= Ê°ÜÊû∂Áä∂ÊÄÅ

  @Comment("Ê°ÜÊû∂ËøêË°åÁä∂ÊÄÅ")
  public static boolean isDebug() {
    return kernelConfig.debug;
  }

  @Comment("Ê°ÜÊû∂ËøêË°åÁä∂ÊÄÅ")
  public static boolean isNoConsole() {
    return kernelConfig.noConsole;
  }

  @Comment("Ê°ÜÊû∂ËøêË°åÁä∂ÊÄÅ")
  public static boolean isShutdownHalt() {
    return SHUTDOWN_HALT;
  }

  @Comment("Ê°ÜÊû∂ËøêË°åÁä∂ÊÄÅ")
  public static boolean isShutModeDrop() {
    return SHUTDOWN_DROP;
  }

  //= ==========================================================================
  //= Ê°ÜÊû∂Áõ∏ÂÖ≥

  @Comment("Ê°ÜÊû∂Áõ∏ÂÖ≥")
  public static Path getFolderRoot() {
    return FOLDER_ROOT;
  }

  @Comment("Ê°ÜÊû∂Áõ∏ÂÖ≥")
  public static Path getFolderConfig() {
    return FOLDER_CONFIG;
  }

  @Comment("Ê°ÜÊû∂Áõ∏ÂÖ≥")
  public static Path getFolderPlugin() {
    return FOLDER_PLUGIN;
  }

  @Comment("Ê°ÜÊû∂Áõ∏ÂÖ≥")
  public static Path getDependFolder() {
    return FOLDER_DEPEND;
  }

  @Comment("Ê°ÜÊû∂Áõ∏ÂÖ≥")
  public static Path getFolderDepend() {
    return FOLDER_DEPEND;
  }

  @Comment("Ê°ÜÊû∂Áõ∏ÂÖ≥")
  public static Path getFolderModule() {
    return FOLDER_MODULE;
  }

  @Comment("Ê°ÜÊû∂Áõ∏ÂÖ≥")
  public static Path getFolderLogger() {
    return FOLDER_LOGGER;
  }

  //= ==========================================================================
  //= Êèí‰ª∂Â≠êÁ≥ªÁªü

  @Comment("Ëé∑ÂèñÊ®°ÂùóÂÆû‰æã")
  public static <T extends EventHandlerRunner> T getRunner(Class<T> clazz) {
    return schema.getRunner(clazz);
  }

  //= ==========================================================================
  //= Á∫øÁ®ãÊ±†Â≠êÁ≥ªÁªü

  @Comment("Êèê‰∫§ÂºÇÊ≠•‰ªªÂä°")
  public static Future<?> submit(Runnable runnable) {
    return MONITOR_PROCESS.submit(runnable);
  }

  @Comment("Êèê‰∫§ÂºÇÊ≠•‰ªªÂä°")
  public static <T> Future<?> submit(Runnable runnable, T t) {
    return MONITOR_PROCESS.submit(runnable, t);
  }

  @Comment("Êèê‰∫§ÂºÇÊ≠•‰ªªÂä°")
  public static Future<?> submit(Callable<?> callable) {
    return MONITOR_PROCESS.submit(callable);
  }

  @Comment("Êèê‰∫§ÂÆöÊó∂‰ªªÂä°")
  public static ScheduledFuture<?> schedule(Runnable runnable, long time, TimeUnit timeUnit) {
    return SCHEDULE_SERVICE.schedule(runnable, time, timeUnit);
  }

  @Comment("Êèê‰∫§ÂÆöÊó∂‰ªªÂä°")
  public static ScheduledFuture<?> schedule(Callable<?> callable, long delay, TimeUnit unit) {
    return SCHEDULE_SERVICE.schedule(callable, delay, unit);
  }

  @Comment("Êèê‰∫§Á≠âÈó¥ÈöîÂÆöÊó∂‰ªªÂä°")
  public static ScheduledFuture<?> scheduleAtFixedRate(Runnable runnable, long initialDelay, long period, TimeUnit unit) {
    return SCHEDULE_SERVICE.scheduleAtFixedRate(runnable, initialDelay, period, unit);
  }

  @Comment("Êèê‰∫§Á≠âÂª∂ËøüÂÆöÊó∂‰ªªÂä°")
  public static ScheduledFuture<?> scheduleWithFixedDelay(Runnable runnable, long initialDelay, long delay, TimeUnit unit) {
    return SCHEDULE_SERVICE.scheduleWithFixedDelay(runnable, initialDelay, delay, unit);
  }

  @Comment("Êèê‰∫§ÊòéÂ§©ÂºÄÂßãÁöÑÁ≠âÈó¥ÈöîÂÆöÊó∂‰ªªÂä°")
  public static ScheduledFuture<?> scheduleAtNextDayFixedRate(Runnable runnable, long period, TimeUnit unit) {
    return SCHEDULE_SERVICE.scheduleAtFixedRate(runnable, TimeTool.timeToTomorrow(), period, unit);
  }

  @Comment("Êèê‰∫§ÊòéÂ§©ÂºÄÂßãÁöÑÁ≠âÂª∂ËøüÂÆöÊó∂‰ªªÂä°")
  public static ScheduledFuture<?> scheduleWithNextDayFixedDelay(Runnable runnable, long delay, TimeUnit unit) {
    return SCHEDULE_SERVICE.scheduleWithFixedDelay(runnable, TimeTool.timeToTomorrow(), delay, unit);
  }

  //= ==========================================================================
  //= ÊòµÁß∞Â≠êÁ≥ªÁªü

  @Comment("Ëé∑ÂèñÁî®Êà∑ÊòµÁß∞")
  public static String getNickName(long user) {
    return queryProfile(user).getNickname();
  }

  @Comment("Ëé∑ÂèñÁî®Êà∑Ê†ºÂºèÂåñÂêç")
  public static String getFormattedNickName(User user) {
    return user.getNick() + "(" + user.getId() + ")";
  }

  @Comment("Ëé∑ÂèñÁî®Êà∑Ê†ºÂºèÂåñÂêç")
  public static String getFormattedNickName(long user) {
    return getNickName(user) + "(" + user + ")";
  }

  @Comment("Ëé∑ÂèñÁî®Êà∑ÊòµÁß∞")
  public static String getUsersMappedNickName(User user) {
    return nickname.getUsersMappedNickName(user);
  }

  @Comment("Ëé∑ÂèñÁî®Êà∑ÊòµÁß∞")
  public static String getUsersMappedNickName(long userId) {
    return nickname.getUsersMappedNickName(userId);
  }

  @Comment("Ëé∑ÂèñÈ¢ÑËÆæÊòµÁß∞")
  public static String getMappedNickName(GroupMessageEvent event) {
    return nickname.getMemberMappedNickName(event.getSender());
  }

  @Comment("Ëé∑ÂèñÈ¢ÑËÆæÊòµÁß∞")
  public static String getMemberMappedNickName(Member member) {
    return nickname.getMemberMappedNickName(member);
  }

  @Comment("Ëé∑ÂèñÈ¢ÑËÆæÊòµÁß∞")
  public static String getMappedNickName(long groupId, long userId) {
    return nickname.getMemberMappedNickName(groupId, userId);
  }

  //= ==========================================================================

  @Comment("ÂèëÈÄÅÁßÅËÅäÊ∂àÊÅØ")
  public static void sendMessage(User user, Message message) {
    Objects.requireNonNull(user).sendMessage(message);
  }

  @Comment("ÂèëÈÄÅÁßÅËÅäÊ∂àÊÅØ")
  public static void sendMessage(User user, String message) {
    sendMessage(user, new PlainText(message));
  }

  @Comment("ÂèëÈÄÅÁßÅËÅäÊ∂àÊÅØ")
  public static void sendMessage(UserMessageEvent event, Message message) {
    sendMessage(event.getSender(), message);
  }

  @Comment("ÂèëÈÄÅÁßÅËÅäÊ∂àÊÅØ")
  public static void sendMessage(UserMessageEvent event, String message) {
    sendMessage(event, new PlainText(message));
  }

  @Comment("ÂèëÈÄÅÁßÅËÅäÊ∂àÊÅØ")
  public static void sendUserMessage(long id, Message message) {
    User user = getFriend(id);
    if (user == null) user = getStrangerOrFail(id);
    sendMessage(user, message);
  }

  @Comment("ÂèëÈÄÅÁßÅËÅäÊ∂àÊÅØ")
  public static void sendUserMessage(long id, String message) {
    sendUserMessage(id, new PlainText(message));
  }

  //= ==========================================================================

  @Comment("ÂèëÈÄÅÁæ§ÁªÑÊ∂àÊÅØ")
  public static void sendMessage(Group group, Message message) {
    Objects.requireNonNull(group).sendMessage(message);
  }

  @Comment("ÂèëÈÄÅÁæ§ÁªÑÊ∂àÊÅØ")
  public static void sendMessage(Group group, String message) {
    sendMessage(group, new PlainText(message));
  }

  @Comment("ÂèëÈÄÅÁæ§ÁªÑÊ∂àÊÅØ")
  public static void sendMessage(GroupMessageEvent event, Message message) {
    sendMessage(event.getGroup(), message);
  }

  @Comment("ÂèëÈÄÅÁæ§ÁªÑÊ∂àÊÅØ")
  public static void sendMessage(GroupMessageEvent event, String message) {
    sendMessage(event, new PlainText(message));
  }

  @Comment("ÂèëÈÄÅÁæ§ÁªÑÊ∂àÊÅØ")
  public static void sendGroupMessage(long group, Message message) {
    sendMessage(getGroupOrFail(group), message);
  }

  @Comment("ÂèëÈÄÅÁæ§ÁªÑÊ∂àÊÅØ")
  public static void sendGroupMessage(long group, String message) {
    sendGroupMessage(group, new PlainText(message));
  }

  //= ==========================================================================

  @Comment("ÂèëÈÄÅÁæ§ÁªÑÊ∂àÊÅØ")
  public static void sendAtMessage(Group group, Member member, Message message) {
    sendMessage(group, new At(member.getId()).plus(message));
  }

  @Comment("ÂèëÈÄÅÁæ§ÁªÑÊ∂àÊÅØ")
  public static void sendAtMessage(Group group, Member member, String message) {
    sendAtMessage(group, member, new PlainText(message));
  }

  @Comment("ÂèëÈÄÅÁæ§ÁªÑÊ∂àÊÅØ")
  public static void sendAtMessage(GroupMessageEvent event, Message message) {
    sendAtMessage(event.getGroup(), event.getSender(), message);
  }

  @Comment("ÂèëÈÄÅÁæ§ÁªÑÊ∂àÊÅØ")
  public static void sendAtMessage(GroupMessageEvent event, String message) {
    sendAtMessage(event, new PlainText(message));
  }

  @Comment("ÂèëÈÄÅÁæ§ÁªÑÊ∂àÊÅØ")
  public static void sendAtMessage(long group, long member, Message message) {
    Group groupOrFail = getGroupOrFail(group);
    Member memberOrFail = groupOrFail.getOrFail(member);
    sendAtMessage(groupOrFail, memberOrFail, message);
  }

  @Comment("ÂèëÈÄÅÁæ§ÁªÑÊ∂àÊÅØ")
  public static void sendAtMessage(long group, long member, String message) {
    Group groupOrFail = getGroupOrFail(group);
    Member memberOrFail = groupOrFail.getOrFail(member);
    sendAtMessage(groupOrFail, memberOrFail, new PlainText(message));
  }

  //= ==========================================================================
  //= Êú∫Âô®‰∫∫ÂäüËÉΩ

  @Comment("Ëé∑ÂèñMiraiÊú∫Âô®‰∫∫ÂÆû‰æã Âè™Êúâ--unsafeÊ®°Âºè‰∏ãÂèØ‰ª•‰ΩøÁî®")
  public static Bot getBot() {
    if (kernelConfig.unsafe) {
      return bot;
    } else {
      logger.warning("Ëé∑ÂèñÊú∫Âô®‰∫∫ÂÆû‰æãÁ¶ÅÊ≠¢ Âè™ÊúâÂú®unsafeÊ®°Âºè‰∏ãÂèØÁî®");
      for (StackTraceElement stackTraceElement : Thread.currentThread().getStackTrace()) {
        System.out.println(stackTraceElement);
      }
      throw new CoreException("Get Mirai-BOT instance only allowed when --unsafe present!");
    }
  }

  @Comment("Ê†ºÂºèÂåñÁæ§ÁªÑ‰ø°ÊÅØ")
  public static String getGroupInfo(Group group) {
    return group.getName() + "(" + group.getId() + ") " + group.getMembers().size() + " -> " + group.getOwner().getNameCard() + "(" + group.getOwner().getId() + ")";
  }

  @Comment("Ëé∑ÂèñBOTËá™Ë∫´QQÂè∑")
  public static long getBotID() {
    return bot.getId();
  }

  @Comment("ÂàóÂá∫ÊâÄÊúâÂ•ΩÂèã")
  public static ContactList<Friend> getFriends() {
    return bot.getFriends();
  }

  @Comment("ÂàóÂá∫ÊâÄÊúâÁæ§ÁªÑ")
  public static ContactList<Group> getGroups() {
    return bot.getGroups();
  }

  @Comment("Ê†πÊçÆIDËé∑ÂèñÈôåÁîü‰∫∫")
  public static Stranger getStranger(long id) {
    return bot.getStranger(id);
  }

  @Comment("Ê†πÊçÆIDËé∑ÂèñÈôåÁîü‰∫∫")
  public static Stranger getStrangerOrFail(long id) {
    return bot.getStrangerOrFail(id);
  }

  @Comment("Ê†πÊçÆIDËé∑ÂèñÂ•ΩÂèã")
  public static Friend getFriend(long id) {
    return bot.getFriend(id);
  }

  @Comment("Ê†πÊçÆIDËé∑ÂèñÂ•ΩÂèã")
  public static Friend getFriendOrFail(long id) {
    return bot.getFriendOrFail(id);
  }

  @Comment("Ê†πÊçÆIDËé∑ÂèñÁæ§ÁªÑ")
  public static Group getGroup(long id) {
    return bot.getGroup(id);
  }

  @Comment("Ê†πÊçÆIDËé∑ÂèñÁæ§ÁªÑ")
  public static Group getGroupOrFail(long id) {
    return bot.getGroupOrFail(id);
  }

  @Comment("Ê†πÊçÆIDËé∑ÂèñÊàêÂëò")
  public static NormalMember getMemberOrFail(long group, long member) {
    return getGroupOrFail(group).getOrFail(member);
  }

  @Comment("Ëé∑ÂèñÂõæÁâáÁöÑURL")
  public static String getImageURL(Image image) {
    return queryImageUrl(image);
  }

  @Comment("Ëé∑ÂèñÂõæÁâáÁöÑURL")
  public static String getImageURL(FlashImage flashImage) {
    return queryImageUrl(flashImage.getImage());
  }

  //= ==========================================================================
  //= Êù•Ëá™ IMirai.kt

  @Comment("ËΩ¨ÂèëMirai")
  public static List<ForwardMessage.Node> downloadForwardMessage(String resourceId) {
    return Mirai.getInstance().downloadForwardMessage(bot, resourceId);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static MessageChain downloadLongMessage(String resourceId) {
    return Mirai.getInstance().downloadLongMessage(bot, resourceId);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static List<OtherClientInfo> getOnlineOtherClientsList(boolean mayIncludeSelf) {
    return Mirai.getInstance().getOnlineOtherClientsList(bot, mayIncludeSelf);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static long getUin() {
    return Mirai.getInstance().getUin(bot);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static String queryImageUrl(Image image) {
    return Mirai.getInstance().queryImageUrl(bot, image);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static UserProfile queryProfile(long id) {
    return Mirai.getInstance().queryProfile(bot, id);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static void recallMessage(MessageSource messageSource) {
    Mirai.getInstance().recallMessage(bot, messageSource);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static void sendNudge(Nudge nudge, Contact contact) {
    Mirai.getInstance().sendNudge(bot, nudge, contact);
  }

  //= ========================================================================
  //= Êù•Ëá™ LowLevelApiAccessor.kt

  @Comment("ËΩ¨ÂèëMirai")
  public static void getGroupVoiceDownloadUrl(byte[] md5, long groupId, long dstUin) {
    Mirai.getInstance().getGroupVoiceDownloadUrl(bot, md5, groupId, dstUin);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static Sequence<Long> getRawGroupList() {
    return Mirai.getInstance().getRawGroupList(bot);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static Sequence<MemberInfo> getRawGroupMemberList(long groupUin, long groupCode, long ownerId) {
    return Mirai.getInstance().getRawGroupMemberList(bot, groupUin, groupCode, ownerId);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static void muteAnonymousMember(String anonymousId, String anonymousNick, long groupId, int seconds) {
    Mirai.getInstance().muteAnonymousMember(bot, anonymousId, anonymousNick, groupId, seconds);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static Friend newFriend(FriendInfo friendInfo) {
    return Mirai.getInstance().newFriend(bot, friendInfo);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static Stranger newStranger(StrangerInfo strangerInfo) {
    return Mirai.getInstance().newStranger(bot, strangerInfo);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static boolean recallFriendMessageRaw(long targetId, int[] messagesIds, int[] messageInternalIds, int time) {
    return Mirai.getInstance().recallFriendMessageRaw(bot, targetId, messagesIds, messageInternalIds, time);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static boolean recallGroupMessageRaw(long groupCode, int[] messagesIds, int[] messageInternalIds) {
    return Mirai.getInstance().recallGroupMessageRaw(bot, groupCode, messagesIds, messageInternalIds);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static boolean recallGroupTempMessageRaw(long groupUin, long targetId, int[] messagesIds, int[] messageInternalIds, int time) {
    return Mirai.getInstance().recallGroupTempMessageRaw(bot, groupUin, targetId, messagesIds, messageInternalIds, time);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static void refreshKeys() {
    Mirai.getInstance().refreshKeys(bot);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static void solveBotInvitedJoinGroupRequestEvent(long eventId, long invitorId, long groupId, boolean accept) {
    Mirai.getInstance().solveBotInvitedJoinGroupRequestEvent(bot, eventId, invitorId, groupId, accept);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static void solveMemberJoinRequestEvent(long eventId, long fromId, String fromNick, long groupId, boolean accept, boolean blackList, String message) {
    Mirai.getInstance().solveMemberJoinRequestEvent(bot, eventId, fromId, fromNick, groupId, accept, blackList, message);
  }

  @Comment("ËΩ¨ÂèëMirai")
  public static void solveNewFriendRequestEvent(long eventId, long fromId, String fromNick, boolean accept, boolean blackList) {
    Mirai.getInstance().solveNewFriendRequestEvent(bot, eventId, fromId, fromNick, accept, blackList);
  }

  //= ==================================================================================================================
  //=
  //=
  //= ÈÖçÁΩÆÁÆ°ÁêÜ
  //=
  //=
  //= ==================================================================================================================

  //= ==================================================================================================================
  //= ÂêçÁß∞ËΩ¨Êç¢

  /**
   * a,b,c -> a-b-c for args --a-b-c xxx
   */
  public static String toArgumentName(String... name) {
    String join = String.join("-", name);
    if (NAMESPACE == null) return join;
    return NAMESPACE + "-" + join;
  }

  /**
   * a,b,c -> a.b.c for system property -Da.b.c=xxx
   */
  public static String toPropertyName(String... name) {
    String join = String.join(".", name);
    if (NAMESPACE == null) return join;
    return NAMESPACE + "." + join;
  }

  /**
   * a,b,c -> A_B_C for envs export A_B_C=xxx
   */
  public static String toEnvironmentName(String... name) {
    String join = String.join("_", name);
    if (NAMESPACE == null) return join;
    return (NAMESPACE + "_" + join).toUpperCase();
  }

  /**
   * a,b,c -> a.b.c for property a.b.c=xxx no namespace
   */
  public static String toConfigName(String... name) {
    return String.join(".", name);
  }

  //= ==================================================================================================================
  //= ÈÖçÁΩÆÂ≠òÂÇ®

  private static class FurryBlackArgument {

    private final Properties properties;
    private final LinkedList<String> options;
    private final LinkedHashMap<String, String> parameters;

    //= ========================================================================

    private static FurryBlackArgument parse(String[] arguments) {

      FurryBlackArgument instance = new FurryBlackArgument();
      int length = arguments.length;
      for (int i = 0; i < length; i++) {
        String argument = arguments[i].trim();
        if (argument.startsWith("--")) {
          if (i + 1 == length) {
            instance.options.add(argument.substring(2));
          } else {
            String next = arguments[i + 1];
            if (next.startsWith("--")) {
              instance.options.add(argument.substring(2));
            } else {
              instance.parameters.put(argument.substring(2), next);
              i++;
            }
          }
        } else {
          instance.options.add(argument);
        }
      }
      return instance;
    }

    //= ========================================================================

    private FurryBlackArgument() {
      options = new LinkedList<>();
      parameters = new LinkedHashMap<>();
      properties = new Properties();
    }

    //= ========================================================================

    @Comment(value = "Êü•ËØ¢ÂÜÖÊ†∏ÈÄâÈ°π", attention = {
      "ÁéØÂ¢ÉÂèòÈáè > Á≥ªÁªüÂ±ûÊÄß > Á®ãÂ∫èÂèÇÊï∞",
    })
    private boolean checkKernelOption(String... name) {
      if (System.getenv(toEnvironmentName(name)) != null) return true;
      if (System.getProperty(toPropertyName(name)) != null) return true;
      return options.contains(toArgumentName(name));
    }

    @Comment(value = "Êü•ËØ¢ÂÜÖÊ†∏ÂèÇÊï∞", attention = {
      "ÁéØÂ¢ÉÂèòÈáè > Á≥ªÁªüÂ±ûÊÄß > Á®ãÂ∫èÂèÇÊï∞",
    })
    private String getKernelParameter(String... name) {
      String value = System.getenv(toEnvironmentName(name));
      if (value != null) return value;
      value = System.getProperty(toPropertyName(name));
      if (value != null) return value;
      value = parameters.get(toArgumentName(name));
      if (value != null) return value;
      return null;
    }

    //= ========================================================================

    @Comment(value = "Êü•ËØ¢Ê°ÜÊû∂ÈÄâÈ°π", attention = {
      "ÁéØÂ¢ÉÂèòÈáè > Á≥ªÁªüÂ±ûÊÄß > Á®ãÂ∫èÂèÇÊï∞ > ÈÖçÁΩÆÊñá‰ª∂",
    })
    private boolean checkSystemOption(String... name) {
      if (System.getenv(toEnvironmentName(name)) != null) return true;
      if (System.getProperty(toPropertyName(name)) != null) return true;
      if (options.contains(toArgumentName(name))) return true;
      return properties.getProperty(toConfigName(name)) != null;
    }

    @Comment(value = "Êü•ËØ¢Ê°ÜÊû∂ÂèÇÊï∞", attention = {
      "ÁéØÂ¢ÉÂèòÈáè > Á≥ªÁªüÂ±ûÊÄß > Á®ãÂ∫èÂèÇÊï∞ > ÈÖçÁΩÆÊñá‰ª∂",
    })
    private String getSystemParameter(String... name) {
      String value = System.getenv(toEnvironmentName(name));
      if (value != null) return value;
      value = System.getProperty(toPropertyName(name));
      if (value != null) return value;
      value = parameters.get(toArgumentName(name));
      if (value != null) return value;
      value = properties.getProperty(toConfigName(name));
      if (value != null) return value;
      return null;
    }

    @Comment(value = "Êü•ËØ¢Ê°ÜÊû∂ÈÄâÈ°π", attention = {
      "ÁéØÂ¢ÉÂèòÈáè > Á®ãÂ∫èÂèÇÊï∞ > ÈÖçÁΩÆÊñá‰ª∂",
      "‰∏çËØªÂèñÁ≥ªÁªüÈÖçÁΩÆ,ÈÅøÂÖçÊúâ‰∫∫ÊääÂØÜÁ†ÅÂÜôÂú®ÂëΩ‰ª§Ë°å,ÂØºËá¥Ë∞ÅÈÉΩËÉΩÁúã",
    })
    private boolean checkSystemOptionSafe(String... name) {
      if (System.getenv(toEnvironmentName(name)) != null) return true;
      if (options.contains(toArgumentName(name))) return true;
      return properties.getProperty(toConfigName(name)) != null;
    }

    @Comment(value = "Êü•ËØ¢Ê°ÜÊû∂ÂèÇÊï∞", attention = {
      "ÁéØÂ¢ÉÂèòÈáè > Á®ãÂ∫èÂèÇÊï∞ > ÈÖçÁΩÆÊñá‰ª∂",
      "‰∏çËØªÂèñÁ≥ªÁªüÈÖçÁΩÆ,ÈÅøÂÖçÊúâ‰∫∫ÊääÂØÜÁ†ÅÂÜôÂú®ÂëΩ‰ª§Ë°å,ÂØºËá¥Ë∞ÅÈÉΩËÉΩÁúã",
    })
    private String getSystemParameterSafe(String... name) {
      String value = System.getenv(toEnvironmentName(name));
      if (value != null) return value;
      value = parameters.get(toArgumentName(name));
      if (value != null) return value;
      value = properties.getProperty(toConfigName(name));
      if (value != null) return value;
      return null;
    }

  }

  //= ==================================================================================================================
  //= ÂÜÖÊ†∏ÈÖçÁΩÆ

  private static class FurryBlackKernelConfig {

    volatile boolean debug;
    volatile boolean unsafe;
    boolean upgrade;
    boolean noLogin;
    boolean noJline;
    boolean noConsole;
    boolean forceExit;

    String level;
    private String provider;

    private static FurryBlackKernelConfig getInstance(FurryBlackArgument argument) {

      FurryBlackKernelConfig config = new FurryBlackKernelConfig();

      config.debug = argument.checkKernelOption(ARGS_DEBUG);
      config.unsafe = argument.checkKernelOption(ARGS_UNSAFE);
      config.upgrade = argument.checkKernelOption(ARGS_UPGRADE);
      config.noLogin = argument.checkKernelOption(ARGS_NO_LOGIN);
      config.noJline = argument.checkKernelOption(ARGS_NO_JLINE);
      config.noConsole = argument.checkKernelOption(ARGS_NO_CONSOLE);
      config.forceExit = argument.checkKernelOption(ARGS_FORCE_EXIT);

      config.level = argument.getKernelParameter(ARGS_LOGGER_LEVEL);
      config.provider = argument.getKernelParameter(ARGS_LOGGER_PROVIDER);

      return config;
    }

    private FurryBlackKernelConfig() {

    }
  }

  //= ==================================================================================================================
  //= Ê°ÜÊû∂ÈÖçÁΩÆ

  private static class FurryBlackSystemConfig {

    private static final LoggerX logger = LoggerXFactory.newLogger(FurryBlackSystemConfig.class);

    private AuthMode authMod;
    private long username;
    private String password;
    private DeviceType deviceType;
    private String deviceInfo;
    private Pattern commandRegex;
    private Integer monitorThreads;
    private Integer scheduleThreads;

    public static FurryBlackSystemConfig getInstance(FurryBlackArgument argument) {

      FurryBlackSystemConfig config = new FurryBlackSystemConfig();

      //= ======================================================================

      String authMod = argument.getSystemParameter(CONF_ACCOUNT_AUTH);
      if (authMod == null) {
        logger.info("ËÆ§ËØÅÊ®°Âºè -> ‰ΩøÁî®ÈªòËÆ§ÂÄº");
      } else {
        config.authMod = AuthMode.of(authMod);
        logger.seek("ËÆ§ËØÅÊ®°Âºè -> " + config.authMod);
      }

      //= ======================================================================

      String username = argument.getSystemParameter(CONF_ACCOUNT_USERNAME);
      FirstBootException.require(username, CONF_ACCOUNT_USERNAME);
      logger.seek("ÁôªÂΩïË¥¶Âè∑ -> " + username);
      config.username = parseLong(username, () -> new InvalidConfigException("Ë¥¶Âè∑ÈÖçÁΩÆÊúâËØØ -> " + username));

      //= ======================================================================

      if (config.authMod == AuthMode.PASSWD) {
        String password = argument.getSystemParameterSafe(CONF_ACCOUNT_PASSWORD);
        FirstBootException.require(password, CONF_ACCOUNT_PASSWORD);
        config.password = password;
        if (kernelConfig.debug) {
          logger.warning("ÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅ");
          logger.warning("Ë∞ÉËØïÊ®°ÂºèÂºÄÂêØÊó∂‰ºöÂú®Êó•Âøó‰∏≠ËÆ∞ÂΩïÂØÜÁ†Å");
          logger.warning("ÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅ");
          logger.seek("ÁôªÂΩïÂØÜÁ†Å -> " + password);
          logger.warning("ÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅ");
          logger.warning("Ë∞ÉËØïÊ®°ÂºèÂºÄÂêØÊó∂‰ºöÂú®Êó•Âøó‰∏≠ËÆ∞ÂΩïÂØÜÁ†Å");
          logger.warning("ÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅÔºÅ");
        } else {
          logger.seek("ÁôªÂΩïÂØÜÁ†Å -> " + "*".repeat(username.length()));
        }
      }

      //= ======================================================================

      String deviceType = argument.getSystemParameter(CONF_DEVICE_TYPE);
      if (deviceType == null) {
        if (config.authMod == AuthMode.QRCODE) {
          config.deviceType = DeviceType.WATCH;
          logger.info("ËÆæÂ§áÁ±ªÂûã -> ‰ΩøÁî®ÈªòËÆ§ÂÄº WATCH");
        } else {
          config.deviceType = DeviceType.PHONE;
          logger.info("ËÆæÂ§áÁ±ªÂûã -> ‰ΩøÁî®ÈªòËÆ§ÂÄº PHONE");
        }
      } else {
        config.deviceType = DeviceType.of(deviceType);
        if (config.authMod == AuthMode.QRCODE && config.deviceType != DeviceType.WATCH && config.deviceType != DeviceType.MACOS) {
          throw new InvalidConfigException("ÈÖçÁΩÆÊó†Êïà - Êâ´Á†ÅËÆ§ËØÅÂøÖÈ°ª‰ΩøÁî® WATCH/MACOS ÂçèËÆÆ");
        }
        logger.seek("ËÆæÂ§áÁ±ªÂûã -> " + config.deviceType);
      }

      //= ======================================================================

      String deviceInfo = argument.getSystemParameter(CONF_DEVICE_INFO);
      if (deviceInfo == null) {
        logger.info("ËÆæÂ§á‰ø°ÊÅØ -> ‰ΩøÁî®ÈªòËÆ§ÂÄº device.json");
      } else {
        if (!deviceInfo.matches("^[a-zA-Z0-9.]*$")) {
          throw new InvalidConfigException("ÈÖçÁΩÆÊó†Êïà - ËÆæÂ§á‰ø°ÊÅØÊñá‰ª∂Âêç‰∏çÂêàÊ≥ï ÂøÖÈ°ªÊª°Ë∂≥ ^[a-zA-Z0-9.]*$");
        }
        logger.seek("ËÆæÂ§á‰ø°ÊÅØ -> " + deviceInfo);
      }
      Path deviceInfoPath = FileEnhance.get(FOLDER_CONFIG, deviceInfo == null ? "device.json" : deviceInfo);

      if (Files.notExists(deviceInfoPath)) {
        throw new FirstBootException("ÈÖçÁΩÆÊó†Êïà - ËÆæÂ§á‰ø°ÊÅØÊñá‰ª∂‰∏çÂ≠òÂú® -> " + deviceInfoPath);
      }

      if (!Files.isRegularFile(deviceInfoPath)) {
        throw new FirstBootException("ÈÖçÁΩÆÊó†Êïà - ËÆæÂ§á‰ø°ÊÅØ‰∏çÊòØÂπ≥Êñá‰ª∂ -> " + deviceInfoPath);
      }

      try {
        config.deviceInfo = Files.readString(deviceInfoPath);
      } catch (IOException exception) {
        throw new CoreException("ÈÖçÁΩÆÊó†Êïà - ËÆæÂ§á‰ø°ÊÅØÊñá‰ª∂Êó†Ê≥ïËØªÂèñ -> " + deviceInfoPath, exception);
      }

      //= ======================================================================

      String commandRegex = argument.getSystemParameter(CONF_COMMAND_REGEX);
      if (commandRegex == null) {
        config.commandRegex = Pattern.compile("^/[a-zA-Z0-9]{2,16}");
        logger.info("ÂëΩ‰ª§Ê≠£Âàô -> ‰ΩøÁî®ÈªòËÆ§ÂÄº ^/[a-zA-Z0-9]{2,16}");
      } else {
        config.commandRegex = Pattern.compile(commandRegex);
        logger.seek("ÂëΩ‰ª§Ê≠£Âàô -> " + commandRegex);
      }

      //= ======================================================================

      String monitorThreads = argument.getSystemParameter(CONF_THREADS_MONITOR);
      if (monitorThreads == null) {
        config.monitorThreads = CPU_CORES;
        logger.info("ÁõëÂê¨Âô®Ê±† -> ‰ΩøÁî®Á≥ªÁªüÂÄº " + CPU_CORES);
      } else {
        config.monitorThreads = parseInt(monitorThreads, () -> new InvalidConfigException("ÁõëÂê¨Âô®Ê±†ÈÖçÁΩÆÊúâËØØ -> " + monitorThreads));
        if (config.monitorThreads <= 0) {
          config.monitorThreads = CPU_CORES;
          logger.seek("ÁõëÂê¨Âô®Ê±† -> ‰ΩøÁî®Ëá™Âä®ÂÄº " + config.monitorThreads);
        } else {
          logger.seek("ÁõëÂê¨Âô®Ê±† -> " + config.monitorThreads);
        }
      }

      //= ======================================================================

      String scheduleThreads = argument.getSystemParameter(CONF_THREADS_SCHEDULE);
      if (scheduleThreads == null) {
        config.scheduleThreads = CPU_CORES;
        logger.info("ÂÆöÊó∂Âô®Ê±† -> ‰ΩøÁî®Á≥ªÁªüÂÄº " + CPU_CORES);
      } else {
        config.scheduleThreads = parseInt(scheduleThreads, () -> new InvalidConfigException("ÂÆöÊó∂Âô®Ê±†ÈÖçÁΩÆÊúâËØØ -> " + scheduleThreads));
        if (config.scheduleThreads <= 0) {
          config.scheduleThreads = CPU_CORES;
          logger.seek("ÂÆöÊó∂Âô®Ê±† -> ‰ΩøÁî®Ëá™Âä®ÂÄº " + config.monitorThreads);
        } else {
          logger.seek("ÂÆöÊó∂Âô®Ê±† -> " + config.scheduleThreads);
        }
      }

      //= ======================================================================

      return config;
    }

    private FurryBlackSystemConfig() {

    }

    //= ========================================================================

    private enum AuthMode {

      PASSWD,
      QRCODE,
      ;

      private static AuthMode of(String value) {
        return switch (value.toLowerCase()) {
          case "code", "qrcode", "scancode" -> QRCODE;
          case "pass", "passwd", "password" -> PASSWD;
          default -> throw new InvalidConfigException("ERROR: No such AuthMode -> " + value);
        };
      }
    }

    //= ========================================================================

    private enum DeviceType {

      PAD,
      PHONE,
      WATCH,
      IPAD,
      MACOS,
      ;

      private static DeviceType of(String value) {
        return switch (value.toLowerCase()) {
          case "pad", "android_pad" -> PAD;
          case "phone", "android_phone" -> PHONE;
          case "watch", "android_watch" -> WATCH;
          case "ipad" -> IPAD;
          case "macos" -> MACOS;
          default -> throw new InvalidConfigException("ERROR: No such DeviceType -> " + value);
        };
      }

      private BotConfiguration.MiraiProtocol toMiraiProtocol() {
        return switch (this) {
          case PAD -> BotConfiguration.MiraiProtocol.ANDROID_PAD;
          case PHONE -> BotConfiguration.MiraiProtocol.ANDROID_PHONE;
          case WATCH -> BotConfiguration.MiraiProtocol.ANDROID_WATCH;
          case IPAD -> BotConfiguration.MiraiProtocol.IPAD;
          case MACOS -> BotConfiguration.MiraiProtocol.MACOS;
        };
      }
    }

  }

  //= ==================================================================================================================
  //=
  //=
  //= ËæÖÂä©ÂäüËÉΩ
  //=
  //=
  //= ==================================================================================================================

}